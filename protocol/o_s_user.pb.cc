// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "o_s_user.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace oo {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* user_login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_login_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_login_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_login_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_enter_room_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_enter_room_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_enter_room_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_enter_room_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_enter_room_update_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_enter_room_update_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_leave_room_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_leave_room_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_leave_room_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_leave_room_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_leave_room_update_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_leave_room_update_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_content_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_content_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* user_content_UCon_descriptor_ = NULL;
const ::google::protobuf::Descriptor* user_send_to_user_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_send_to_user_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_send_to_user_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_send_to_user_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_send_to_user_update_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_send_to_user_update_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_send_to_room_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_send_to_room_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_send_to_room_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_send_to_room_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_send_to_room_update_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_send_to_room_update_reflection_ = NULL;
const ::google::protobuf::Descriptor* room_create_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  room_create_reflection_ = NULL;
const ::google::protobuf::Descriptor* room_create_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  room_create_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* room_active_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  room_active_reflection_ = NULL;
const ::google::protobuf::Descriptor* room_active_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  room_active_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* room_destory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  room_destory_reflection_ = NULL;
const ::google::protobuf::Descriptor* room_destory_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  room_destory_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* room_close_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  room_close_reflection_ = NULL;
const ::google::protobuf::Descriptor* room_close_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  room_close_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* room_lst_user_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  room_lst_user_reflection_ = NULL;
const ::google::protobuf::Descriptor* room_lst_user_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  room_lst_user_result_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_o_5fs_5fuser_2eproto() {
  protobuf_AddDesc_o_5fs_5fuser_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "o_s_user.proto");
  GOOGLE_CHECK(file != NULL);
  user_login_descriptor_ = file->message_type(0);
  static const int user_login_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_login, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_login, pwd_),
  };
  user_login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_login_descriptor_,
      user_login::default_instance_,
      user_login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_login));
  user_login_result_descriptor_ = file->message_type(1);
  static const int user_login_result_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_login_result, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_login_result, ser_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_login_result, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_login_result, session_code_),
  };
  user_login_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_login_result_descriptor_,
      user_login_result::default_instance_,
      user_login_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_login_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_login_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_login_result));
  user_enter_room_descriptor_ = file->message_type(2);
  static const int user_enter_room_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_enter_room, room_name_),
  };
  user_enter_room_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_enter_room_descriptor_,
      user_enter_room::default_instance_,
      user_enter_room_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_enter_room, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_enter_room, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_enter_room));
  user_enter_room_result_descriptor_ = file->message_type(3);
  static const int user_enter_room_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_enter_room_result, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_enter_room_result, room_name_),
  };
  user_enter_room_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_enter_room_result_descriptor_,
      user_enter_room_result::default_instance_,
      user_enter_room_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_enter_room_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_enter_room_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_enter_room_result));
  user_enter_room_update_descriptor_ = file->message_type(4);
  static const int user_enter_room_update_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_enter_room_update, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_enter_room_update, nick_),
  };
  user_enter_room_update_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_enter_room_update_descriptor_,
      user_enter_room_update::default_instance_,
      user_enter_room_update_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_enter_room_update, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_enter_room_update, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_enter_room_update));
  user_leave_room_descriptor_ = file->message_type(5);
  static const int user_leave_room_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_leave_room, room_name_),
  };
  user_leave_room_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_leave_room_descriptor_,
      user_leave_room::default_instance_,
      user_leave_room_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_leave_room, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_leave_room, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_leave_room));
  user_leave_room_result_descriptor_ = file->message_type(6);
  static const int user_leave_room_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_leave_room_result, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_leave_room_result, room_name_),
  };
  user_leave_room_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_leave_room_result_descriptor_,
      user_leave_room_result::default_instance_,
      user_leave_room_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_leave_room_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_leave_room_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_leave_room_result));
  user_leave_room_update_descriptor_ = file->message_type(7);
  static const int user_leave_room_update_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_leave_room_update, user_),
  };
  user_leave_room_update_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_leave_room_update_descriptor_,
      user_leave_room_update::default_instance_,
      user_leave_room_update_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_leave_room_update, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_leave_room_update, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_leave_room_update));
  user_content_descriptor_ = file->message_type(8);
  static const int user_content_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_content, con_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_content, content_),
  };
  user_content_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_content_descriptor_,
      user_content::default_instance_,
      user_content_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_content, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_content, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_content));
  user_content_UCon_descriptor_ = user_content_descriptor_->enum_type(0);
  user_send_to_user_descriptor_ = file->message_type(9);
  static const int user_send_to_user_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_send_to_user, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_send_to_user, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_send_to_user, content_),
  };
  user_send_to_user_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_send_to_user_descriptor_,
      user_send_to_user::default_instance_,
      user_send_to_user_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_send_to_user, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_send_to_user, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_send_to_user));
  user_send_to_user_result_descriptor_ = file->message_type(10);
  static const int user_send_to_user_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_send_to_user_result, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_send_to_user_result, room_name_),
  };
  user_send_to_user_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_send_to_user_result_descriptor_,
      user_send_to_user_result::default_instance_,
      user_send_to_user_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_send_to_user_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_send_to_user_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_send_to_user_result));
  user_send_to_user_update_descriptor_ = file->message_type(11);
  static const int user_send_to_user_update_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_send_to_user_update, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_send_to_user_update, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_send_to_user_update, content_),
  };
  user_send_to_user_update_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_send_to_user_update_descriptor_,
      user_send_to_user_update::default_instance_,
      user_send_to_user_update_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_send_to_user_update, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_send_to_user_update, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_send_to_user_update));
  user_send_to_room_descriptor_ = file->message_type(12);
  static const int user_send_to_room_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_send_to_room, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_send_to_room, room_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_send_to_room, content_),
  };
  user_send_to_room_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_send_to_room_descriptor_,
      user_send_to_room::default_instance_,
      user_send_to_room_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_send_to_room, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_send_to_room, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_send_to_room));
  user_send_to_room_result_descriptor_ = file->message_type(13);
  static const int user_send_to_room_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_send_to_room_result, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_send_to_room_result, room_name_),
  };
  user_send_to_room_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_send_to_room_result_descriptor_,
      user_send_to_room_result::default_instance_,
      user_send_to_room_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_send_to_room_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_send_to_room_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_send_to_room_result));
  user_send_to_room_update_descriptor_ = file->message_type(14);
  static const int user_send_to_room_update_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_send_to_room_update, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_send_to_room_update, room_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_send_to_room_update, content_),
  };
  user_send_to_room_update_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_send_to_room_update_descriptor_,
      user_send_to_room_update::default_instance_,
      user_send_to_room_update_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_send_to_room_update, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_send_to_room_update, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_send_to_room_update));
  room_create_descriptor_ = file->message_type(15);
  static const int room_create_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_create, room_name_),
  };
  room_create_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      room_create_descriptor_,
      room_create::default_instance_,
      room_create_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_create, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_create, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(room_create));
  room_create_result_descriptor_ = file->message_type(16);
  static const int room_create_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_create_result, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_create_result, room_name_),
  };
  room_create_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      room_create_result_descriptor_,
      room_create_result::default_instance_,
      room_create_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_create_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_create_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(room_create_result));
  room_active_descriptor_ = file->message_type(17);
  static const int room_active_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_active, room_name_),
  };
  room_active_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      room_active_descriptor_,
      room_active::default_instance_,
      room_active_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_active, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_active, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(room_active));
  room_active_result_descriptor_ = file->message_type(18);
  static const int room_active_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_active_result, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_active_result, room_name_),
  };
  room_active_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      room_active_result_descriptor_,
      room_active_result::default_instance_,
      room_active_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_active_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_active_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(room_active_result));
  room_destory_descriptor_ = file->message_type(19);
  static const int room_destory_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_destory, room_name_),
  };
  room_destory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      room_destory_descriptor_,
      room_destory::default_instance_,
      room_destory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_destory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_destory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(room_destory));
  room_destory_result_descriptor_ = file->message_type(20);
  static const int room_destory_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_destory_result, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_destory_result, room_name_),
  };
  room_destory_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      room_destory_result_descriptor_,
      room_destory_result::default_instance_,
      room_destory_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_destory_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_destory_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(room_destory_result));
  room_close_descriptor_ = file->message_type(21);
  static const int room_close_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_close, room_name_),
  };
  room_close_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      room_close_descriptor_,
      room_close::default_instance_,
      room_close_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_close, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_close, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(room_close));
  room_close_result_descriptor_ = file->message_type(22);
  static const int room_close_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_close_result, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_close_result, room_name_),
  };
  room_close_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      room_close_result_descriptor_,
      room_close_result::default_instance_,
      room_close_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_close_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_close_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(room_close_result));
  room_lst_user_descriptor_ = file->message_type(23);
  static const int room_lst_user_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_lst_user, room_name_),
  };
  room_lst_user_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      room_lst_user_descriptor_,
      room_lst_user::default_instance_,
      room_lst_user_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_lst_user, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_lst_user, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(room_lst_user));
  room_lst_user_result_descriptor_ = file->message_type(24);
  static const int room_lst_user_result_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_lst_user_result, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_lst_user_result, room_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_lst_user_result, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_lst_user_result, nicks_),
  };
  room_lst_user_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      room_lst_user_result_descriptor_,
      room_lst_user_result::default_instance_,
      room_lst_user_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_lst_user_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_lst_user_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(room_lst_user_result));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_o_5fs_5fuser_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_login_descriptor_, &user_login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_login_result_descriptor_, &user_login_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_enter_room_descriptor_, &user_enter_room::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_enter_room_result_descriptor_, &user_enter_room_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_enter_room_update_descriptor_, &user_enter_room_update::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_leave_room_descriptor_, &user_leave_room::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_leave_room_result_descriptor_, &user_leave_room_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_leave_room_update_descriptor_, &user_leave_room_update::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_content_descriptor_, &user_content::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_send_to_user_descriptor_, &user_send_to_user::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_send_to_user_result_descriptor_, &user_send_to_user_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_send_to_user_update_descriptor_, &user_send_to_user_update::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_send_to_room_descriptor_, &user_send_to_room::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_send_to_room_result_descriptor_, &user_send_to_room_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_send_to_room_update_descriptor_, &user_send_to_room_update::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    room_create_descriptor_, &room_create::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    room_create_result_descriptor_, &room_create_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    room_active_descriptor_, &room_active::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    room_active_result_descriptor_, &room_active_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    room_destory_descriptor_, &room_destory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    room_destory_result_descriptor_, &room_destory_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    room_close_descriptor_, &room_close::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    room_close_result_descriptor_, &room_close_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    room_lst_user_descriptor_, &room_lst_user::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    room_lst_user_result_descriptor_, &room_lst_user_result::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_o_5fs_5fuser_2eproto() {
  delete user_login::default_instance_;
  delete user_login_reflection_;
  delete user_login_result::default_instance_;
  delete user_login_result_reflection_;
  delete user_enter_room::default_instance_;
  delete user_enter_room_reflection_;
  delete user_enter_room_result::default_instance_;
  delete user_enter_room_result_reflection_;
  delete user_enter_room_update::default_instance_;
  delete user_enter_room_update_reflection_;
  delete user_leave_room::default_instance_;
  delete user_leave_room_reflection_;
  delete user_leave_room_result::default_instance_;
  delete user_leave_room_result_reflection_;
  delete user_leave_room_update::default_instance_;
  delete user_leave_room_update_reflection_;
  delete user_content::default_instance_;
  delete user_content_reflection_;
  delete user_send_to_user::default_instance_;
  delete user_send_to_user_reflection_;
  delete user_send_to_user_result::default_instance_;
  delete user_send_to_user_result_reflection_;
  delete user_send_to_user_update::default_instance_;
  delete user_send_to_user_update_reflection_;
  delete user_send_to_room::default_instance_;
  delete user_send_to_room_reflection_;
  delete user_send_to_room_result::default_instance_;
  delete user_send_to_room_result_reflection_;
  delete user_send_to_room_update::default_instance_;
  delete user_send_to_room_update_reflection_;
  delete room_create::default_instance_;
  delete room_create_reflection_;
  delete room_create_result::default_instance_;
  delete room_create_result_reflection_;
  delete room_active::default_instance_;
  delete room_active_reflection_;
  delete room_active_result::default_instance_;
  delete room_active_result_reflection_;
  delete room_destory::default_instance_;
  delete room_destory_reflection_;
  delete room_destory_result::default_instance_;
  delete room_destory_result_reflection_;
  delete room_close::default_instance_;
  delete room_close_reflection_;
  delete room_close_result::default_instance_;
  delete room_close_result_reflection_;
  delete room_lst_user::default_instance_;
  delete room_lst_user_reflection_;
  delete room_lst_user_result::default_instance_;
  delete room_lst_user_result_reflection_;
}

void protobuf_AddDesc_o_5fs_5fuser_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016o_s_user.proto\022\010oo.proto\"\'\n\nuser_login"
    "\022\014\n\004name\030\001 \002(\t\022\013\n\003pwd\030\002 \002(\t\"X\n\021user_logi"
    "n_result\022\r\n\005error\030\001 \002(\005\022\020\n\010ser_addr\030\002 \001("
    "\t\022\014\n\004port\030\003 \001(\t\022\024\n\014session_code\030\004 \001(\t\"$\n"
    "\017user_enter_room\022\021\n\troom_name\030\001 \002(\t\":\n\026u"
    "ser_enter_room_result\022\r\n\005error\030\001 \002(\005\022\021\n\t"
    "room_name\030\002 \002(\t\"4\n\026user_enter_room_updat"
    "e\022\014\n\004user\030\001 \002(\t\022\014\n\004nick\030\002 \002(\t\"$\n\017user_le"
    "ave_room\022\021\n\troom_name\030\001 \002(\t\":\n\026user_leav"
    "e_room_result\022\r\n\005error\030\001 \002(\005\022\021\n\troom_nam"
    "e\030\002 \002(\t\"&\n\026user_leave_room_update\022\014\n\004use"
    "r\030\001 \002(\t\"\240\001\n\014user_content\022-\n\010con_type\030\001 \002"
    "(\0162\033.oo.proto.user_content.UCon\022\017\n\007conte"
    "nt\030\002 \002(\t\"P\n\004UCon\022\n\n\006UC_txt\020\001\022\n\n\006UC_jpg\020\002"
    "\022\n\n\006UC_png\020\003\022\n\n\006UC_gif\020\004\022\n\n\006UC_url\020\005\022\014\n\010"
    "UC_voice\020\006\"]\n\021user_send_to_user\022\014\n\004user\030"
    "\001 \002(\t\022\021\n\tuser_name\030\002 \002(\t\022\'\n\007content\030\003 \002("
    "\0132\026.oo.proto.user_content\"<\n\030user_send_t"
    "o_user_result\022\r\n\005error\030\001 \002(\005\022\021\n\troom_nam"
    "e\030\003 \002(\t\"d\n\030user_send_to_user_update\022\014\n\004u"
    "ser\030\001 \002(\t\022\021\n\tuser_name\030\002 \002(\t\022\'\n\007content\030"
    "\003 \002(\0132\026.oo.proto.user_content\"]\n\021user_se"
    "nd_to_room\022\014\n\004user\030\001 \002(\t\022\021\n\troom_name\030\002 "
    "\002(\t\022\'\n\007content\030\003 \002(\0132\026.oo.proto.user_con"
    "tent\"<\n\030user_send_to_room_result\022\r\n\005erro"
    "r\030\001 \002(\005\022\021\n\troom_name\030\003 \002(\t\"d\n\030user_send_"
    "to_room_update\022\014\n\004user\030\001 \002(\t\022\021\n\troom_nam"
    "e\030\002 \002(\t\022\'\n\007content\030\003 \002(\0132\026.oo.proto.user"
    "_content\" \n\013room_create\022\021\n\troom_name\030\001 \002"
    "(\t\"6\n\022room_create_result\022\r\n\005error\030\001 \002(\005\022"
    "\021\n\troom_name\030\002 \002(\t\" \n\013room_active\022\021\n\troo"
    "m_name\030\001 \002(\t\"6\n\022room_active_result\022\r\n\005er"
    "ror\030\001 \002(\005\022\021\n\troom_name\030\002 \002(\t\"!\n\014room_des"
    "tory\022\021\n\troom_name\030\001 \002(\t\"7\n\023room_destory_"
    "result\022\r\n\005error\030\001 \002(\005\022\021\n\troom_name\030\002 \002(\t"
    "\"\037\n\nroom_close\022\021\n\troom_name\030\001 \002(\t\"5\n\021roo"
    "m_close_result\022\r\n\005error\030\001 \002(\005\022\021\n\troom_na"
    "me\030\002 \002(\t\"\"\n\rroom_lst_user\022\021\n\troom_name\030\001"
    " \002(\t\"U\n\024room_lst_user_result\022\r\n\005error\030\001 "
    "\002(\005\022\021\n\troom_name\030\002 \002(\t\022\014\n\004user\030\003 \003(\t\022\r\n\005"
    "nicks\030\004 \003(\tB\014\n\010oo.protoH\001", 1625);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "o_s_user.proto", &protobuf_RegisterTypes);
  user_login::default_instance_ = new user_login();
  user_login_result::default_instance_ = new user_login_result();
  user_enter_room::default_instance_ = new user_enter_room();
  user_enter_room_result::default_instance_ = new user_enter_room_result();
  user_enter_room_update::default_instance_ = new user_enter_room_update();
  user_leave_room::default_instance_ = new user_leave_room();
  user_leave_room_result::default_instance_ = new user_leave_room_result();
  user_leave_room_update::default_instance_ = new user_leave_room_update();
  user_content::default_instance_ = new user_content();
  user_send_to_user::default_instance_ = new user_send_to_user();
  user_send_to_user_result::default_instance_ = new user_send_to_user_result();
  user_send_to_user_update::default_instance_ = new user_send_to_user_update();
  user_send_to_room::default_instance_ = new user_send_to_room();
  user_send_to_room_result::default_instance_ = new user_send_to_room_result();
  user_send_to_room_update::default_instance_ = new user_send_to_room_update();
  room_create::default_instance_ = new room_create();
  room_create_result::default_instance_ = new room_create_result();
  room_active::default_instance_ = new room_active();
  room_active_result::default_instance_ = new room_active_result();
  room_destory::default_instance_ = new room_destory();
  room_destory_result::default_instance_ = new room_destory_result();
  room_close::default_instance_ = new room_close();
  room_close_result::default_instance_ = new room_close_result();
  room_lst_user::default_instance_ = new room_lst_user();
  room_lst_user_result::default_instance_ = new room_lst_user_result();
  user_login::default_instance_->InitAsDefaultInstance();
  user_login_result::default_instance_->InitAsDefaultInstance();
  user_enter_room::default_instance_->InitAsDefaultInstance();
  user_enter_room_result::default_instance_->InitAsDefaultInstance();
  user_enter_room_update::default_instance_->InitAsDefaultInstance();
  user_leave_room::default_instance_->InitAsDefaultInstance();
  user_leave_room_result::default_instance_->InitAsDefaultInstance();
  user_leave_room_update::default_instance_->InitAsDefaultInstance();
  user_content::default_instance_->InitAsDefaultInstance();
  user_send_to_user::default_instance_->InitAsDefaultInstance();
  user_send_to_user_result::default_instance_->InitAsDefaultInstance();
  user_send_to_user_update::default_instance_->InitAsDefaultInstance();
  user_send_to_room::default_instance_->InitAsDefaultInstance();
  user_send_to_room_result::default_instance_->InitAsDefaultInstance();
  user_send_to_room_update::default_instance_->InitAsDefaultInstance();
  room_create::default_instance_->InitAsDefaultInstance();
  room_create_result::default_instance_->InitAsDefaultInstance();
  room_active::default_instance_->InitAsDefaultInstance();
  room_active_result::default_instance_->InitAsDefaultInstance();
  room_destory::default_instance_->InitAsDefaultInstance();
  room_destory_result::default_instance_->InitAsDefaultInstance();
  room_close::default_instance_->InitAsDefaultInstance();
  room_close_result::default_instance_->InitAsDefaultInstance();
  room_lst_user::default_instance_->InitAsDefaultInstance();
  room_lst_user_result::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_o_5fs_5fuser_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_o_5fs_5fuser_2eproto {
  StaticDescriptorInitializer_o_5fs_5fuser_2eproto() {
    protobuf_AddDesc_o_5fs_5fuser_2eproto();
  }
} static_descriptor_initializer_o_5fs_5fuser_2eproto_;


// ===================================================================

const ::std::string user_login::_default_name_;
const ::std::string user_login::_default_pwd_;
#ifndef _MSC_VER
const int user_login::kNameFieldNumber;
const int user_login::kPwdFieldNumber;
#endif  // !_MSC_VER

user_login::user_login()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void user_login::InitAsDefaultInstance() {
}

user_login::user_login(const user_login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void user_login::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  pwd_ = const_cast< ::std::string*>(&_default_pwd_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_login::~user_login() {
  SharedDtor();
}

void user_login::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (pwd_ != &_default_pwd_) {
    delete pwd_;
  }
  if (this != default_instance_) {
  }
}

void user_login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_login_descriptor_;
}

const user_login& user_login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_o_5fs_5fuser_2eproto();  return *default_instance_;
}

user_login* user_login::default_instance_ = NULL;

user_login* user_login::New() const {
  return new user_login;
}

void user_login::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (pwd_ != &_default_pwd_) {
        pwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pwd;
        break;
      }
      
      // required string pwd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pwd().data(), this->pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void user_login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required string pwd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pwd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* user_login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required string pwd = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pwd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int user_login::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string pwd = 2;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_login::MergeFrom(const user_login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      set_pwd(from.pwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_login::CopyFrom(const user_login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_login::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void user_login::Swap(user_login* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(pwd_, other->pwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_login_descriptor_;
  metadata.reflection = user_login_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string user_login_result::_default_ser_addr_;
const ::std::string user_login_result::_default_port_;
const ::std::string user_login_result::_default_session_code_;
#ifndef _MSC_VER
const int user_login_result::kErrorFieldNumber;
const int user_login_result::kSerAddrFieldNumber;
const int user_login_result::kPortFieldNumber;
const int user_login_result::kSessionCodeFieldNumber;
#endif  // !_MSC_VER

user_login_result::user_login_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void user_login_result::InitAsDefaultInstance() {
}

user_login_result::user_login_result(const user_login_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void user_login_result::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  ser_addr_ = const_cast< ::std::string*>(&_default_ser_addr_);
  port_ = const_cast< ::std::string*>(&_default_port_);
  session_code_ = const_cast< ::std::string*>(&_default_session_code_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_login_result::~user_login_result() {
  SharedDtor();
}

void user_login_result::SharedDtor() {
  if (ser_addr_ != &_default_ser_addr_) {
    delete ser_addr_;
  }
  if (port_ != &_default_port_) {
    delete port_;
  }
  if (session_code_ != &_default_session_code_) {
    delete session_code_;
  }
  if (this != default_instance_) {
  }
}

void user_login_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_login_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_login_result_descriptor_;
}

const user_login_result& user_login_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_o_5fs_5fuser_2eproto();  return *default_instance_;
}

user_login_result* user_login_result::default_instance_ = NULL;

user_login_result* user_login_result::New() const {
  return new user_login_result;
}

void user_login_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
    if (_has_bit(1)) {
      if (ser_addr_ != &_default_ser_addr_) {
        ser_addr_->clear();
      }
    }
    if (_has_bit(2)) {
      if (port_ != &_default_port_) {
        port_->clear();
      }
    }
    if (_has_bit(3)) {
      if (session_code_ != &_default_session_code_) {
        session_code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_login_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ser_addr;
        break;
      }
      
      // optional string ser_addr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ser_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ser_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ser_addr().data(), this->ser_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_port;
        break;
      }
      
      // optional string port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_port:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_port()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->port().data(), this->port().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_session_code;
        break;
      }
      
      // optional string session_code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_code().data(), this->session_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void user_login_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }
  
  // optional string ser_addr = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ser_addr().data(), this->ser_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ser_addr(), output);
  }
  
  // optional string port = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->port(), output);
  }
  
  // optional string session_code = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_code().data(), this->session_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->session_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* user_login_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }
  
  // optional string ser_addr = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ser_addr().data(), this->ser_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ser_addr(), target);
  }
  
  // optional string port = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->port(), target);
  }
  
  // optional string session_code = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_code().data(), this->session_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->session_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int user_login_result::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }
    
    // optional string ser_addr = 2;
    if (has_ser_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ser_addr());
    }
    
    // optional string port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->port());
    }
    
    // optional string session_code = 4;
    if (has_session_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_login_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_login_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_login_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_login_result::MergeFrom(const user_login_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_error(from.error());
    }
    if (from._has_bit(1)) {
      set_ser_addr(from.ser_addr());
    }
    if (from._has_bit(2)) {
      set_port(from.port());
    }
    if (from._has_bit(3)) {
      set_session_code(from.session_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_login_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_login_result::CopyFrom(const user_login_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_login_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void user_login_result::Swap(user_login_result* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(ser_addr_, other->ser_addr_);
    std::swap(port_, other->port_);
    std::swap(session_code_, other->session_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_login_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_login_result_descriptor_;
  metadata.reflection = user_login_result_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string user_enter_room::_default_room_name_;
#ifndef _MSC_VER
const int user_enter_room::kRoomNameFieldNumber;
#endif  // !_MSC_VER

user_enter_room::user_enter_room()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void user_enter_room::InitAsDefaultInstance() {
}

user_enter_room::user_enter_room(const user_enter_room& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void user_enter_room::SharedCtor() {
  _cached_size_ = 0;
  room_name_ = const_cast< ::std::string*>(&_default_room_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_enter_room::~user_enter_room() {
  SharedDtor();
}

void user_enter_room::SharedDtor() {
  if (room_name_ != &_default_room_name_) {
    delete room_name_;
  }
  if (this != default_instance_) {
  }
}

void user_enter_room::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_enter_room::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_enter_room_descriptor_;
}

const user_enter_room& user_enter_room::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_o_5fs_5fuser_2eproto();  return *default_instance_;
}

user_enter_room* user_enter_room::default_instance_ = NULL;

user_enter_room* user_enter_room::New() const {
  return new user_enter_room;
}

void user_enter_room::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (room_name_ != &_default_room_name_) {
        room_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_enter_room::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string room_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->room_name().data(), this->room_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void user_enter_room::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string room_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->room_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* user_enter_room::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string room_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->room_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int user_enter_room::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string room_name = 1;
    if (has_room_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_enter_room::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_enter_room* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_enter_room*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_enter_room::MergeFrom(const user_enter_room& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_room_name(from.room_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_enter_room::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_enter_room::CopyFrom(const user_enter_room& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_enter_room::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void user_enter_room::Swap(user_enter_room* other) {
  if (other != this) {
    std::swap(room_name_, other->room_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_enter_room::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_enter_room_descriptor_;
  metadata.reflection = user_enter_room_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string user_enter_room_result::_default_room_name_;
#ifndef _MSC_VER
const int user_enter_room_result::kErrorFieldNumber;
const int user_enter_room_result::kRoomNameFieldNumber;
#endif  // !_MSC_VER

user_enter_room_result::user_enter_room_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void user_enter_room_result::InitAsDefaultInstance() {
}

user_enter_room_result::user_enter_room_result(const user_enter_room_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void user_enter_room_result::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  room_name_ = const_cast< ::std::string*>(&_default_room_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_enter_room_result::~user_enter_room_result() {
  SharedDtor();
}

void user_enter_room_result::SharedDtor() {
  if (room_name_ != &_default_room_name_) {
    delete room_name_;
  }
  if (this != default_instance_) {
  }
}

void user_enter_room_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_enter_room_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_enter_room_result_descriptor_;
}

const user_enter_room_result& user_enter_room_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_o_5fs_5fuser_2eproto();  return *default_instance_;
}

user_enter_room_result* user_enter_room_result::default_instance_ = NULL;

user_enter_room_result* user_enter_room_result::New() const {
  return new user_enter_room_result;
}

void user_enter_room_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
    if (_has_bit(1)) {
      if (room_name_ != &_default_room_name_) {
        room_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_enter_room_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_name;
        break;
      }
      
      // required string room_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->room_name().data(), this->room_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void user_enter_room_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }
  
  // required string room_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->room_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* user_enter_room_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }
  
  // required string room_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->room_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int user_enter_room_result::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }
    
    // required string room_name = 2;
    if (has_room_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_enter_room_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_enter_room_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_enter_room_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_enter_room_result::MergeFrom(const user_enter_room_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_error(from.error());
    }
    if (from._has_bit(1)) {
      set_room_name(from.room_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_enter_room_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_enter_room_result::CopyFrom(const user_enter_room_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_enter_room_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void user_enter_room_result::Swap(user_enter_room_result* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(room_name_, other->room_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_enter_room_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_enter_room_result_descriptor_;
  metadata.reflection = user_enter_room_result_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string user_enter_room_update::_default_user_;
const ::std::string user_enter_room_update::_default_nick_;
#ifndef _MSC_VER
const int user_enter_room_update::kUserFieldNumber;
const int user_enter_room_update::kNickFieldNumber;
#endif  // !_MSC_VER

user_enter_room_update::user_enter_room_update()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void user_enter_room_update::InitAsDefaultInstance() {
}

user_enter_room_update::user_enter_room_update(const user_enter_room_update& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void user_enter_room_update::SharedCtor() {
  _cached_size_ = 0;
  user_ = const_cast< ::std::string*>(&_default_user_);
  nick_ = const_cast< ::std::string*>(&_default_nick_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_enter_room_update::~user_enter_room_update() {
  SharedDtor();
}

void user_enter_room_update::SharedDtor() {
  if (user_ != &_default_user_) {
    delete user_;
  }
  if (nick_ != &_default_nick_) {
    delete nick_;
  }
  if (this != default_instance_) {
  }
}

void user_enter_room_update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_enter_room_update::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_enter_room_update_descriptor_;
}

const user_enter_room_update& user_enter_room_update::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_o_5fs_5fuser_2eproto();  return *default_instance_;
}

user_enter_room_update* user_enter_room_update::default_instance_ = NULL;

user_enter_room_update* user_enter_room_update::New() const {
  return new user_enter_room_update;
}

void user_enter_room_update::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (user_ != &_default_user_) {
        user_->clear();
      }
    }
    if (_has_bit(1)) {
      if (nick_ != &_default_nick_) {
        nick_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_enter_room_update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nick;
        break;
      }
      
      // required string nick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nick().data(), this->nick().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void user_enter_room_update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user(), output);
  }
  
  // required string nick = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nick(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* user_enter_room_update::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string user = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user(), target);
  }
  
  // required string nick = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nick(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int user_enter_room_update::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }
    
    // required string nick = 2;
    if (has_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_enter_room_update::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_enter_room_update* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_enter_room_update*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_enter_room_update::MergeFrom(const user_enter_room_update& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_user(from.user());
    }
    if (from._has_bit(1)) {
      set_nick(from.nick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_enter_room_update::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_enter_room_update::CopyFrom(const user_enter_room_update& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_enter_room_update::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void user_enter_room_update::Swap(user_enter_room_update* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(nick_, other->nick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_enter_room_update::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_enter_room_update_descriptor_;
  metadata.reflection = user_enter_room_update_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string user_leave_room::_default_room_name_;
#ifndef _MSC_VER
const int user_leave_room::kRoomNameFieldNumber;
#endif  // !_MSC_VER

user_leave_room::user_leave_room()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void user_leave_room::InitAsDefaultInstance() {
}

user_leave_room::user_leave_room(const user_leave_room& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void user_leave_room::SharedCtor() {
  _cached_size_ = 0;
  room_name_ = const_cast< ::std::string*>(&_default_room_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_leave_room::~user_leave_room() {
  SharedDtor();
}

void user_leave_room::SharedDtor() {
  if (room_name_ != &_default_room_name_) {
    delete room_name_;
  }
  if (this != default_instance_) {
  }
}

void user_leave_room::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_leave_room::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_leave_room_descriptor_;
}

const user_leave_room& user_leave_room::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_o_5fs_5fuser_2eproto();  return *default_instance_;
}

user_leave_room* user_leave_room::default_instance_ = NULL;

user_leave_room* user_leave_room::New() const {
  return new user_leave_room;
}

void user_leave_room::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (room_name_ != &_default_room_name_) {
        room_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_leave_room::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string room_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->room_name().data(), this->room_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void user_leave_room::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string room_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->room_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* user_leave_room::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string room_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->room_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int user_leave_room::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string room_name = 1;
    if (has_room_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_leave_room::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_leave_room* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_leave_room*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_leave_room::MergeFrom(const user_leave_room& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_room_name(from.room_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_leave_room::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_leave_room::CopyFrom(const user_leave_room& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_leave_room::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void user_leave_room::Swap(user_leave_room* other) {
  if (other != this) {
    std::swap(room_name_, other->room_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_leave_room::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_leave_room_descriptor_;
  metadata.reflection = user_leave_room_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string user_leave_room_result::_default_room_name_;
#ifndef _MSC_VER
const int user_leave_room_result::kErrorFieldNumber;
const int user_leave_room_result::kRoomNameFieldNumber;
#endif  // !_MSC_VER

user_leave_room_result::user_leave_room_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void user_leave_room_result::InitAsDefaultInstance() {
}

user_leave_room_result::user_leave_room_result(const user_leave_room_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void user_leave_room_result::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  room_name_ = const_cast< ::std::string*>(&_default_room_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_leave_room_result::~user_leave_room_result() {
  SharedDtor();
}

void user_leave_room_result::SharedDtor() {
  if (room_name_ != &_default_room_name_) {
    delete room_name_;
  }
  if (this != default_instance_) {
  }
}

void user_leave_room_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_leave_room_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_leave_room_result_descriptor_;
}

const user_leave_room_result& user_leave_room_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_o_5fs_5fuser_2eproto();  return *default_instance_;
}

user_leave_room_result* user_leave_room_result::default_instance_ = NULL;

user_leave_room_result* user_leave_room_result::New() const {
  return new user_leave_room_result;
}

void user_leave_room_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
    if (_has_bit(1)) {
      if (room_name_ != &_default_room_name_) {
        room_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_leave_room_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_name;
        break;
      }
      
      // required string room_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->room_name().data(), this->room_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void user_leave_room_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }
  
  // required string room_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->room_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* user_leave_room_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }
  
  // required string room_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->room_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int user_leave_room_result::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }
    
    // required string room_name = 2;
    if (has_room_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_leave_room_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_leave_room_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_leave_room_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_leave_room_result::MergeFrom(const user_leave_room_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_error(from.error());
    }
    if (from._has_bit(1)) {
      set_room_name(from.room_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_leave_room_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_leave_room_result::CopyFrom(const user_leave_room_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_leave_room_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void user_leave_room_result::Swap(user_leave_room_result* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(room_name_, other->room_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_leave_room_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_leave_room_result_descriptor_;
  metadata.reflection = user_leave_room_result_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string user_leave_room_update::_default_user_;
#ifndef _MSC_VER
const int user_leave_room_update::kUserFieldNumber;
#endif  // !_MSC_VER

user_leave_room_update::user_leave_room_update()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void user_leave_room_update::InitAsDefaultInstance() {
}

user_leave_room_update::user_leave_room_update(const user_leave_room_update& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void user_leave_room_update::SharedCtor() {
  _cached_size_ = 0;
  user_ = const_cast< ::std::string*>(&_default_user_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_leave_room_update::~user_leave_room_update() {
  SharedDtor();
}

void user_leave_room_update::SharedDtor() {
  if (user_ != &_default_user_) {
    delete user_;
  }
  if (this != default_instance_) {
  }
}

void user_leave_room_update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_leave_room_update::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_leave_room_update_descriptor_;
}

const user_leave_room_update& user_leave_room_update::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_o_5fs_5fuser_2eproto();  return *default_instance_;
}

user_leave_room_update* user_leave_room_update::default_instance_ = NULL;

user_leave_room_update* user_leave_room_update::New() const {
  return new user_leave_room_update;
}

void user_leave_room_update::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (user_ != &_default_user_) {
        user_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_leave_room_update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void user_leave_room_update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* user_leave_room_update::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string user = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int user_leave_room_update::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_leave_room_update::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_leave_room_update* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_leave_room_update*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_leave_room_update::MergeFrom(const user_leave_room_update& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_user(from.user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_leave_room_update::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_leave_room_update::CopyFrom(const user_leave_room_update& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_leave_room_update::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void user_leave_room_update::Swap(user_leave_room_update* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_leave_room_update::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_leave_room_update_descriptor_;
  metadata.reflection = user_leave_room_update_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* user_content_UCon_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_content_UCon_descriptor_;
}
bool user_content_UCon_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const user_content_UCon user_content::UC_txt;
const user_content_UCon user_content::UC_jpg;
const user_content_UCon user_content::UC_png;
const user_content_UCon user_content::UC_gif;
const user_content_UCon user_content::UC_url;
const user_content_UCon user_content::UC_voice;
const user_content_UCon user_content::UCon_MIN;
const user_content_UCon user_content::UCon_MAX;
const int user_content::UCon_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string user_content::_default_content_;
#ifndef _MSC_VER
const int user_content::kConTypeFieldNumber;
const int user_content::kContentFieldNumber;
#endif  // !_MSC_VER

user_content::user_content()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void user_content::InitAsDefaultInstance() {
}

user_content::user_content(const user_content& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void user_content::SharedCtor() {
  _cached_size_ = 0;
  con_type_ = 1;
  content_ = const_cast< ::std::string*>(&_default_content_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_content::~user_content() {
  SharedDtor();
}

void user_content::SharedDtor() {
  if (content_ != &_default_content_) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void user_content::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_content::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_content_descriptor_;
}

const user_content& user_content::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_o_5fs_5fuser_2eproto();  return *default_instance_;
}

user_content* user_content::default_instance_ = NULL;

user_content* user_content::New() const {
  return new user_content;
}

void user_content::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    con_type_ = 1;
    if (_has_bit(1)) {
      if (content_ != &_default_content_) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_content::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .oo.proto.user_content.UCon con_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::oo::proto::user_content_UCon_IsValid(value)) {
            set_con_type(static_cast< ::oo::proto::user_content_UCon >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }
      
      // required string content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void user_content::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .oo.proto.user_content.UCon con_type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->con_type(), output);
  }
  
  // required string content = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->content(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* user_content::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .oo.proto.user_content.UCon con_type = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->con_type(), target);
  }
  
  // required string content = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int user_content::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .oo.proto.user_content.UCon con_type = 1;
    if (has_con_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->con_type());
    }
    
    // required string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_content::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_content* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_content*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_content::MergeFrom(const user_content& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_con_type(from.con_type());
    }
    if (from._has_bit(1)) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_content::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_content::CopyFrom(const user_content& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_content::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void user_content::Swap(user_content* other) {
  if (other != this) {
    std::swap(con_type_, other->con_type_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_content::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_content_descriptor_;
  metadata.reflection = user_content_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string user_send_to_user::_default_user_;
const ::std::string user_send_to_user::_default_user_name_;
#ifndef _MSC_VER
const int user_send_to_user::kUserFieldNumber;
const int user_send_to_user::kUserNameFieldNumber;
const int user_send_to_user::kContentFieldNumber;
#endif  // !_MSC_VER

user_send_to_user::user_send_to_user()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void user_send_to_user::InitAsDefaultInstance() {
  content_ = const_cast< ::oo::proto::user_content*>(&::oo::proto::user_content::default_instance());
}

user_send_to_user::user_send_to_user(const user_send_to_user& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void user_send_to_user::SharedCtor() {
  _cached_size_ = 0;
  user_ = const_cast< ::std::string*>(&_default_user_);
  user_name_ = const_cast< ::std::string*>(&_default_user_name_);
  content_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_send_to_user::~user_send_to_user() {
  SharedDtor();
}

void user_send_to_user::SharedDtor() {
  if (user_ != &_default_user_) {
    delete user_;
  }
  if (user_name_ != &_default_user_name_) {
    delete user_name_;
  }
  if (this != default_instance_) {
    delete content_;
  }
}

void user_send_to_user::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_send_to_user::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_send_to_user_descriptor_;
}

const user_send_to_user& user_send_to_user::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_o_5fs_5fuser_2eproto();  return *default_instance_;
}

user_send_to_user* user_send_to_user::default_instance_ = NULL;

user_send_to_user* user_send_to_user::New() const {
  return new user_send_to_user;
}

void user_send_to_user::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (user_ != &_default_user_) {
        user_->clear();
      }
    }
    if (_has_bit(1)) {
      if (user_name_ != &_default_user_name_) {
        user_name_->clear();
      }
    }
    if (_has_bit(2)) {
      if (content_ != NULL) content_->::oo::proto::user_content::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_send_to_user::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_name;
        break;
      }
      
      // required string user_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }
      
      // required .oo.proto.user_content content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void user_send_to_user::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user(), output);
  }
  
  // required string user_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user_name(), output);
  }
  
  // required .oo.proto.user_content content = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->content(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* user_send_to_user::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string user = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user(), target);
  }
  
  // required string user_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_name(), target);
  }
  
  // required .oo.proto.user_content content = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->content(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int user_send_to_user::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }
    
    // required string user_name = 2;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }
    
    // required .oo.proto.user_content content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->content());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_send_to_user::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_send_to_user* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_send_to_user*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_send_to_user::MergeFrom(const user_send_to_user& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_user(from.user());
    }
    if (from._has_bit(1)) {
      set_user_name(from.user_name());
    }
    if (from._has_bit(2)) {
      mutable_content()->::oo::proto::user_content::MergeFrom(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_send_to_user::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_send_to_user::CopyFrom(const user_send_to_user& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_send_to_user::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_content()) {
    if (!this->content().IsInitialized()) return false;
  }
  return true;
}

void user_send_to_user::Swap(user_send_to_user* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(user_name_, other->user_name_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_send_to_user::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_send_to_user_descriptor_;
  metadata.reflection = user_send_to_user_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string user_send_to_user_result::_default_room_name_;
#ifndef _MSC_VER
const int user_send_to_user_result::kErrorFieldNumber;
const int user_send_to_user_result::kRoomNameFieldNumber;
#endif  // !_MSC_VER

user_send_to_user_result::user_send_to_user_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void user_send_to_user_result::InitAsDefaultInstance() {
}

user_send_to_user_result::user_send_to_user_result(const user_send_to_user_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void user_send_to_user_result::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  room_name_ = const_cast< ::std::string*>(&_default_room_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_send_to_user_result::~user_send_to_user_result() {
  SharedDtor();
}

void user_send_to_user_result::SharedDtor() {
  if (room_name_ != &_default_room_name_) {
    delete room_name_;
  }
  if (this != default_instance_) {
  }
}

void user_send_to_user_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_send_to_user_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_send_to_user_result_descriptor_;
}

const user_send_to_user_result& user_send_to_user_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_o_5fs_5fuser_2eproto();  return *default_instance_;
}

user_send_to_user_result* user_send_to_user_result::default_instance_ = NULL;

user_send_to_user_result* user_send_to_user_result::New() const {
  return new user_send_to_user_result;
}

void user_send_to_user_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
    if (_has_bit(1)) {
      if (room_name_ != &_default_room_name_) {
        room_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_send_to_user_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_room_name;
        break;
      }
      
      // required string room_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->room_name().data(), this->room_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void user_send_to_user_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }
  
  // required string room_name = 3;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->room_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* user_send_to_user_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }
  
  // required string room_name = 3;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->room_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int user_send_to_user_result::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }
    
    // required string room_name = 3;
    if (has_room_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_send_to_user_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_send_to_user_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_send_to_user_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_send_to_user_result::MergeFrom(const user_send_to_user_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_error(from.error());
    }
    if (from._has_bit(1)) {
      set_room_name(from.room_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_send_to_user_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_send_to_user_result::CopyFrom(const user_send_to_user_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_send_to_user_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void user_send_to_user_result::Swap(user_send_to_user_result* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(room_name_, other->room_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_send_to_user_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_send_to_user_result_descriptor_;
  metadata.reflection = user_send_to_user_result_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string user_send_to_user_update::_default_user_;
const ::std::string user_send_to_user_update::_default_user_name_;
#ifndef _MSC_VER
const int user_send_to_user_update::kUserFieldNumber;
const int user_send_to_user_update::kUserNameFieldNumber;
const int user_send_to_user_update::kContentFieldNumber;
#endif  // !_MSC_VER

user_send_to_user_update::user_send_to_user_update()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void user_send_to_user_update::InitAsDefaultInstance() {
  content_ = const_cast< ::oo::proto::user_content*>(&::oo::proto::user_content::default_instance());
}

user_send_to_user_update::user_send_to_user_update(const user_send_to_user_update& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void user_send_to_user_update::SharedCtor() {
  _cached_size_ = 0;
  user_ = const_cast< ::std::string*>(&_default_user_);
  user_name_ = const_cast< ::std::string*>(&_default_user_name_);
  content_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_send_to_user_update::~user_send_to_user_update() {
  SharedDtor();
}

void user_send_to_user_update::SharedDtor() {
  if (user_ != &_default_user_) {
    delete user_;
  }
  if (user_name_ != &_default_user_name_) {
    delete user_name_;
  }
  if (this != default_instance_) {
    delete content_;
  }
}

void user_send_to_user_update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_send_to_user_update::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_send_to_user_update_descriptor_;
}

const user_send_to_user_update& user_send_to_user_update::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_o_5fs_5fuser_2eproto();  return *default_instance_;
}

user_send_to_user_update* user_send_to_user_update::default_instance_ = NULL;

user_send_to_user_update* user_send_to_user_update::New() const {
  return new user_send_to_user_update;
}

void user_send_to_user_update::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (user_ != &_default_user_) {
        user_->clear();
      }
    }
    if (_has_bit(1)) {
      if (user_name_ != &_default_user_name_) {
        user_name_->clear();
      }
    }
    if (_has_bit(2)) {
      if (content_ != NULL) content_->::oo::proto::user_content::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_send_to_user_update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_name;
        break;
      }
      
      // required string user_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }
      
      // required .oo.proto.user_content content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void user_send_to_user_update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user(), output);
  }
  
  // required string user_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user_name(), output);
  }
  
  // required .oo.proto.user_content content = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->content(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* user_send_to_user_update::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string user = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user(), target);
  }
  
  // required string user_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_name(), target);
  }
  
  // required .oo.proto.user_content content = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->content(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int user_send_to_user_update::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }
    
    // required string user_name = 2;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }
    
    // required .oo.proto.user_content content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->content());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_send_to_user_update::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_send_to_user_update* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_send_to_user_update*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_send_to_user_update::MergeFrom(const user_send_to_user_update& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_user(from.user());
    }
    if (from._has_bit(1)) {
      set_user_name(from.user_name());
    }
    if (from._has_bit(2)) {
      mutable_content()->::oo::proto::user_content::MergeFrom(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_send_to_user_update::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_send_to_user_update::CopyFrom(const user_send_to_user_update& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_send_to_user_update::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_content()) {
    if (!this->content().IsInitialized()) return false;
  }
  return true;
}

void user_send_to_user_update::Swap(user_send_to_user_update* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(user_name_, other->user_name_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_send_to_user_update::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_send_to_user_update_descriptor_;
  metadata.reflection = user_send_to_user_update_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string user_send_to_room::_default_user_;
const ::std::string user_send_to_room::_default_room_name_;
#ifndef _MSC_VER
const int user_send_to_room::kUserFieldNumber;
const int user_send_to_room::kRoomNameFieldNumber;
const int user_send_to_room::kContentFieldNumber;
#endif  // !_MSC_VER

user_send_to_room::user_send_to_room()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void user_send_to_room::InitAsDefaultInstance() {
  content_ = const_cast< ::oo::proto::user_content*>(&::oo::proto::user_content::default_instance());
}

user_send_to_room::user_send_to_room(const user_send_to_room& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void user_send_to_room::SharedCtor() {
  _cached_size_ = 0;
  user_ = const_cast< ::std::string*>(&_default_user_);
  room_name_ = const_cast< ::std::string*>(&_default_room_name_);
  content_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_send_to_room::~user_send_to_room() {
  SharedDtor();
}

void user_send_to_room::SharedDtor() {
  if (user_ != &_default_user_) {
    delete user_;
  }
  if (room_name_ != &_default_room_name_) {
    delete room_name_;
  }
  if (this != default_instance_) {
    delete content_;
  }
}

void user_send_to_room::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_send_to_room::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_send_to_room_descriptor_;
}

const user_send_to_room& user_send_to_room::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_o_5fs_5fuser_2eproto();  return *default_instance_;
}

user_send_to_room* user_send_to_room::default_instance_ = NULL;

user_send_to_room* user_send_to_room::New() const {
  return new user_send_to_room;
}

void user_send_to_room::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (user_ != &_default_user_) {
        user_->clear();
      }
    }
    if (_has_bit(1)) {
      if (room_name_ != &_default_room_name_) {
        room_name_->clear();
      }
    }
    if (_has_bit(2)) {
      if (content_ != NULL) content_->::oo::proto::user_content::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_send_to_room::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_name;
        break;
      }
      
      // required string room_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->room_name().data(), this->room_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }
      
      // required .oo.proto.user_content content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void user_send_to_room::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user(), output);
  }
  
  // required string room_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->room_name(), output);
  }
  
  // required .oo.proto.user_content content = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->content(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* user_send_to_room::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string user = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user(), target);
  }
  
  // required string room_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->room_name(), target);
  }
  
  // required .oo.proto.user_content content = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->content(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int user_send_to_room::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }
    
    // required string room_name = 2;
    if (has_room_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_name());
    }
    
    // required .oo.proto.user_content content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->content());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_send_to_room::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_send_to_room* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_send_to_room*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_send_to_room::MergeFrom(const user_send_to_room& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_user(from.user());
    }
    if (from._has_bit(1)) {
      set_room_name(from.room_name());
    }
    if (from._has_bit(2)) {
      mutable_content()->::oo::proto::user_content::MergeFrom(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_send_to_room::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_send_to_room::CopyFrom(const user_send_to_room& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_send_to_room::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_content()) {
    if (!this->content().IsInitialized()) return false;
  }
  return true;
}

void user_send_to_room::Swap(user_send_to_room* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(room_name_, other->room_name_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_send_to_room::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_send_to_room_descriptor_;
  metadata.reflection = user_send_to_room_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string user_send_to_room_result::_default_room_name_;
#ifndef _MSC_VER
const int user_send_to_room_result::kErrorFieldNumber;
const int user_send_to_room_result::kRoomNameFieldNumber;
#endif  // !_MSC_VER

user_send_to_room_result::user_send_to_room_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void user_send_to_room_result::InitAsDefaultInstance() {
}

user_send_to_room_result::user_send_to_room_result(const user_send_to_room_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void user_send_to_room_result::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  room_name_ = const_cast< ::std::string*>(&_default_room_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_send_to_room_result::~user_send_to_room_result() {
  SharedDtor();
}

void user_send_to_room_result::SharedDtor() {
  if (room_name_ != &_default_room_name_) {
    delete room_name_;
  }
  if (this != default_instance_) {
  }
}

void user_send_to_room_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_send_to_room_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_send_to_room_result_descriptor_;
}

const user_send_to_room_result& user_send_to_room_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_o_5fs_5fuser_2eproto();  return *default_instance_;
}

user_send_to_room_result* user_send_to_room_result::default_instance_ = NULL;

user_send_to_room_result* user_send_to_room_result::New() const {
  return new user_send_to_room_result;
}

void user_send_to_room_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
    if (_has_bit(1)) {
      if (room_name_ != &_default_room_name_) {
        room_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_send_to_room_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_room_name;
        break;
      }
      
      // required string room_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->room_name().data(), this->room_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void user_send_to_room_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }
  
  // required string room_name = 3;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->room_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* user_send_to_room_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }
  
  // required string room_name = 3;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->room_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int user_send_to_room_result::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }
    
    // required string room_name = 3;
    if (has_room_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_send_to_room_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_send_to_room_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_send_to_room_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_send_to_room_result::MergeFrom(const user_send_to_room_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_error(from.error());
    }
    if (from._has_bit(1)) {
      set_room_name(from.room_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_send_to_room_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_send_to_room_result::CopyFrom(const user_send_to_room_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_send_to_room_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void user_send_to_room_result::Swap(user_send_to_room_result* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(room_name_, other->room_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_send_to_room_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_send_to_room_result_descriptor_;
  metadata.reflection = user_send_to_room_result_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string user_send_to_room_update::_default_user_;
const ::std::string user_send_to_room_update::_default_room_name_;
#ifndef _MSC_VER
const int user_send_to_room_update::kUserFieldNumber;
const int user_send_to_room_update::kRoomNameFieldNumber;
const int user_send_to_room_update::kContentFieldNumber;
#endif  // !_MSC_VER

user_send_to_room_update::user_send_to_room_update()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void user_send_to_room_update::InitAsDefaultInstance() {
  content_ = const_cast< ::oo::proto::user_content*>(&::oo::proto::user_content::default_instance());
}

user_send_to_room_update::user_send_to_room_update(const user_send_to_room_update& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void user_send_to_room_update::SharedCtor() {
  _cached_size_ = 0;
  user_ = const_cast< ::std::string*>(&_default_user_);
  room_name_ = const_cast< ::std::string*>(&_default_room_name_);
  content_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_send_to_room_update::~user_send_to_room_update() {
  SharedDtor();
}

void user_send_to_room_update::SharedDtor() {
  if (user_ != &_default_user_) {
    delete user_;
  }
  if (room_name_ != &_default_room_name_) {
    delete room_name_;
  }
  if (this != default_instance_) {
    delete content_;
  }
}

void user_send_to_room_update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_send_to_room_update::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_send_to_room_update_descriptor_;
}

const user_send_to_room_update& user_send_to_room_update::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_o_5fs_5fuser_2eproto();  return *default_instance_;
}

user_send_to_room_update* user_send_to_room_update::default_instance_ = NULL;

user_send_to_room_update* user_send_to_room_update::New() const {
  return new user_send_to_room_update;
}

void user_send_to_room_update::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (user_ != &_default_user_) {
        user_->clear();
      }
    }
    if (_has_bit(1)) {
      if (room_name_ != &_default_room_name_) {
        room_name_->clear();
      }
    }
    if (_has_bit(2)) {
      if (content_ != NULL) content_->::oo::proto::user_content::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_send_to_room_update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_name;
        break;
      }
      
      // required string room_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->room_name().data(), this->room_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }
      
      // required .oo.proto.user_content content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void user_send_to_room_update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user(), output);
  }
  
  // required string room_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->room_name(), output);
  }
  
  // required .oo.proto.user_content content = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->content(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* user_send_to_room_update::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string user = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user(), target);
  }
  
  // required string room_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->room_name(), target);
  }
  
  // required .oo.proto.user_content content = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->content(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int user_send_to_room_update::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }
    
    // required string room_name = 2;
    if (has_room_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_name());
    }
    
    // required .oo.proto.user_content content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->content());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_send_to_room_update::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_send_to_room_update* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_send_to_room_update*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_send_to_room_update::MergeFrom(const user_send_to_room_update& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_user(from.user());
    }
    if (from._has_bit(1)) {
      set_room_name(from.room_name());
    }
    if (from._has_bit(2)) {
      mutable_content()->::oo::proto::user_content::MergeFrom(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_send_to_room_update::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_send_to_room_update::CopyFrom(const user_send_to_room_update& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_send_to_room_update::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_content()) {
    if (!this->content().IsInitialized()) return false;
  }
  return true;
}

void user_send_to_room_update::Swap(user_send_to_room_update* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(room_name_, other->room_name_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_send_to_room_update::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_send_to_room_update_descriptor_;
  metadata.reflection = user_send_to_room_update_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string room_create::_default_room_name_;
#ifndef _MSC_VER
const int room_create::kRoomNameFieldNumber;
#endif  // !_MSC_VER

room_create::room_create()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void room_create::InitAsDefaultInstance() {
}

room_create::room_create(const room_create& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void room_create::SharedCtor() {
  _cached_size_ = 0;
  room_name_ = const_cast< ::std::string*>(&_default_room_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

room_create::~room_create() {
  SharedDtor();
}

void room_create::SharedDtor() {
  if (room_name_ != &_default_room_name_) {
    delete room_name_;
  }
  if (this != default_instance_) {
  }
}

void room_create::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* room_create::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return room_create_descriptor_;
}

const room_create& room_create::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_o_5fs_5fuser_2eproto();  return *default_instance_;
}

room_create* room_create::default_instance_ = NULL;

room_create* room_create::New() const {
  return new room_create;
}

void room_create::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (room_name_ != &_default_room_name_) {
        room_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool room_create::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string room_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->room_name().data(), this->room_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void room_create::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string room_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->room_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* room_create::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string room_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->room_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int room_create::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string room_name = 1;
    if (has_room_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void room_create::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const room_create* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const room_create*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void room_create::MergeFrom(const room_create& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_room_name(from.room_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void room_create::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void room_create::CopyFrom(const room_create& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool room_create::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void room_create::Swap(room_create* other) {
  if (other != this) {
    std::swap(room_name_, other->room_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata room_create::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = room_create_descriptor_;
  metadata.reflection = room_create_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string room_create_result::_default_room_name_;
#ifndef _MSC_VER
const int room_create_result::kErrorFieldNumber;
const int room_create_result::kRoomNameFieldNumber;
#endif  // !_MSC_VER

room_create_result::room_create_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void room_create_result::InitAsDefaultInstance() {
}

room_create_result::room_create_result(const room_create_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void room_create_result::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  room_name_ = const_cast< ::std::string*>(&_default_room_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

room_create_result::~room_create_result() {
  SharedDtor();
}

void room_create_result::SharedDtor() {
  if (room_name_ != &_default_room_name_) {
    delete room_name_;
  }
  if (this != default_instance_) {
  }
}

void room_create_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* room_create_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return room_create_result_descriptor_;
}

const room_create_result& room_create_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_o_5fs_5fuser_2eproto();  return *default_instance_;
}

room_create_result* room_create_result::default_instance_ = NULL;

room_create_result* room_create_result::New() const {
  return new room_create_result;
}

void room_create_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
    if (_has_bit(1)) {
      if (room_name_ != &_default_room_name_) {
        room_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool room_create_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_name;
        break;
      }
      
      // required string room_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->room_name().data(), this->room_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void room_create_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }
  
  // required string room_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->room_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* room_create_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }
  
  // required string room_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->room_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int room_create_result::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }
    
    // required string room_name = 2;
    if (has_room_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void room_create_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const room_create_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const room_create_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void room_create_result::MergeFrom(const room_create_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_error(from.error());
    }
    if (from._has_bit(1)) {
      set_room_name(from.room_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void room_create_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void room_create_result::CopyFrom(const room_create_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool room_create_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void room_create_result::Swap(room_create_result* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(room_name_, other->room_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata room_create_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = room_create_result_descriptor_;
  metadata.reflection = room_create_result_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string room_active::_default_room_name_;
#ifndef _MSC_VER
const int room_active::kRoomNameFieldNumber;
#endif  // !_MSC_VER

room_active::room_active()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void room_active::InitAsDefaultInstance() {
}

room_active::room_active(const room_active& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void room_active::SharedCtor() {
  _cached_size_ = 0;
  room_name_ = const_cast< ::std::string*>(&_default_room_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

room_active::~room_active() {
  SharedDtor();
}

void room_active::SharedDtor() {
  if (room_name_ != &_default_room_name_) {
    delete room_name_;
  }
  if (this != default_instance_) {
  }
}

void room_active::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* room_active::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return room_active_descriptor_;
}

const room_active& room_active::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_o_5fs_5fuser_2eproto();  return *default_instance_;
}

room_active* room_active::default_instance_ = NULL;

room_active* room_active::New() const {
  return new room_active;
}

void room_active::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (room_name_ != &_default_room_name_) {
        room_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool room_active::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string room_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->room_name().data(), this->room_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void room_active::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string room_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->room_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* room_active::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string room_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->room_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int room_active::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string room_name = 1;
    if (has_room_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void room_active::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const room_active* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const room_active*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void room_active::MergeFrom(const room_active& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_room_name(from.room_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void room_active::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void room_active::CopyFrom(const room_active& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool room_active::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void room_active::Swap(room_active* other) {
  if (other != this) {
    std::swap(room_name_, other->room_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata room_active::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = room_active_descriptor_;
  metadata.reflection = room_active_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string room_active_result::_default_room_name_;
#ifndef _MSC_VER
const int room_active_result::kErrorFieldNumber;
const int room_active_result::kRoomNameFieldNumber;
#endif  // !_MSC_VER

room_active_result::room_active_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void room_active_result::InitAsDefaultInstance() {
}

room_active_result::room_active_result(const room_active_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void room_active_result::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  room_name_ = const_cast< ::std::string*>(&_default_room_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

room_active_result::~room_active_result() {
  SharedDtor();
}

void room_active_result::SharedDtor() {
  if (room_name_ != &_default_room_name_) {
    delete room_name_;
  }
  if (this != default_instance_) {
  }
}

void room_active_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* room_active_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return room_active_result_descriptor_;
}

const room_active_result& room_active_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_o_5fs_5fuser_2eproto();  return *default_instance_;
}

room_active_result* room_active_result::default_instance_ = NULL;

room_active_result* room_active_result::New() const {
  return new room_active_result;
}

void room_active_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
    if (_has_bit(1)) {
      if (room_name_ != &_default_room_name_) {
        room_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool room_active_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_name;
        break;
      }
      
      // required string room_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->room_name().data(), this->room_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void room_active_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }
  
  // required string room_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->room_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* room_active_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }
  
  // required string room_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->room_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int room_active_result::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }
    
    // required string room_name = 2;
    if (has_room_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void room_active_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const room_active_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const room_active_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void room_active_result::MergeFrom(const room_active_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_error(from.error());
    }
    if (from._has_bit(1)) {
      set_room_name(from.room_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void room_active_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void room_active_result::CopyFrom(const room_active_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool room_active_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void room_active_result::Swap(room_active_result* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(room_name_, other->room_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata room_active_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = room_active_result_descriptor_;
  metadata.reflection = room_active_result_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string room_destory::_default_room_name_;
#ifndef _MSC_VER
const int room_destory::kRoomNameFieldNumber;
#endif  // !_MSC_VER

room_destory::room_destory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void room_destory::InitAsDefaultInstance() {
}

room_destory::room_destory(const room_destory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void room_destory::SharedCtor() {
  _cached_size_ = 0;
  room_name_ = const_cast< ::std::string*>(&_default_room_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

room_destory::~room_destory() {
  SharedDtor();
}

void room_destory::SharedDtor() {
  if (room_name_ != &_default_room_name_) {
    delete room_name_;
  }
  if (this != default_instance_) {
  }
}

void room_destory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* room_destory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return room_destory_descriptor_;
}

const room_destory& room_destory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_o_5fs_5fuser_2eproto();  return *default_instance_;
}

room_destory* room_destory::default_instance_ = NULL;

room_destory* room_destory::New() const {
  return new room_destory;
}

void room_destory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (room_name_ != &_default_room_name_) {
        room_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool room_destory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string room_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->room_name().data(), this->room_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void room_destory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string room_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->room_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* room_destory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string room_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->room_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int room_destory::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string room_name = 1;
    if (has_room_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void room_destory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const room_destory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const room_destory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void room_destory::MergeFrom(const room_destory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_room_name(from.room_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void room_destory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void room_destory::CopyFrom(const room_destory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool room_destory::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void room_destory::Swap(room_destory* other) {
  if (other != this) {
    std::swap(room_name_, other->room_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata room_destory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = room_destory_descriptor_;
  metadata.reflection = room_destory_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string room_destory_result::_default_room_name_;
#ifndef _MSC_VER
const int room_destory_result::kErrorFieldNumber;
const int room_destory_result::kRoomNameFieldNumber;
#endif  // !_MSC_VER

room_destory_result::room_destory_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void room_destory_result::InitAsDefaultInstance() {
}

room_destory_result::room_destory_result(const room_destory_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void room_destory_result::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  room_name_ = const_cast< ::std::string*>(&_default_room_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

room_destory_result::~room_destory_result() {
  SharedDtor();
}

void room_destory_result::SharedDtor() {
  if (room_name_ != &_default_room_name_) {
    delete room_name_;
  }
  if (this != default_instance_) {
  }
}

void room_destory_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* room_destory_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return room_destory_result_descriptor_;
}

const room_destory_result& room_destory_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_o_5fs_5fuser_2eproto();  return *default_instance_;
}

room_destory_result* room_destory_result::default_instance_ = NULL;

room_destory_result* room_destory_result::New() const {
  return new room_destory_result;
}

void room_destory_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
    if (_has_bit(1)) {
      if (room_name_ != &_default_room_name_) {
        room_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool room_destory_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_name;
        break;
      }
      
      // required string room_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->room_name().data(), this->room_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void room_destory_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }
  
  // required string room_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->room_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* room_destory_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }
  
  // required string room_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->room_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int room_destory_result::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }
    
    // required string room_name = 2;
    if (has_room_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void room_destory_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const room_destory_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const room_destory_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void room_destory_result::MergeFrom(const room_destory_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_error(from.error());
    }
    if (from._has_bit(1)) {
      set_room_name(from.room_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void room_destory_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void room_destory_result::CopyFrom(const room_destory_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool room_destory_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void room_destory_result::Swap(room_destory_result* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(room_name_, other->room_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata room_destory_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = room_destory_result_descriptor_;
  metadata.reflection = room_destory_result_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string room_close::_default_room_name_;
#ifndef _MSC_VER
const int room_close::kRoomNameFieldNumber;
#endif  // !_MSC_VER

room_close::room_close()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void room_close::InitAsDefaultInstance() {
}

room_close::room_close(const room_close& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void room_close::SharedCtor() {
  _cached_size_ = 0;
  room_name_ = const_cast< ::std::string*>(&_default_room_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

room_close::~room_close() {
  SharedDtor();
}

void room_close::SharedDtor() {
  if (room_name_ != &_default_room_name_) {
    delete room_name_;
  }
  if (this != default_instance_) {
  }
}

void room_close::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* room_close::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return room_close_descriptor_;
}

const room_close& room_close::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_o_5fs_5fuser_2eproto();  return *default_instance_;
}

room_close* room_close::default_instance_ = NULL;

room_close* room_close::New() const {
  return new room_close;
}

void room_close::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (room_name_ != &_default_room_name_) {
        room_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool room_close::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string room_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->room_name().data(), this->room_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void room_close::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string room_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->room_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* room_close::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string room_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->room_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int room_close::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string room_name = 1;
    if (has_room_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void room_close::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const room_close* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const room_close*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void room_close::MergeFrom(const room_close& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_room_name(from.room_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void room_close::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void room_close::CopyFrom(const room_close& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool room_close::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void room_close::Swap(room_close* other) {
  if (other != this) {
    std::swap(room_name_, other->room_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata room_close::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = room_close_descriptor_;
  metadata.reflection = room_close_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string room_close_result::_default_room_name_;
#ifndef _MSC_VER
const int room_close_result::kErrorFieldNumber;
const int room_close_result::kRoomNameFieldNumber;
#endif  // !_MSC_VER

room_close_result::room_close_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void room_close_result::InitAsDefaultInstance() {
}

room_close_result::room_close_result(const room_close_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void room_close_result::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  room_name_ = const_cast< ::std::string*>(&_default_room_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

room_close_result::~room_close_result() {
  SharedDtor();
}

void room_close_result::SharedDtor() {
  if (room_name_ != &_default_room_name_) {
    delete room_name_;
  }
  if (this != default_instance_) {
  }
}

void room_close_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* room_close_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return room_close_result_descriptor_;
}

const room_close_result& room_close_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_o_5fs_5fuser_2eproto();  return *default_instance_;
}

room_close_result* room_close_result::default_instance_ = NULL;

room_close_result* room_close_result::New() const {
  return new room_close_result;
}

void room_close_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
    if (_has_bit(1)) {
      if (room_name_ != &_default_room_name_) {
        room_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool room_close_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_name;
        break;
      }
      
      // required string room_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->room_name().data(), this->room_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void room_close_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }
  
  // required string room_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->room_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* room_close_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }
  
  // required string room_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->room_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int room_close_result::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }
    
    // required string room_name = 2;
    if (has_room_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void room_close_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const room_close_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const room_close_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void room_close_result::MergeFrom(const room_close_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_error(from.error());
    }
    if (from._has_bit(1)) {
      set_room_name(from.room_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void room_close_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void room_close_result::CopyFrom(const room_close_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool room_close_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void room_close_result::Swap(room_close_result* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(room_name_, other->room_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata room_close_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = room_close_result_descriptor_;
  metadata.reflection = room_close_result_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string room_lst_user::_default_room_name_;
#ifndef _MSC_VER
const int room_lst_user::kRoomNameFieldNumber;
#endif  // !_MSC_VER

room_lst_user::room_lst_user()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void room_lst_user::InitAsDefaultInstance() {
}

room_lst_user::room_lst_user(const room_lst_user& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void room_lst_user::SharedCtor() {
  _cached_size_ = 0;
  room_name_ = const_cast< ::std::string*>(&_default_room_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

room_lst_user::~room_lst_user() {
  SharedDtor();
}

void room_lst_user::SharedDtor() {
  if (room_name_ != &_default_room_name_) {
    delete room_name_;
  }
  if (this != default_instance_) {
  }
}

void room_lst_user::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* room_lst_user::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return room_lst_user_descriptor_;
}

const room_lst_user& room_lst_user::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_o_5fs_5fuser_2eproto();  return *default_instance_;
}

room_lst_user* room_lst_user::default_instance_ = NULL;

room_lst_user* room_lst_user::New() const {
  return new room_lst_user;
}

void room_lst_user::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (room_name_ != &_default_room_name_) {
        room_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool room_lst_user::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string room_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->room_name().data(), this->room_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void room_lst_user::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string room_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->room_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* room_lst_user::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string room_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->room_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int room_lst_user::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string room_name = 1;
    if (has_room_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void room_lst_user::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const room_lst_user* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const room_lst_user*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void room_lst_user::MergeFrom(const room_lst_user& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_room_name(from.room_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void room_lst_user::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void room_lst_user::CopyFrom(const room_lst_user& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool room_lst_user::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void room_lst_user::Swap(room_lst_user* other) {
  if (other != this) {
    std::swap(room_name_, other->room_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata room_lst_user::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = room_lst_user_descriptor_;
  metadata.reflection = room_lst_user_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string room_lst_user_result::_default_room_name_;
#ifndef _MSC_VER
const int room_lst_user_result::kErrorFieldNumber;
const int room_lst_user_result::kRoomNameFieldNumber;
const int room_lst_user_result::kUserFieldNumber;
const int room_lst_user_result::kNicksFieldNumber;
#endif  // !_MSC_VER

room_lst_user_result::room_lst_user_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void room_lst_user_result::InitAsDefaultInstance() {
}

room_lst_user_result::room_lst_user_result(const room_lst_user_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void room_lst_user_result::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  room_name_ = const_cast< ::std::string*>(&_default_room_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

room_lst_user_result::~room_lst_user_result() {
  SharedDtor();
}

void room_lst_user_result::SharedDtor() {
  if (room_name_ != &_default_room_name_) {
    delete room_name_;
  }
  if (this != default_instance_) {
  }
}

void room_lst_user_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* room_lst_user_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return room_lst_user_result_descriptor_;
}

const room_lst_user_result& room_lst_user_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_o_5fs_5fuser_2eproto();  return *default_instance_;
}

room_lst_user_result* room_lst_user_result::default_instance_ = NULL;

room_lst_user_result* room_lst_user_result::New() const {
  return new room_lst_user_result;
}

void room_lst_user_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
    if (_has_bit(1)) {
      if (room_name_ != &_default_room_name_) {
        room_name_->clear();
      }
    }
  }
  user_.Clear();
  nicks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool room_lst_user_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_name;
        break;
      }
      
      // required string room_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->room_name().data(), this->room_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user;
        break;
      }
      
      // repeated string user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user(0).data(), this->user(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user;
        if (input->ExpectTag(34)) goto parse_nicks;
        break;
      }
      
      // repeated string nicks = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nicks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_nicks()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nicks(0).data(), this->nicks(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_nicks;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void room_lst_user_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }
  
  // required string room_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->room_name(), output);
  }
  
  // repeated string user = 3;
  for (int i = 0; i < this->user_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->user(i).data(), this->user(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user(i), output);
  }
  
  // repeated string nicks = 4;
  for (int i = 0; i < this->nicks_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->nicks(i).data(), this->nicks(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->nicks(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* room_lst_user_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }
  
  // required string room_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->room_name(), target);
  }
  
  // repeated string user = 3;
  for (int i = 0; i < this->user_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user(i).data(), this->user(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->user(i), target);
  }
  
  // repeated string nicks = 4;
  for (int i = 0; i < this->nicks_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nicks(i).data(), this->nicks(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->nicks(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int room_lst_user_result::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }
    
    // required string room_name = 2;
    if (has_room_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_name());
    }
    
  }
  // repeated string user = 3;
  total_size += 1 * this->user_size();
  for (int i = 0; i < this->user_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->user(i));
  }
  
  // repeated string nicks = 4;
  total_size += 1 * this->nicks_size();
  for (int i = 0; i < this->nicks_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->nicks(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void room_lst_user_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const room_lst_user_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const room_lst_user_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void room_lst_user_result::MergeFrom(const room_lst_user_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_.MergeFrom(from.user_);
  nicks_.MergeFrom(from.nicks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_error(from.error());
    }
    if (from._has_bit(1)) {
      set_room_name(from.room_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void room_lst_user_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void room_lst_user_result::CopyFrom(const room_lst_user_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool room_lst_user_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void room_lst_user_result::Swap(room_lst_user_result* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(room_name_, other->room_name_);
    user_.Swap(&other->user_);
    nicks_.Swap(&other->nicks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata room_lst_user_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = room_lst_user_result_descriptor_;
  metadata.reflection = room_lst_user_result_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace oo

// @@protoc_insertion_point(global_scope)
