// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: o_conf.proto

#ifndef PROTOBUF_o_5fconf_2eproto__INCLUDED
#define PROTOBUF_o_5fconf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace oo {
namespace conf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_o_5fconf_2eproto();
void protobuf_AssignDesc_o_5fconf_2eproto();
void protobuf_ShutdownFile_o_5fconf_2eproto();

class module_lst;
class proxy_conf;

// ===================================================================

class module_lst : public ::google::protobuf::Message {
 public:
  module_lst();
  virtual ~module_lst();
  
  module_lst(const module_lst& from);
  
  inline module_lst& operator=(const module_lst& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const module_lst& default_instance();
  
  void Swap(module_lst* other);
  
  // implements Message ----------------------------------------------
  
  module_lst* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const module_lst& from);
  void MergeFrom(const module_lst& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string module_file = 1;
  inline int module_file_size() const;
  inline void clear_module_file();
  static const int kModuleFileFieldNumber = 1;
  inline const ::std::string& module_file(int index) const;
  inline ::std::string* mutable_module_file(int index);
  inline void set_module_file(int index, const ::std::string& value);
  inline void set_module_file(int index, const char* value);
  inline void set_module_file(int index, const char* value, size_t size);
  inline ::std::string* add_module_file();
  inline void add_module_file(const ::std::string& value);
  inline void add_module_file(const char* value);
  inline void add_module_file(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& module_file() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_module_file();
  
  // @@protoc_insertion_point(class_scope:oo.conf.module_lst)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> module_file_;
  friend void  protobuf_AddDesc_o_5fconf_2eproto();
  friend void protobuf_AssignDesc_o_5fconf_2eproto();
  friend void protobuf_ShutdownFile_o_5fconf_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static module_lst* default_instance_;
};
// -------------------------------------------------------------------

class proxy_conf : public ::google::protobuf::Message {
 public:
  proxy_conf();
  virtual ~proxy_conf();
  
  proxy_conf(const proxy_conf& from);
  
  inline proxy_conf& operator=(const proxy_conf& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const proxy_conf& default_instance();
  
  void Swap(proxy_conf* other);
  
  // implements Message ----------------------------------------------
  
  proxy_conf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const proxy_conf& from);
  void MergeFrom(const proxy_conf& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string addr = 1;
  inline bool has_addr() const;
  inline void clear_addr();
  static const int kAddrFieldNumber = 1;
  inline const ::std::string& addr() const;
  inline void set_addr(const ::std::string& value);
  inline void set_addr(const char* value);
  inline void set_addr(const char* value, size_t size);
  inline ::std::string* mutable_addr();
  
  // required string port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline const ::std::string& port() const;
  inline void set_port(const ::std::string& value);
  inline void set_port(const char* value);
  inline void set_port(const char* value, size_t size);
  inline ::std::string* mutable_port();
  
  // required int32 max_conn = 3;
  inline bool has_max_conn() const;
  inline void clear_max_conn();
  static const int kMaxConnFieldNumber = 3;
  inline ::google::protobuf::int32 max_conn() const;
  inline void set_max_conn(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:oo.conf.proxy_conf)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* addr_;
  static const ::std::string _default_addr_;
  ::std::string* port_;
  static const ::std::string _default_port_;
  ::google::protobuf::int32 max_conn_;
  friend void  protobuf_AddDesc_o_5fconf_2eproto();
  friend void protobuf_AssignDesc_o_5fconf_2eproto();
  friend void protobuf_ShutdownFile_o_5fconf_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static proxy_conf* default_instance_;
};
// ===================================================================


// ===================================================================

// module_lst

// repeated string module_file = 1;
inline int module_lst::module_file_size() const {
  return module_file_.size();
}
inline void module_lst::clear_module_file() {
  module_file_.Clear();
}
inline const ::std::string& module_lst::module_file(int index) const {
  return module_file_.Get(index);
}
inline ::std::string* module_lst::mutable_module_file(int index) {
  return module_file_.Mutable(index);
}
inline void module_lst::set_module_file(int index, const ::std::string& value) {
  module_file_.Mutable(index)->assign(value);
}
inline void module_lst::set_module_file(int index, const char* value) {
  module_file_.Mutable(index)->assign(value);
}
inline void module_lst::set_module_file(int index, const char* value, size_t size) {
  module_file_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* module_lst::add_module_file() {
  return module_file_.Add();
}
inline void module_lst::add_module_file(const ::std::string& value) {
  module_file_.Add()->assign(value);
}
inline void module_lst::add_module_file(const char* value) {
  module_file_.Add()->assign(value);
}
inline void module_lst::add_module_file(const char* value, size_t size) {
  module_file_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
module_lst::module_file() const {
  return module_file_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
module_lst::mutable_module_file() {
  return &module_file_;
}

// -------------------------------------------------------------------

// proxy_conf

// required string addr = 1;
inline bool proxy_conf::has_addr() const {
  return _has_bit(0);
}
inline void proxy_conf::clear_addr() {
  if (addr_ != &_default_addr_) {
    addr_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& proxy_conf::addr() const {
  return *addr_;
}
inline void proxy_conf::set_addr(const ::std::string& value) {
  _set_bit(0);
  if (addr_ == &_default_addr_) {
    addr_ = new ::std::string;
  }
  addr_->assign(value);
}
inline void proxy_conf::set_addr(const char* value) {
  _set_bit(0);
  if (addr_ == &_default_addr_) {
    addr_ = new ::std::string;
  }
  addr_->assign(value);
}
inline void proxy_conf::set_addr(const char* value, size_t size) {
  _set_bit(0);
  if (addr_ == &_default_addr_) {
    addr_ = new ::std::string;
  }
  addr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* proxy_conf::mutable_addr() {
  _set_bit(0);
  if (addr_ == &_default_addr_) {
    addr_ = new ::std::string;
  }
  return addr_;
}

// required string port = 2;
inline bool proxy_conf::has_port() const {
  return _has_bit(1);
}
inline void proxy_conf::clear_port() {
  if (port_ != &_default_port_) {
    port_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& proxy_conf::port() const {
  return *port_;
}
inline void proxy_conf::set_port(const ::std::string& value) {
  _set_bit(1);
  if (port_ == &_default_port_) {
    port_ = new ::std::string;
  }
  port_->assign(value);
}
inline void proxy_conf::set_port(const char* value) {
  _set_bit(1);
  if (port_ == &_default_port_) {
    port_ = new ::std::string;
  }
  port_->assign(value);
}
inline void proxy_conf::set_port(const char* value, size_t size) {
  _set_bit(1);
  if (port_ == &_default_port_) {
    port_ = new ::std::string;
  }
  port_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* proxy_conf::mutable_port() {
  _set_bit(1);
  if (port_ == &_default_port_) {
    port_ = new ::std::string;
  }
  return port_;
}

// required int32 max_conn = 3;
inline bool proxy_conf::has_max_conn() const {
  return _has_bit(2);
}
inline void proxy_conf::clear_max_conn() {
  max_conn_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 proxy_conf::max_conn() const {
  return max_conn_;
}
inline void proxy_conf::set_max_conn(::google::protobuf::int32 value) {
  _set_bit(2);
  max_conn_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace conf
}  // namespace oo

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_o_5fconf_2eproto__INCLUDED
