// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "o_net_ctrl.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace oo {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* node_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  node_info_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* node_info_InetProto_descriptor_ = NULL;
const ::google::protobuf::Descriptor* node_active_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  node_active_reflection_ = NULL;
const ::google::protobuf::Descriptor* node_kad_update_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  node_kad_update_reflection_ = NULL;
const ::google::protobuf::Descriptor* store_key_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  store_key_reflection_ = NULL;
const ::google::protobuf::Descriptor* store_key_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  store_key_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* find_node_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  find_node_reflection_ = NULL;
const ::google::protobuf::Descriptor* find_node_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  find_node_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* find_value_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  find_value_reflection_ = NULL;
const ::google::protobuf::Descriptor* find_value_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  find_value_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* proxy_pkg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proxy_pkg_reflection_ = NULL;
const ::google::protobuf::Descriptor* net_ctrl_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  net_ctrl_msg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_o_5fnet_5fctrl_2eproto() {
  protobuf_AddDesc_o_5fnet_5fctrl_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "o_net_ctrl.proto");
  GOOGLE_CHECK(file != NULL);
  node_info_descriptor_ = file->message_type(0);
  static const int node_info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node_info, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node_info, addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node_info, ping_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node_info, proto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node_info, port_),
  };
  node_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      node_info_descriptor_,
      node_info::default_instance_,
      node_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(node_info));
  node_info_InetProto_descriptor_ = node_info_descriptor_->enum_type(0);
  node_active_descriptor_ = file->message_type(1);
  static const int node_active_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node_active, node_),
  };
  node_active_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      node_active_descriptor_,
      node_active::default_instance_,
      node_active_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node_active, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node_active, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(node_active));
  node_kad_update_descriptor_ = file->message_type(2);
  static const int node_kad_update_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node_kad_update, nodes_),
  };
  node_kad_update_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      node_kad_update_descriptor_,
      node_kad_update::default_instance_,
      node_kad_update_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node_kad_update, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node_kad_update, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(node_kad_update));
  store_key_descriptor_ = file->message_type(3);
  static const int store_key_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(store_key, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(store_key, value_),
  };
  store_key_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      store_key_descriptor_,
      store_key::default_instance_,
      store_key_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(store_key, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(store_key, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(store_key));
  store_key_result_descriptor_ = file->message_type(4);
  static const int store_key_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(store_key_result, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(store_key_result, is_suc_),
  };
  store_key_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      store_key_result_descriptor_,
      store_key_result::default_instance_,
      store_key_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(store_key_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(store_key_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(store_key_result));
  find_node_descriptor_ = file->message_type(5);
  static const int find_node_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(find_node, f_id_),
  };
  find_node_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      find_node_descriptor_,
      find_node::default_instance_,
      find_node_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(find_node, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(find_node, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(find_node));
  find_node_result_descriptor_ = file->message_type(6);
  static const int find_node_result_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(find_node_result, result_),
  };
  find_node_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      find_node_result_descriptor_,
      find_node_result::default_instance_,
      find_node_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(find_node_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(find_node_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(find_node_result));
  find_value_descriptor_ = file->message_type(7);
  static const int find_value_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(find_value, f_id_),
  };
  find_value_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      find_value_descriptor_,
      find_value::default_instance_,
      find_value_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(find_value, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(find_value, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(find_value));
  find_value_result_descriptor_ = file->message_type(8);
  static const int find_value_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(find_value_result, r1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(find_value_result, value_),
  };
  find_value_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      find_value_result_descriptor_,
      find_value_result::default_instance_,
      find_value_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(find_value_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(find_value_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(find_value_result));
  proxy_pkg_descriptor_ = file->message_type(9);
  static const int proxy_pkg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proxy_pkg, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proxy_pkg, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proxy_pkg, pkg_),
  };
  proxy_pkg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proxy_pkg_descriptor_,
      proxy_pkg::default_instance_,
      proxy_pkg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proxy_pkg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proxy_pkg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proxy_pkg));
  net_ctrl_msg_descriptor_ = file->message_type(10);
  static const int net_ctrl_msg_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(net_ctrl_msg, trans_local_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(net_ctrl_msg, node_active__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(net_ctrl_msg, node_kad_update__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(net_ctrl_msg, store_key__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(net_ctrl_msg, store_key_result__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(net_ctrl_msg, find_node__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(net_ctrl_msg, find_node_result__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(net_ctrl_msg, find_value__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(net_ctrl_msg, find_value_result__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(net_ctrl_msg, proxy_pkg__),
  };
  net_ctrl_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      net_ctrl_msg_descriptor_,
      net_ctrl_msg::default_instance_,
      net_ctrl_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(net_ctrl_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(net_ctrl_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(net_ctrl_msg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_o_5fnet_5fctrl_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    node_info_descriptor_, &node_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    node_active_descriptor_, &node_active::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    node_kad_update_descriptor_, &node_kad_update::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    store_key_descriptor_, &store_key::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    store_key_result_descriptor_, &store_key_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    find_node_descriptor_, &find_node::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    find_node_result_descriptor_, &find_node_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    find_value_descriptor_, &find_value::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    find_value_result_descriptor_, &find_value_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proxy_pkg_descriptor_, &proxy_pkg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    net_ctrl_msg_descriptor_, &net_ctrl_msg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_o_5fnet_5fctrl_2eproto() {
  delete node_info::default_instance_;
  delete node_info_reflection_;
  delete node_active::default_instance_;
  delete node_active_reflection_;
  delete node_kad_update::default_instance_;
  delete node_kad_update_reflection_;
  delete store_key::default_instance_;
  delete store_key_reflection_;
  delete store_key_result::default_instance_;
  delete store_key_result_reflection_;
  delete find_node::default_instance_;
  delete find_node_reflection_;
  delete find_node_result::default_instance_;
  delete find_node_result_reflection_;
  delete find_value::default_instance_;
  delete find_value_reflection_;
  delete find_value_result::default_instance_;
  delete find_value_result_reflection_;
  delete proxy_pkg::default_instance_;
  delete proxy_pkg_reflection_;
  delete net_ctrl_msg::default_instance_;
  delete net_ctrl_msg_reflection_;
}

void protobuf_AddDesc_o_5fnet_5fctrl_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020o_net_ctrl.proto\022\010oo.proto\"\223\001\n\tnode_in"
    "fo\022\n\n\002id\030\001 \002(\t\022\014\n\004addr\030\002 \002(\t\022\021\n\tping_tim"
    "e\030\003 \002(\004\022,\n\005proto\030\004 \002(\0162\035.oo.proto.node_i"
    "nfo.InetProto\022\014\n\004port\030\005 \002(\005\"\035\n\tInetProto"
    "\022\007\n\003TCP\020\000\022\007\n\003UDP\020\001\"0\n\013node_active\022!\n\004nod"
    "e\030\001 \002(\0132\023.oo.proto.node_info\"5\n\017node_kad"
    "_update\022\"\n\005nodes\030\001 \003(\0132\023.oo.proto.node_i"
    "nfo\"\'\n\tstore_key\022\013\n\003key\030\001 \002(\t\022\r\n\005value\030\002"
    " \002(\t\"/\n\020store_key_result\022\013\n\003key\030\001 \002(\t\022\016\n"
    "\006is_suc\030\002 \002(\010\"\031\n\tfind_node\022\014\n\004f_id\030\001 \002(\t"
    "\"7\n\020find_node_result\022#\n\006result\030\001 \003(\0132\023.o"
    "o.proto.node_info\"\032\n\nfind_value\022\014\n\004f_id\030"
    "\001 \002(\t\"C\n\021find_value_result\022\037\n\002r1\030\001 \002(\0132\023"
    ".oo.proto.node_info\022\r\n\005value\030\002 \001(\t\"2\n\tpr"
    "oxy_pkg\022\014\n\004from\030\001 \002(\t\022\n\n\002to\030\002 \002(\t\022\013\n\003pkg"
    "\030\003 \002(\t\"\325\003\n\014net_ctrl_msg\022\026\n\016trans_local_i"
    "d\030\001 \001(\t\022+\n\014node_active_\030\002 \001(\0132\025.oo.proto"
    ".node_active\0223\n\020node_kad_update_\030\003 \001(\0132\031"
    ".oo.proto.node_kad_update\022\'\n\nstore_key_\030"
    "\004 \001(\0132\023.oo.proto.store_key\0225\n\021store_key_"
    "result_\030\005 \001(\0132\032.oo.proto.store_key_resul"
    "t\022\'\n\nfind_node_\030\006 \001(\0132\023.oo.proto.find_no"
    "de\0225\n\021find_node_result_\030\007 \001(\0132\032.oo.proto"
    ".find_node_result\022)\n\013find_value_\030\010 \001(\0132\024"
    ".oo.proto.find_value\0227\n\022find_value_resul"
    "t_\030\t \001(\0132\033.oo.proto.find_value_result\022\'\n"
    "\nproxy_pkg_\030\n \001(\0132\023.oo.proto.proxy_pkgB\014"
    "\n\010oo.protoH\001", 1092);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "o_net_ctrl.proto", &protobuf_RegisterTypes);
  node_info::default_instance_ = new node_info();
  node_active::default_instance_ = new node_active();
  node_kad_update::default_instance_ = new node_kad_update();
  store_key::default_instance_ = new store_key();
  store_key_result::default_instance_ = new store_key_result();
  find_node::default_instance_ = new find_node();
  find_node_result::default_instance_ = new find_node_result();
  find_value::default_instance_ = new find_value();
  find_value_result::default_instance_ = new find_value_result();
  proxy_pkg::default_instance_ = new proxy_pkg();
  net_ctrl_msg::default_instance_ = new net_ctrl_msg();
  node_info::default_instance_->InitAsDefaultInstance();
  node_active::default_instance_->InitAsDefaultInstance();
  node_kad_update::default_instance_->InitAsDefaultInstance();
  store_key::default_instance_->InitAsDefaultInstance();
  store_key_result::default_instance_->InitAsDefaultInstance();
  find_node::default_instance_->InitAsDefaultInstance();
  find_node_result::default_instance_->InitAsDefaultInstance();
  find_value::default_instance_->InitAsDefaultInstance();
  find_value_result::default_instance_->InitAsDefaultInstance();
  proxy_pkg::default_instance_->InitAsDefaultInstance();
  net_ctrl_msg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_o_5fnet_5fctrl_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_o_5fnet_5fctrl_2eproto {
  StaticDescriptorInitializer_o_5fnet_5fctrl_2eproto() {
    protobuf_AddDesc_o_5fnet_5fctrl_2eproto();
  }
} static_descriptor_initializer_o_5fnet_5fctrl_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* node_info_InetProto_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return node_info_InetProto_descriptor_;
}
bool node_info_InetProto_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const node_info_InetProto node_info::TCP;
const node_info_InetProto node_info::UDP;
const node_info_InetProto node_info::InetProto_MIN;
const node_info_InetProto node_info::InetProto_MAX;
const int node_info::InetProto_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string node_info::_default_id_;
const ::std::string node_info::_default_addr_;
#ifndef _MSC_VER
const int node_info::kIdFieldNumber;
const int node_info::kAddrFieldNumber;
const int node_info::kPingTimeFieldNumber;
const int node_info::kProtoFieldNumber;
const int node_info::kPortFieldNumber;
#endif  // !_MSC_VER

node_info::node_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void node_info::InitAsDefaultInstance() {
}

node_info::node_info(const node_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void node_info::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&_default_id_);
  addr_ = const_cast< ::std::string*>(&_default_addr_);
  ping_time_ = GOOGLE_ULONGLONG(0);
  proto_ = 0;
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

node_info::~node_info() {
  SharedDtor();
}

void node_info::SharedDtor() {
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (addr_ != &_default_addr_) {
    delete addr_;
  }
  if (this != default_instance_) {
  }
}

void node_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* node_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return node_info_descriptor_;
}

const node_info& node_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_o_5fnet_5fctrl_2eproto();  return *default_instance_;
}

node_info* node_info::default_instance_ = NULL;

node_info* node_info::New() const {
  return new node_info;
}

void node_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
    if (_has_bit(1)) {
      if (addr_ != &_default_addr_) {
        addr_->clear();
      }
    }
    ping_time_ = GOOGLE_ULONGLONG(0);
    proto_ = 0;
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool node_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_addr;
        break;
      }
      
      // required string addr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->addr().data(), this->addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ping_time;
        break;
      }
      
      // required uint64 ping_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ping_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ping_time_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_proto;
        break;
      }
      
      // required .oo.proto.node_info.InetProto proto = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proto:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::oo::proto::node_info_InetProto_IsValid(value)) {
            set_proto(static_cast< ::oo::proto::node_info_InetProto >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_port;
        break;
      }
      
      // required int32 port = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void node_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }
  
  // required string addr = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->addr().data(), this->addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->addr(), output);
  }
  
  // required uint64 ping_time = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->ping_time(), output);
  }
  
  // required .oo.proto.node_info.InetProto proto = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->proto(), output);
  }
  
  // required int32 port = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->port(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* node_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }
  
  // required string addr = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->addr().data(), this->addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->addr(), target);
  }
  
  // required uint64 ping_time = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->ping_time(), target);
  }
  
  // required .oo.proto.node_info.InetProto proto = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->proto(), target);
  }
  
  // required int32 port = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->port(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int node_info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // required string addr = 2;
    if (has_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->addr());
    }
    
    // required uint64 ping_time = 3;
    if (has_ping_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ping_time());
    }
    
    // required .oo.proto.node_info.InetProto proto = 4;
    if (has_proto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto());
    }
    
    // required int32 port = 5;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void node_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const node_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const node_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void node_info::MergeFrom(const node_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_addr(from.addr());
    }
    if (from._has_bit(2)) {
      set_ping_time(from.ping_time());
    }
    if (from._has_bit(3)) {
      set_proto(from.proto());
    }
    if (from._has_bit(4)) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void node_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void node_info::CopyFrom(const node_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool node_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void node_info::Swap(node_info* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(addr_, other->addr_);
    std::swap(ping_time_, other->ping_time_);
    std::swap(proto_, other->proto_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata node_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = node_info_descriptor_;
  metadata.reflection = node_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int node_active::kNodeFieldNumber;
#endif  // !_MSC_VER

node_active::node_active()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void node_active::InitAsDefaultInstance() {
  node_ = const_cast< ::oo::proto::node_info*>(&::oo::proto::node_info::default_instance());
}

node_active::node_active(const node_active& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void node_active::SharedCtor() {
  _cached_size_ = 0;
  node_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

node_active::~node_active() {
  SharedDtor();
}

void node_active::SharedDtor() {
  if (this != default_instance_) {
    delete node_;
  }
}

void node_active::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* node_active::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return node_active_descriptor_;
}

const node_active& node_active::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_o_5fnet_5fctrl_2eproto();  return *default_instance_;
}

node_active* node_active::default_instance_ = NULL;

node_active* node_active::New() const {
  return new node_active;
}

void node_active::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (node_ != NULL) node_->::oo::proto::node_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool node_active::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .oo.proto.node_info node = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void node_active::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .oo.proto.node_info node = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* node_active::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .oo.proto.node_info node = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->node(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int node_active::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .oo.proto.node_info node = 1;
    if (has_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->node());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void node_active::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const node_active* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const node_active*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void node_active::MergeFrom(const node_active& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_node()->::oo::proto::node_info::MergeFrom(from.node());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void node_active::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void node_active::CopyFrom(const node_active& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool node_active::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_node()) {
    if (!this->node().IsInitialized()) return false;
  }
  return true;
}

void node_active::Swap(node_active* other) {
  if (other != this) {
    std::swap(node_, other->node_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata node_active::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = node_active_descriptor_;
  metadata.reflection = node_active_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int node_kad_update::kNodesFieldNumber;
#endif  // !_MSC_VER

node_kad_update::node_kad_update()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void node_kad_update::InitAsDefaultInstance() {
}

node_kad_update::node_kad_update(const node_kad_update& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void node_kad_update::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

node_kad_update::~node_kad_update() {
  SharedDtor();
}

void node_kad_update::SharedDtor() {
  if (this != default_instance_) {
  }
}

void node_kad_update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* node_kad_update::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return node_kad_update_descriptor_;
}

const node_kad_update& node_kad_update::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_o_5fnet_5fctrl_2eproto();  return *default_instance_;
}

node_kad_update* node_kad_update::default_instance_ = NULL;

node_kad_update* node_kad_update::New() const {
  return new node_kad_update;
}

void node_kad_update::Clear() {
  nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool node_kad_update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .oo.proto.node_info nodes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_nodes;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void node_kad_update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .oo.proto.node_info nodes = 1;
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->nodes(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* node_kad_update::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .oo.proto.node_info nodes = 1;
  for (int i = 0; i < this->nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->nodes(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int node_kad_update::ByteSize() const {
  int total_size = 0;
  
  // repeated .oo.proto.node_info nodes = 1;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void node_kad_update::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const node_kad_update* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const node_kad_update*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void node_kad_update::MergeFrom(const node_kad_update& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodes_.MergeFrom(from.nodes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void node_kad_update::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void node_kad_update::CopyFrom(const node_kad_update& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool node_kad_update::IsInitialized() const {
  
  for (int i = 0; i < nodes_size(); i++) {
    if (!this->nodes(i).IsInitialized()) return false;
  }
  return true;
}

void node_kad_update::Swap(node_kad_update* other) {
  if (other != this) {
    nodes_.Swap(&other->nodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata node_kad_update::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = node_kad_update_descriptor_;
  metadata.reflection = node_kad_update_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string store_key::_default_key_;
const ::std::string store_key::_default_value_;
#ifndef _MSC_VER
const int store_key::kKeyFieldNumber;
const int store_key::kValueFieldNumber;
#endif  // !_MSC_VER

store_key::store_key()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void store_key::InitAsDefaultInstance() {
}

store_key::store_key(const store_key& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void store_key::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&_default_key_);
  value_ = const_cast< ::std::string*>(&_default_value_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

store_key::~store_key() {
  SharedDtor();
}

void store_key::SharedDtor() {
  if (key_ != &_default_key_) {
    delete key_;
  }
  if (value_ != &_default_value_) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void store_key::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* store_key::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return store_key_descriptor_;
}

const store_key& store_key::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_o_5fnet_5fctrl_2eproto();  return *default_instance_;
}

store_key* store_key::default_instance_ = NULL;

store_key* store_key::New() const {
  return new store_key;
}

void store_key::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (key_ != &_default_key_) {
        key_->clear();
      }
    }
    if (_has_bit(1)) {
      if (value_ != &_default_value_) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool store_key::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void store_key::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }
  
  // required string value = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* store_key::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }
  
  // required string value = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int store_key::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }
    
    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void store_key::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const store_key* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const store_key*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void store_key::MergeFrom(const store_key& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_key(from.key());
    }
    if (from._has_bit(1)) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void store_key::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void store_key::CopyFrom(const store_key& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool store_key::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void store_key::Swap(store_key* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata store_key::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = store_key_descriptor_;
  metadata.reflection = store_key_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string store_key_result::_default_key_;
#ifndef _MSC_VER
const int store_key_result::kKeyFieldNumber;
const int store_key_result::kIsSucFieldNumber;
#endif  // !_MSC_VER

store_key_result::store_key_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void store_key_result::InitAsDefaultInstance() {
}

store_key_result::store_key_result(const store_key_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void store_key_result::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&_default_key_);
  is_suc_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

store_key_result::~store_key_result() {
  SharedDtor();
}

void store_key_result::SharedDtor() {
  if (key_ != &_default_key_) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void store_key_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* store_key_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return store_key_result_descriptor_;
}

const store_key_result& store_key_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_o_5fnet_5fctrl_2eproto();  return *default_instance_;
}

store_key_result* store_key_result::default_instance_ = NULL;

store_key_result* store_key_result::New() const {
  return new store_key_result;
}

void store_key_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (key_ != &_default_key_) {
        key_->clear();
      }
    }
    is_suc_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool store_key_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_suc;
        break;
      }
      
      // required bool is_suc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_suc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_suc_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void store_key_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }
  
  // required bool is_suc = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_suc(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* store_key_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }
  
  // required bool is_suc = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_suc(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int store_key_result::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }
    
    // required bool is_suc = 2;
    if (has_is_suc()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void store_key_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const store_key_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const store_key_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void store_key_result::MergeFrom(const store_key_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_key(from.key());
    }
    if (from._has_bit(1)) {
      set_is_suc(from.is_suc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void store_key_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void store_key_result::CopyFrom(const store_key_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool store_key_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void store_key_result::Swap(store_key_result* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(is_suc_, other->is_suc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata store_key_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = store_key_result_descriptor_;
  metadata.reflection = store_key_result_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string find_node::_default_f_id_;
#ifndef _MSC_VER
const int find_node::kFIdFieldNumber;
#endif  // !_MSC_VER

find_node::find_node()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void find_node::InitAsDefaultInstance() {
}

find_node::find_node(const find_node& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void find_node::SharedCtor() {
  _cached_size_ = 0;
  f_id_ = const_cast< ::std::string*>(&_default_f_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

find_node::~find_node() {
  SharedDtor();
}

void find_node::SharedDtor() {
  if (f_id_ != &_default_f_id_) {
    delete f_id_;
  }
  if (this != default_instance_) {
  }
}

void find_node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* find_node::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return find_node_descriptor_;
}

const find_node& find_node::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_o_5fnet_5fctrl_2eproto();  return *default_instance_;
}

find_node* find_node::default_instance_ = NULL;

find_node* find_node::New() const {
  return new find_node;
}

void find_node::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (f_id_ != &_default_f_id_) {
        f_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool find_node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string f_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->f_id().data(), this->f_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void find_node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string f_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->f_id().data(), this->f_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->f_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* find_node::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string f_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->f_id().data(), this->f_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->f_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int find_node::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string f_id = 1;
    if (has_f_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void find_node::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const find_node* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const find_node*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void find_node::MergeFrom(const find_node& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_f_id(from.f_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void find_node::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void find_node::CopyFrom(const find_node& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool find_node::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void find_node::Swap(find_node* other) {
  if (other != this) {
    std::swap(f_id_, other->f_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata find_node::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = find_node_descriptor_;
  metadata.reflection = find_node_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int find_node_result::kResultFieldNumber;
#endif  // !_MSC_VER

find_node_result::find_node_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void find_node_result::InitAsDefaultInstance() {
}

find_node_result::find_node_result(const find_node_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void find_node_result::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

find_node_result::~find_node_result() {
  SharedDtor();
}

void find_node_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void find_node_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* find_node_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return find_node_result_descriptor_;
}

const find_node_result& find_node_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_o_5fnet_5fctrl_2eproto();  return *default_instance_;
}

find_node_result* find_node_result::default_instance_ = NULL;

find_node_result* find_node_result::New() const {
  return new find_node_result;
}

void find_node_result::Clear() {
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool find_node_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .oo.proto.node_info result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_result;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void find_node_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .oo.proto.node_info result = 1;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* find_node_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .oo.proto.node_info result = 1;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int find_node_result::ByteSize() const {
  int total_size = 0;
  
  // repeated .oo.proto.node_info result = 1;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void find_node_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const find_node_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const find_node_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void find_node_result::MergeFrom(const find_node_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void find_node_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void find_node_result::CopyFrom(const find_node_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool find_node_result::IsInitialized() const {
  
  for (int i = 0; i < result_size(); i++) {
    if (!this->result(i).IsInitialized()) return false;
  }
  return true;
}

void find_node_result::Swap(find_node_result* other) {
  if (other != this) {
    result_.Swap(&other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata find_node_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = find_node_result_descriptor_;
  metadata.reflection = find_node_result_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string find_value::_default_f_id_;
#ifndef _MSC_VER
const int find_value::kFIdFieldNumber;
#endif  // !_MSC_VER

find_value::find_value()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void find_value::InitAsDefaultInstance() {
}

find_value::find_value(const find_value& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void find_value::SharedCtor() {
  _cached_size_ = 0;
  f_id_ = const_cast< ::std::string*>(&_default_f_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

find_value::~find_value() {
  SharedDtor();
}

void find_value::SharedDtor() {
  if (f_id_ != &_default_f_id_) {
    delete f_id_;
  }
  if (this != default_instance_) {
  }
}

void find_value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* find_value::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return find_value_descriptor_;
}

const find_value& find_value::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_o_5fnet_5fctrl_2eproto();  return *default_instance_;
}

find_value* find_value::default_instance_ = NULL;

find_value* find_value::New() const {
  return new find_value;
}

void find_value::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (f_id_ != &_default_f_id_) {
        f_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool find_value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string f_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->f_id().data(), this->f_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void find_value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string f_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->f_id().data(), this->f_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->f_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* find_value::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string f_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->f_id().data(), this->f_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->f_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int find_value::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string f_id = 1;
    if (has_f_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void find_value::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const find_value* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const find_value*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void find_value::MergeFrom(const find_value& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_f_id(from.f_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void find_value::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void find_value::CopyFrom(const find_value& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool find_value::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void find_value::Swap(find_value* other) {
  if (other != this) {
    std::swap(f_id_, other->f_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata find_value::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = find_value_descriptor_;
  metadata.reflection = find_value_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string find_value_result::_default_value_;
#ifndef _MSC_VER
const int find_value_result::kR1FieldNumber;
const int find_value_result::kValueFieldNumber;
#endif  // !_MSC_VER

find_value_result::find_value_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void find_value_result::InitAsDefaultInstance() {
  r1_ = const_cast< ::oo::proto::node_info*>(&::oo::proto::node_info::default_instance());
}

find_value_result::find_value_result(const find_value_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void find_value_result::SharedCtor() {
  _cached_size_ = 0;
  r1_ = NULL;
  value_ = const_cast< ::std::string*>(&_default_value_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

find_value_result::~find_value_result() {
  SharedDtor();
}

void find_value_result::SharedDtor() {
  if (value_ != &_default_value_) {
    delete value_;
  }
  if (this != default_instance_) {
    delete r1_;
  }
}

void find_value_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* find_value_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return find_value_result_descriptor_;
}

const find_value_result& find_value_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_o_5fnet_5fctrl_2eproto();  return *default_instance_;
}

find_value_result* find_value_result::default_instance_ = NULL;

find_value_result* find_value_result::New() const {
  return new find_value_result;
}

void find_value_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (r1_ != NULL) r1_->::oo::proto::node_info::Clear();
    }
    if (_has_bit(1)) {
      if (value_ != &_default_value_) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool find_value_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .oo.proto.node_info r1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_r1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void find_value_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .oo.proto.node_info r1 = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->r1(), output);
  }
  
  // optional string value = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* find_value_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .oo.proto.node_info r1 = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->r1(), target);
  }
  
  // optional string value = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int find_value_result::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .oo.proto.node_info r1 = 1;
    if (has_r1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->r1());
    }
    
    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void find_value_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const find_value_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const find_value_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void find_value_result::MergeFrom(const find_value_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_r1()->::oo::proto::node_info::MergeFrom(from.r1());
    }
    if (from._has_bit(1)) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void find_value_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void find_value_result::CopyFrom(const find_value_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool find_value_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_r1()) {
    if (!this->r1().IsInitialized()) return false;
  }
  return true;
}

void find_value_result::Swap(find_value_result* other) {
  if (other != this) {
    std::swap(r1_, other->r1_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata find_value_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = find_value_result_descriptor_;
  metadata.reflection = find_value_result_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string proxy_pkg::_default_from_;
const ::std::string proxy_pkg::_default_to_;
const ::std::string proxy_pkg::_default_pkg_;
#ifndef _MSC_VER
const int proxy_pkg::kFromFieldNumber;
const int proxy_pkg::kToFieldNumber;
const int proxy_pkg::kPkgFieldNumber;
#endif  // !_MSC_VER

proxy_pkg::proxy_pkg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proxy_pkg::InitAsDefaultInstance() {
}

proxy_pkg::proxy_pkg(const proxy_pkg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proxy_pkg::SharedCtor() {
  _cached_size_ = 0;
  from_ = const_cast< ::std::string*>(&_default_from_);
  to_ = const_cast< ::std::string*>(&_default_to_);
  pkg_ = const_cast< ::std::string*>(&_default_pkg_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proxy_pkg::~proxy_pkg() {
  SharedDtor();
}

void proxy_pkg::SharedDtor() {
  if (from_ != &_default_from_) {
    delete from_;
  }
  if (to_ != &_default_to_) {
    delete to_;
  }
  if (pkg_ != &_default_pkg_) {
    delete pkg_;
  }
  if (this != default_instance_) {
  }
}

void proxy_pkg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proxy_pkg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proxy_pkg_descriptor_;
}

const proxy_pkg& proxy_pkg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_o_5fnet_5fctrl_2eproto();  return *default_instance_;
}

proxy_pkg* proxy_pkg::default_instance_ = NULL;

proxy_pkg* proxy_pkg::New() const {
  return new proxy_pkg;
}

void proxy_pkg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (from_ != &_default_from_) {
        from_->clear();
      }
    }
    if (_has_bit(1)) {
      if (to_ != &_default_to_) {
        to_->clear();
      }
    }
    if (_has_bit(2)) {
      if (pkg_ != &_default_pkg_) {
        pkg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proxy_pkg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string from = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from().data(), this->from().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_to;
        break;
      }
      
      // required string to = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->to().data(), this->to().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pkg;
        break;
      }
      
      // required string pkg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pkg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pkg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pkg().data(), this->pkg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proxy_pkg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string from = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->from(), output);
  }
  
  // required string to = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->to(), output);
  }
  
  // required string pkg = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pkg().data(), this->pkg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pkg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proxy_pkg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string from = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->from(), target);
  }
  
  // required string to = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->to(), target);
  }
  
  // required string pkg = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pkg().data(), this->pkg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pkg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proxy_pkg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string from = 1;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from());
    }
    
    // required string to = 2;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to());
    }
    
    // required string pkg = 3;
    if (has_pkg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pkg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proxy_pkg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proxy_pkg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proxy_pkg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proxy_pkg::MergeFrom(const proxy_pkg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_from(from.from());
    }
    if (from._has_bit(1)) {
      set_to(from.to());
    }
    if (from._has_bit(2)) {
      set_pkg(from.pkg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proxy_pkg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proxy_pkg::CopyFrom(const proxy_pkg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proxy_pkg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void proxy_pkg::Swap(proxy_pkg* other) {
  if (other != this) {
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    std::swap(pkg_, other->pkg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proxy_pkg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proxy_pkg_descriptor_;
  metadata.reflection = proxy_pkg_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string net_ctrl_msg::_default_trans_local_id_;
#ifndef _MSC_VER
const int net_ctrl_msg::kTransLocalIdFieldNumber;
const int net_ctrl_msg::kNodeActiveFieldNumber;
const int net_ctrl_msg::kNodeKadUpdateFieldNumber;
const int net_ctrl_msg::kStoreKeyFieldNumber;
const int net_ctrl_msg::kStoreKeyResultFieldNumber;
const int net_ctrl_msg::kFindNodeFieldNumber;
const int net_ctrl_msg::kFindNodeResultFieldNumber;
const int net_ctrl_msg::kFindValueFieldNumber;
const int net_ctrl_msg::kFindValueResultFieldNumber;
const int net_ctrl_msg::kProxyPkgFieldNumber;
#endif  // !_MSC_VER

net_ctrl_msg::net_ctrl_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void net_ctrl_msg::InitAsDefaultInstance() {
  node_active__ = const_cast< ::oo::proto::node_active*>(&::oo::proto::node_active::default_instance());
  node_kad_update__ = const_cast< ::oo::proto::node_kad_update*>(&::oo::proto::node_kad_update::default_instance());
  store_key__ = const_cast< ::oo::proto::store_key*>(&::oo::proto::store_key::default_instance());
  store_key_result__ = const_cast< ::oo::proto::store_key_result*>(&::oo::proto::store_key_result::default_instance());
  find_node__ = const_cast< ::oo::proto::find_node*>(&::oo::proto::find_node::default_instance());
  find_node_result__ = const_cast< ::oo::proto::find_node_result*>(&::oo::proto::find_node_result::default_instance());
  find_value__ = const_cast< ::oo::proto::find_value*>(&::oo::proto::find_value::default_instance());
  find_value_result__ = const_cast< ::oo::proto::find_value_result*>(&::oo::proto::find_value_result::default_instance());
  proxy_pkg__ = const_cast< ::oo::proto::proxy_pkg*>(&::oo::proto::proxy_pkg::default_instance());
}

net_ctrl_msg::net_ctrl_msg(const net_ctrl_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void net_ctrl_msg::SharedCtor() {
  _cached_size_ = 0;
  trans_local_id_ = const_cast< ::std::string*>(&_default_trans_local_id_);
  node_active__ = NULL;
  node_kad_update__ = NULL;
  store_key__ = NULL;
  store_key_result__ = NULL;
  find_node__ = NULL;
  find_node_result__ = NULL;
  find_value__ = NULL;
  find_value_result__ = NULL;
  proxy_pkg__ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

net_ctrl_msg::~net_ctrl_msg() {
  SharedDtor();
}

void net_ctrl_msg::SharedDtor() {
  if (trans_local_id_ != &_default_trans_local_id_) {
    delete trans_local_id_;
  }
  if (this != default_instance_) {
    delete node_active__;
    delete node_kad_update__;
    delete store_key__;
    delete store_key_result__;
    delete find_node__;
    delete find_node_result__;
    delete find_value__;
    delete find_value_result__;
    delete proxy_pkg__;
  }
}

void net_ctrl_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* net_ctrl_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return net_ctrl_msg_descriptor_;
}

const net_ctrl_msg& net_ctrl_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_o_5fnet_5fctrl_2eproto();  return *default_instance_;
}

net_ctrl_msg* net_ctrl_msg::default_instance_ = NULL;

net_ctrl_msg* net_ctrl_msg::New() const {
  return new net_ctrl_msg;
}

void net_ctrl_msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (trans_local_id_ != &_default_trans_local_id_) {
        trans_local_id_->clear();
      }
    }
    if (_has_bit(1)) {
      if (node_active__ != NULL) node_active__->::oo::proto::node_active::Clear();
    }
    if (_has_bit(2)) {
      if (node_kad_update__ != NULL) node_kad_update__->::oo::proto::node_kad_update::Clear();
    }
    if (_has_bit(3)) {
      if (store_key__ != NULL) store_key__->::oo::proto::store_key::Clear();
    }
    if (_has_bit(4)) {
      if (store_key_result__ != NULL) store_key_result__->::oo::proto::store_key_result::Clear();
    }
    if (_has_bit(5)) {
      if (find_node__ != NULL) find_node__->::oo::proto::find_node::Clear();
    }
    if (_has_bit(6)) {
      if (find_node_result__ != NULL) find_node_result__->::oo::proto::find_node_result::Clear();
    }
    if (_has_bit(7)) {
      if (find_value__ != NULL) find_value__->::oo::proto::find_value::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (find_value_result__ != NULL) find_value_result__->::oo::proto::find_value_result::Clear();
    }
    if (_has_bit(9)) {
      if (proxy_pkg__ != NULL) proxy_pkg__->::oo::proto::proxy_pkg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool net_ctrl_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string trans_local_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trans_local_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trans_local_id().data(), this->trans_local_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_node_active_;
        break;
      }
      
      // optional .oo.proto.node_active node_active_ = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_node_active_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node_active_()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_node_kad_update_;
        break;
      }
      
      // optional .oo.proto.node_kad_update node_kad_update_ = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_node_kad_update_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node_kad_update_()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_store_key_;
        break;
      }
      
      // optional .oo.proto.store_key store_key_ = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_store_key_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_store_key_()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_store_key_result_;
        break;
      }
      
      // optional .oo.proto.store_key_result store_key_result_ = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_store_key_result_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_store_key_result_()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_find_node_;
        break;
      }
      
      // optional .oo.proto.find_node find_node_ = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_find_node_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_find_node_()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_find_node_result_;
        break;
      }
      
      // optional .oo.proto.find_node_result find_node_result_ = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_find_node_result_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_find_node_result_()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_find_value_;
        break;
      }
      
      // optional .oo.proto.find_value find_value_ = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_find_value_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_find_value_()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_find_value_result_;
        break;
      }
      
      // optional .oo.proto.find_value_result find_value_result_ = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_find_value_result_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_find_value_result_()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_proxy_pkg_;
        break;
      }
      
      // optional .oo.proto.proxy_pkg proxy_pkg_ = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proxy_pkg_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_proxy_pkg_()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void net_ctrl_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string trans_local_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trans_local_id().data(), this->trans_local_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->trans_local_id(), output);
  }
  
  // optional .oo.proto.node_active node_active_ = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->node_active_(), output);
  }
  
  // optional .oo.proto.node_kad_update node_kad_update_ = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->node_kad_update_(), output);
  }
  
  // optional .oo.proto.store_key store_key_ = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->store_key_(), output);
  }
  
  // optional .oo.proto.store_key_result store_key_result_ = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->store_key_result_(), output);
  }
  
  // optional .oo.proto.find_node find_node_ = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->find_node_(), output);
  }
  
  // optional .oo.proto.find_node_result find_node_result_ = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->find_node_result_(), output);
  }
  
  // optional .oo.proto.find_value find_value_ = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->find_value_(), output);
  }
  
  // optional .oo.proto.find_value_result find_value_result_ = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->find_value_result_(), output);
  }
  
  // optional .oo.proto.proxy_pkg proxy_pkg_ = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->proxy_pkg_(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* net_ctrl_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string trans_local_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trans_local_id().data(), this->trans_local_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->trans_local_id(), target);
  }
  
  // optional .oo.proto.node_active node_active_ = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->node_active_(), target);
  }
  
  // optional .oo.proto.node_kad_update node_kad_update_ = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->node_kad_update_(), target);
  }
  
  // optional .oo.proto.store_key store_key_ = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->store_key_(), target);
  }
  
  // optional .oo.proto.store_key_result store_key_result_ = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->store_key_result_(), target);
  }
  
  // optional .oo.proto.find_node find_node_ = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->find_node_(), target);
  }
  
  // optional .oo.proto.find_node_result find_node_result_ = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->find_node_result_(), target);
  }
  
  // optional .oo.proto.find_value find_value_ = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->find_value_(), target);
  }
  
  // optional .oo.proto.find_value_result find_value_result_ = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->find_value_result_(), target);
  }
  
  // optional .oo.proto.proxy_pkg proxy_pkg_ = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->proxy_pkg_(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int net_ctrl_msg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string trans_local_id = 1;
    if (has_trans_local_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trans_local_id());
    }
    
    // optional .oo.proto.node_active node_active_ = 2;
    if (has_node_active_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->node_active_());
    }
    
    // optional .oo.proto.node_kad_update node_kad_update_ = 3;
    if (has_node_kad_update_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->node_kad_update_());
    }
    
    // optional .oo.proto.store_key store_key_ = 4;
    if (has_store_key_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->store_key_());
    }
    
    // optional .oo.proto.store_key_result store_key_result_ = 5;
    if (has_store_key_result_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->store_key_result_());
    }
    
    // optional .oo.proto.find_node find_node_ = 6;
    if (has_find_node_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->find_node_());
    }
    
    // optional .oo.proto.find_node_result find_node_result_ = 7;
    if (has_find_node_result_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->find_node_result_());
    }
    
    // optional .oo.proto.find_value find_value_ = 8;
    if (has_find_value_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->find_value_());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .oo.proto.find_value_result find_value_result_ = 9;
    if (has_find_value_result_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->find_value_result_());
    }
    
    // optional .oo.proto.proxy_pkg proxy_pkg_ = 10;
    if (has_proxy_pkg_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->proxy_pkg_());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void net_ctrl_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const net_ctrl_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const net_ctrl_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void net_ctrl_msg::MergeFrom(const net_ctrl_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_trans_local_id(from.trans_local_id());
    }
    if (from._has_bit(1)) {
      mutable_node_active_()->::oo::proto::node_active::MergeFrom(from.node_active_());
    }
    if (from._has_bit(2)) {
      mutable_node_kad_update_()->::oo::proto::node_kad_update::MergeFrom(from.node_kad_update_());
    }
    if (from._has_bit(3)) {
      mutable_store_key_()->::oo::proto::store_key::MergeFrom(from.store_key_());
    }
    if (from._has_bit(4)) {
      mutable_store_key_result_()->::oo::proto::store_key_result::MergeFrom(from.store_key_result_());
    }
    if (from._has_bit(5)) {
      mutable_find_node_()->::oo::proto::find_node::MergeFrom(from.find_node_());
    }
    if (from._has_bit(6)) {
      mutable_find_node_result_()->::oo::proto::find_node_result::MergeFrom(from.find_node_result_());
    }
    if (from._has_bit(7)) {
      mutable_find_value_()->::oo::proto::find_value::MergeFrom(from.find_value_());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      mutable_find_value_result_()->::oo::proto::find_value_result::MergeFrom(from.find_value_result_());
    }
    if (from._has_bit(9)) {
      mutable_proxy_pkg_()->::oo::proto::proxy_pkg::MergeFrom(from.proxy_pkg_());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void net_ctrl_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void net_ctrl_msg::CopyFrom(const net_ctrl_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool net_ctrl_msg::IsInitialized() const {
  
  if (has_node_active_()) {
    if (!this->node_active_().IsInitialized()) return false;
  }
  if (has_node_kad_update_()) {
    if (!this->node_kad_update_().IsInitialized()) return false;
  }
  if (has_store_key_()) {
    if (!this->store_key_().IsInitialized()) return false;
  }
  if (has_store_key_result_()) {
    if (!this->store_key_result_().IsInitialized()) return false;
  }
  if (has_find_node_()) {
    if (!this->find_node_().IsInitialized()) return false;
  }
  if (has_find_node_result_()) {
    if (!this->find_node_result_().IsInitialized()) return false;
  }
  if (has_find_value_()) {
    if (!this->find_value_().IsInitialized()) return false;
  }
  if (has_find_value_result_()) {
    if (!this->find_value_result_().IsInitialized()) return false;
  }
  if (has_proxy_pkg_()) {
    if (!this->proxy_pkg_().IsInitialized()) return false;
  }
  return true;
}

void net_ctrl_msg::Swap(net_ctrl_msg* other) {
  if (other != this) {
    std::swap(trans_local_id_, other->trans_local_id_);
    std::swap(node_active__, other->node_active__);
    std::swap(node_kad_update__, other->node_kad_update__);
    std::swap(store_key__, other->store_key__);
    std::swap(store_key_result__, other->store_key_result__);
    std::swap(find_node__, other->find_node__);
    std::swap(find_node_result__, other->find_node_result__);
    std::swap(find_value__, other->find_value__);
    std::swap(find_value_result__, other->find_value_result__);
    std::swap(proxy_pkg__, other->proxy_pkg__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata net_ctrl_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = net_ctrl_msg_descriptor_;
  metadata.reflection = net_ctrl_msg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace oo

// @@protoc_insertion_point(global_scope)
