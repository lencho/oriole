// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "o_conf.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace oo {
namespace conf {

namespace {

const ::google::protobuf::Descriptor* module_lst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  module_lst_reflection_ = NULL;
const ::google::protobuf::Descriptor* proxy_conf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proxy_conf_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_o_5fconf_2eproto() {
  protobuf_AddDesc_o_5fconf_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "o_conf.proto");
  GOOGLE_CHECK(file != NULL);
  module_lst_descriptor_ = file->message_type(0);
  static const int module_lst_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(module_lst, module_file_),
  };
  module_lst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      module_lst_descriptor_,
      module_lst::default_instance_,
      module_lst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(module_lst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(module_lst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(module_lst));
  proxy_conf_descriptor_ = file->message_type(1);
  static const int proxy_conf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proxy_conf, addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proxy_conf, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proxy_conf, max_conn_),
  };
  proxy_conf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proxy_conf_descriptor_,
      proxy_conf::default_instance_,
      proxy_conf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proxy_conf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proxy_conf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proxy_conf));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_o_5fconf_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    module_lst_descriptor_, &module_lst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proxy_conf_descriptor_, &proxy_conf::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_o_5fconf_2eproto() {
  delete module_lst::default_instance_;
  delete module_lst_reflection_;
  delete proxy_conf::default_instance_;
  delete proxy_conf_reflection_;
}

void protobuf_AddDesc_o_5fconf_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014o_conf.proto\022\007oo.conf\"!\n\nmodule_lst\022\023\n"
    "\013module_file\030\001 \003(\t\":\n\nproxy_conf\022\014\n\004addr"
    "\030\001 \002(\t\022\014\n\004port\030\002 \002(\t\022\020\n\010max_conn\030\003 \002(\005B\013"
    "\n\007oo.confH\001", 131);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "o_conf.proto", &protobuf_RegisterTypes);
  module_lst::default_instance_ = new module_lst();
  proxy_conf::default_instance_ = new proxy_conf();
  module_lst::default_instance_->InitAsDefaultInstance();
  proxy_conf::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_o_5fconf_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_o_5fconf_2eproto {
  StaticDescriptorInitializer_o_5fconf_2eproto() {
    protobuf_AddDesc_o_5fconf_2eproto();
  }
} static_descriptor_initializer_o_5fconf_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int module_lst::kModuleFileFieldNumber;
#endif  // !_MSC_VER

module_lst::module_lst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void module_lst::InitAsDefaultInstance() {
}

module_lst::module_lst(const module_lst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void module_lst::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

module_lst::~module_lst() {
  SharedDtor();
}

void module_lst::SharedDtor() {
  if (this != default_instance_) {
  }
}

void module_lst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* module_lst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return module_lst_descriptor_;
}

const module_lst& module_lst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_o_5fconf_2eproto();  return *default_instance_;
}

module_lst* module_lst::default_instance_ = NULL;

module_lst* module_lst::New() const {
  return new module_lst;
}

void module_lst::Clear() {
  module_file_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool module_lst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string module_file = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_module_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_module_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->module_file(0).data(), this->module_file(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_module_file;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void module_lst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string module_file = 1;
  for (int i = 0; i < this->module_file_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->module_file(i).data(), this->module_file(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->module_file(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* module_lst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string module_file = 1;
  for (int i = 0; i < this->module_file_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->module_file(i).data(), this->module_file(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->module_file(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int module_lst::ByteSize() const {
  int total_size = 0;
  
  // repeated string module_file = 1;
  total_size += 1 * this->module_file_size();
  for (int i = 0; i < this->module_file_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->module_file(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void module_lst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const module_lst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const module_lst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void module_lst::MergeFrom(const module_lst& from) {
  GOOGLE_CHECK_NE(&from, this);
  module_file_.MergeFrom(from.module_file_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void module_lst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void module_lst::CopyFrom(const module_lst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool module_lst::IsInitialized() const {
  
  return true;
}

void module_lst::Swap(module_lst* other) {
  if (other != this) {
    module_file_.Swap(&other->module_file_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata module_lst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = module_lst_descriptor_;
  metadata.reflection = module_lst_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string proxy_conf::_default_addr_;
const ::std::string proxy_conf::_default_port_;
#ifndef _MSC_VER
const int proxy_conf::kAddrFieldNumber;
const int proxy_conf::kPortFieldNumber;
const int proxy_conf::kMaxConnFieldNumber;
#endif  // !_MSC_VER

proxy_conf::proxy_conf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proxy_conf::InitAsDefaultInstance() {
}

proxy_conf::proxy_conf(const proxy_conf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proxy_conf::SharedCtor() {
  _cached_size_ = 0;
  addr_ = const_cast< ::std::string*>(&_default_addr_);
  port_ = const_cast< ::std::string*>(&_default_port_);
  max_conn_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proxy_conf::~proxy_conf() {
  SharedDtor();
}

void proxy_conf::SharedDtor() {
  if (addr_ != &_default_addr_) {
    delete addr_;
  }
  if (port_ != &_default_port_) {
    delete port_;
  }
  if (this != default_instance_) {
  }
}

void proxy_conf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proxy_conf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proxy_conf_descriptor_;
}

const proxy_conf& proxy_conf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_o_5fconf_2eproto();  return *default_instance_;
}

proxy_conf* proxy_conf::default_instance_ = NULL;

proxy_conf* proxy_conf::New() const {
  return new proxy_conf;
}

void proxy_conf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (addr_ != &_default_addr_) {
        addr_->clear();
      }
    }
    if (_has_bit(1)) {
      if (port_ != &_default_port_) {
        port_->clear();
      }
    }
    max_conn_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proxy_conf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string addr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->addr().data(), this->addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_port;
        break;
      }
      
      // required string port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_port:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_port()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->port().data(), this->port().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_max_conn;
        break;
      }
      
      // required int32 max_conn = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_conn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_conn_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proxy_conf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string addr = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->addr().data(), this->addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->addr(), output);
  }
  
  // required string port = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->port(), output);
  }
  
  // required int32 max_conn = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_conn(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proxy_conf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string addr = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->addr().data(), this->addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->addr(), target);
  }
  
  // required string port = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->port(), target);
  }
  
  // required int32 max_conn = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_conn(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proxy_conf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string addr = 1;
    if (has_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->addr());
    }
    
    // required string port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->port());
    }
    
    // required int32 max_conn = 3;
    if (has_max_conn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_conn());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proxy_conf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proxy_conf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proxy_conf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proxy_conf::MergeFrom(const proxy_conf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_addr(from.addr());
    }
    if (from._has_bit(1)) {
      set_port(from.port());
    }
    if (from._has_bit(2)) {
      set_max_conn(from.max_conn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proxy_conf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proxy_conf::CopyFrom(const proxy_conf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proxy_conf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void proxy_conf::Swap(proxy_conf* other) {
  if (other != this) {
    std::swap(addr_, other->addr_);
    std::swap(port_, other->port_);
    std::swap(max_conn_, other->max_conn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proxy_conf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proxy_conf_descriptor_;
  metadata.reflection = proxy_conf_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace conf
}  // namespace oo

// @@protoc_insertion_point(global_scope)
