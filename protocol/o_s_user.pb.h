// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: o_s_user.proto

#ifndef PROTOBUF_o_5fs_5fuser_2eproto__INCLUDED
#define PROTOBUF_o_5fs_5fuser_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace oo {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_o_5fs_5fuser_2eproto();
void protobuf_AssignDesc_o_5fs_5fuser_2eproto();
void protobuf_ShutdownFile_o_5fs_5fuser_2eproto();

class user_login;
class user_login_result;
class user_enter_room;
class user_enter_room_result;
class user_enter_room_update;
class user_leave_room;
class user_leave_room_result;
class user_leave_room_update;
class user_content;
class user_send_to_user;
class user_send_to_user_result;
class user_send_to_user_update;
class user_send_to_room;
class user_send_to_room_result;
class user_send_to_room_update;
class room_create;
class room_create_result;
class room_active;
class room_active_result;
class room_destory;
class room_destory_result;
class room_close;
class room_close_result;
class room_lst_user;
class room_lst_user_result;

enum user_content_UCon {
  user_content_UCon_UC_txt = 1,
  user_content_UCon_UC_jpg = 2,
  user_content_UCon_UC_png = 3,
  user_content_UCon_UC_gif = 4,
  user_content_UCon_UC_url = 5,
  user_content_UCon_UC_voice = 6
};
bool user_content_UCon_IsValid(int value);
const user_content_UCon user_content_UCon_UCon_MIN = user_content_UCon_UC_txt;
const user_content_UCon user_content_UCon_UCon_MAX = user_content_UCon_UC_voice;
const int user_content_UCon_UCon_ARRAYSIZE = user_content_UCon_UCon_MAX + 1;

const ::google::protobuf::EnumDescriptor* user_content_UCon_descriptor();
inline const ::std::string& user_content_UCon_Name(user_content_UCon value) {
  return ::google::protobuf::internal::NameOfEnum(
    user_content_UCon_descriptor(), value);
}
inline bool user_content_UCon_Parse(
    const ::std::string& name, user_content_UCon* value) {
  return ::google::protobuf::internal::ParseNamedEnum<user_content_UCon>(
    user_content_UCon_descriptor(), name, value);
}
// ===================================================================

class user_login : public ::google::protobuf::Message {
 public:
  user_login();
  virtual ~user_login();
  
  user_login(const user_login& from);
  
  inline user_login& operator=(const user_login& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const user_login& default_instance();
  
  void Swap(user_login* other);
  
  // implements Message ----------------------------------------------
  
  user_login* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_login& from);
  void MergeFrom(const user_login& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // required string pwd = 2;
  inline bool has_pwd() const;
  inline void clear_pwd();
  static const int kPwdFieldNumber = 2;
  inline const ::std::string& pwd() const;
  inline void set_pwd(const ::std::string& value);
  inline void set_pwd(const char* value);
  inline void set_pwd(const char* value, size_t size);
  inline ::std::string* mutable_pwd();
  
  // @@protoc_insertion_point(class_scope:oo.proto.user_login)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::std::string* pwd_;
  static const ::std::string _default_pwd_;
  friend void  protobuf_AddDesc_o_5fs_5fuser_2eproto();
  friend void protobuf_AssignDesc_o_5fs_5fuser_2eproto();
  friend void protobuf_ShutdownFile_o_5fs_5fuser_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static user_login* default_instance_;
};
// -------------------------------------------------------------------

class user_login_result : public ::google::protobuf::Message {
 public:
  user_login_result();
  virtual ~user_login_result();
  
  user_login_result(const user_login_result& from);
  
  inline user_login_result& operator=(const user_login_result& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const user_login_result& default_instance();
  
  void Swap(user_login_result* other);
  
  // implements Message ----------------------------------------------
  
  user_login_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_login_result& from);
  void MergeFrom(const user_login_result& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 error = 1;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 1;
  inline ::google::protobuf::int32 error() const;
  inline void set_error(::google::protobuf::int32 value);
  
  // optional string ser_addr = 2;
  inline bool has_ser_addr() const;
  inline void clear_ser_addr();
  static const int kSerAddrFieldNumber = 2;
  inline const ::std::string& ser_addr() const;
  inline void set_ser_addr(const ::std::string& value);
  inline void set_ser_addr(const char* value);
  inline void set_ser_addr(const char* value, size_t size);
  inline ::std::string* mutable_ser_addr();
  
  // optional string port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline const ::std::string& port() const;
  inline void set_port(const ::std::string& value);
  inline void set_port(const char* value);
  inline void set_port(const char* value, size_t size);
  inline ::std::string* mutable_port();
  
  // optional string session_code = 4;
  inline bool has_session_code() const;
  inline void clear_session_code();
  static const int kSessionCodeFieldNumber = 4;
  inline const ::std::string& session_code() const;
  inline void set_session_code(const ::std::string& value);
  inline void set_session_code(const char* value);
  inline void set_session_code(const char* value, size_t size);
  inline ::std::string* mutable_session_code();
  
  // @@protoc_insertion_point(class_scope:oo.proto.user_login_result)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 error_;
  ::std::string* ser_addr_;
  static const ::std::string _default_ser_addr_;
  ::std::string* port_;
  static const ::std::string _default_port_;
  ::std::string* session_code_;
  static const ::std::string _default_session_code_;
  friend void  protobuf_AddDesc_o_5fs_5fuser_2eproto();
  friend void protobuf_AssignDesc_o_5fs_5fuser_2eproto();
  friend void protobuf_ShutdownFile_o_5fs_5fuser_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static user_login_result* default_instance_;
};
// -------------------------------------------------------------------

class user_enter_room : public ::google::protobuf::Message {
 public:
  user_enter_room();
  virtual ~user_enter_room();
  
  user_enter_room(const user_enter_room& from);
  
  inline user_enter_room& operator=(const user_enter_room& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const user_enter_room& default_instance();
  
  void Swap(user_enter_room* other);
  
  // implements Message ----------------------------------------------
  
  user_enter_room* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_enter_room& from);
  void MergeFrom(const user_enter_room& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string room_name = 1;
  inline bool has_room_name() const;
  inline void clear_room_name();
  static const int kRoomNameFieldNumber = 1;
  inline const ::std::string& room_name() const;
  inline void set_room_name(const ::std::string& value);
  inline void set_room_name(const char* value);
  inline void set_room_name(const char* value, size_t size);
  inline ::std::string* mutable_room_name();
  
  // @@protoc_insertion_point(class_scope:oo.proto.user_enter_room)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* room_name_;
  static const ::std::string _default_room_name_;
  friend void  protobuf_AddDesc_o_5fs_5fuser_2eproto();
  friend void protobuf_AssignDesc_o_5fs_5fuser_2eproto();
  friend void protobuf_ShutdownFile_o_5fs_5fuser_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static user_enter_room* default_instance_;
};
// -------------------------------------------------------------------

class user_enter_room_result : public ::google::protobuf::Message {
 public:
  user_enter_room_result();
  virtual ~user_enter_room_result();
  
  user_enter_room_result(const user_enter_room_result& from);
  
  inline user_enter_room_result& operator=(const user_enter_room_result& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const user_enter_room_result& default_instance();
  
  void Swap(user_enter_room_result* other);
  
  // implements Message ----------------------------------------------
  
  user_enter_room_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_enter_room_result& from);
  void MergeFrom(const user_enter_room_result& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 error = 1;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 1;
  inline ::google::protobuf::int32 error() const;
  inline void set_error(::google::protobuf::int32 value);
  
  // required string room_name = 2;
  inline bool has_room_name() const;
  inline void clear_room_name();
  static const int kRoomNameFieldNumber = 2;
  inline const ::std::string& room_name() const;
  inline void set_room_name(const ::std::string& value);
  inline void set_room_name(const char* value);
  inline void set_room_name(const char* value, size_t size);
  inline ::std::string* mutable_room_name();
  
  // @@protoc_insertion_point(class_scope:oo.proto.user_enter_room_result)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 error_;
  ::std::string* room_name_;
  static const ::std::string _default_room_name_;
  friend void  protobuf_AddDesc_o_5fs_5fuser_2eproto();
  friend void protobuf_AssignDesc_o_5fs_5fuser_2eproto();
  friend void protobuf_ShutdownFile_o_5fs_5fuser_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static user_enter_room_result* default_instance_;
};
// -------------------------------------------------------------------

class user_enter_room_update : public ::google::protobuf::Message {
 public:
  user_enter_room_update();
  virtual ~user_enter_room_update();
  
  user_enter_room_update(const user_enter_room_update& from);
  
  inline user_enter_room_update& operator=(const user_enter_room_update& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const user_enter_room_update& default_instance();
  
  void Swap(user_enter_room_update* other);
  
  // implements Message ----------------------------------------------
  
  user_enter_room_update* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_enter_room_update& from);
  void MergeFrom(const user_enter_room_update& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  
  // required string nick = 2;
  inline bool has_nick() const;
  inline void clear_nick();
  static const int kNickFieldNumber = 2;
  inline const ::std::string& nick() const;
  inline void set_nick(const ::std::string& value);
  inline void set_nick(const char* value);
  inline void set_nick(const char* value, size_t size);
  inline ::std::string* mutable_nick();
  
  // @@protoc_insertion_point(class_scope:oo.proto.user_enter_room_update)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* user_;
  static const ::std::string _default_user_;
  ::std::string* nick_;
  static const ::std::string _default_nick_;
  friend void  protobuf_AddDesc_o_5fs_5fuser_2eproto();
  friend void protobuf_AssignDesc_o_5fs_5fuser_2eproto();
  friend void protobuf_ShutdownFile_o_5fs_5fuser_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static user_enter_room_update* default_instance_;
};
// -------------------------------------------------------------------

class user_leave_room : public ::google::protobuf::Message {
 public:
  user_leave_room();
  virtual ~user_leave_room();
  
  user_leave_room(const user_leave_room& from);
  
  inline user_leave_room& operator=(const user_leave_room& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const user_leave_room& default_instance();
  
  void Swap(user_leave_room* other);
  
  // implements Message ----------------------------------------------
  
  user_leave_room* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_leave_room& from);
  void MergeFrom(const user_leave_room& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string room_name = 1;
  inline bool has_room_name() const;
  inline void clear_room_name();
  static const int kRoomNameFieldNumber = 1;
  inline const ::std::string& room_name() const;
  inline void set_room_name(const ::std::string& value);
  inline void set_room_name(const char* value);
  inline void set_room_name(const char* value, size_t size);
  inline ::std::string* mutable_room_name();
  
  // @@protoc_insertion_point(class_scope:oo.proto.user_leave_room)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* room_name_;
  static const ::std::string _default_room_name_;
  friend void  protobuf_AddDesc_o_5fs_5fuser_2eproto();
  friend void protobuf_AssignDesc_o_5fs_5fuser_2eproto();
  friend void protobuf_ShutdownFile_o_5fs_5fuser_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static user_leave_room* default_instance_;
};
// -------------------------------------------------------------------

class user_leave_room_result : public ::google::protobuf::Message {
 public:
  user_leave_room_result();
  virtual ~user_leave_room_result();
  
  user_leave_room_result(const user_leave_room_result& from);
  
  inline user_leave_room_result& operator=(const user_leave_room_result& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const user_leave_room_result& default_instance();
  
  void Swap(user_leave_room_result* other);
  
  // implements Message ----------------------------------------------
  
  user_leave_room_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_leave_room_result& from);
  void MergeFrom(const user_leave_room_result& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 error = 1;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 1;
  inline ::google::protobuf::int32 error() const;
  inline void set_error(::google::protobuf::int32 value);
  
  // required string room_name = 2;
  inline bool has_room_name() const;
  inline void clear_room_name();
  static const int kRoomNameFieldNumber = 2;
  inline const ::std::string& room_name() const;
  inline void set_room_name(const ::std::string& value);
  inline void set_room_name(const char* value);
  inline void set_room_name(const char* value, size_t size);
  inline ::std::string* mutable_room_name();
  
  // @@protoc_insertion_point(class_scope:oo.proto.user_leave_room_result)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 error_;
  ::std::string* room_name_;
  static const ::std::string _default_room_name_;
  friend void  protobuf_AddDesc_o_5fs_5fuser_2eproto();
  friend void protobuf_AssignDesc_o_5fs_5fuser_2eproto();
  friend void protobuf_ShutdownFile_o_5fs_5fuser_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static user_leave_room_result* default_instance_;
};
// -------------------------------------------------------------------

class user_leave_room_update : public ::google::protobuf::Message {
 public:
  user_leave_room_update();
  virtual ~user_leave_room_update();
  
  user_leave_room_update(const user_leave_room_update& from);
  
  inline user_leave_room_update& operator=(const user_leave_room_update& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const user_leave_room_update& default_instance();
  
  void Swap(user_leave_room_update* other);
  
  // implements Message ----------------------------------------------
  
  user_leave_room_update* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_leave_room_update& from);
  void MergeFrom(const user_leave_room_update& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  
  // @@protoc_insertion_point(class_scope:oo.proto.user_leave_room_update)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* user_;
  static const ::std::string _default_user_;
  friend void  protobuf_AddDesc_o_5fs_5fuser_2eproto();
  friend void protobuf_AssignDesc_o_5fs_5fuser_2eproto();
  friend void protobuf_ShutdownFile_o_5fs_5fuser_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static user_leave_room_update* default_instance_;
};
// -------------------------------------------------------------------

class user_content : public ::google::protobuf::Message {
 public:
  user_content();
  virtual ~user_content();
  
  user_content(const user_content& from);
  
  inline user_content& operator=(const user_content& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const user_content& default_instance();
  
  void Swap(user_content* other);
  
  // implements Message ----------------------------------------------
  
  user_content* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_content& from);
  void MergeFrom(const user_content& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef user_content_UCon UCon;
  static const UCon UC_txt = user_content_UCon_UC_txt;
  static const UCon UC_jpg = user_content_UCon_UC_jpg;
  static const UCon UC_png = user_content_UCon_UC_png;
  static const UCon UC_gif = user_content_UCon_UC_gif;
  static const UCon UC_url = user_content_UCon_UC_url;
  static const UCon UC_voice = user_content_UCon_UC_voice;
  static inline bool UCon_IsValid(int value) {
    return user_content_UCon_IsValid(value);
  }
  static const UCon UCon_MIN =
    user_content_UCon_UCon_MIN;
  static const UCon UCon_MAX =
    user_content_UCon_UCon_MAX;
  static const int UCon_ARRAYSIZE =
    user_content_UCon_UCon_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  UCon_descriptor() {
    return user_content_UCon_descriptor();
  }
  static inline const ::std::string& UCon_Name(UCon value) {
    return user_content_UCon_Name(value);
  }
  static inline bool UCon_Parse(const ::std::string& name,
      UCon* value) {
    return user_content_UCon_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .oo.proto.user_content.UCon con_type = 1;
  inline bool has_con_type() const;
  inline void clear_con_type();
  static const int kConTypeFieldNumber = 1;
  inline ::oo::proto::user_content_UCon con_type() const;
  inline void set_con_type(::oo::proto::user_content_UCon value);
  
  // required string content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  
  // @@protoc_insertion_point(class_scope:oo.proto.user_content)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int con_type_;
  ::std::string* content_;
  static const ::std::string _default_content_;
  friend void  protobuf_AddDesc_o_5fs_5fuser_2eproto();
  friend void protobuf_AssignDesc_o_5fs_5fuser_2eproto();
  friend void protobuf_ShutdownFile_o_5fs_5fuser_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static user_content* default_instance_;
};
// -------------------------------------------------------------------

class user_send_to_user : public ::google::protobuf::Message {
 public:
  user_send_to_user();
  virtual ~user_send_to_user();
  
  user_send_to_user(const user_send_to_user& from);
  
  inline user_send_to_user& operator=(const user_send_to_user& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const user_send_to_user& default_instance();
  
  void Swap(user_send_to_user* other);
  
  // implements Message ----------------------------------------------
  
  user_send_to_user* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_send_to_user& from);
  void MergeFrom(const user_send_to_user& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  
  // required string user_name = 2;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 2;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  
  // required .oo.proto.user_content content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::oo::proto::user_content& content() const;
  inline ::oo::proto::user_content* mutable_content();
  
  // @@protoc_insertion_point(class_scope:oo.proto.user_send_to_user)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* user_;
  static const ::std::string _default_user_;
  ::std::string* user_name_;
  static const ::std::string _default_user_name_;
  ::oo::proto::user_content* content_;
  friend void  protobuf_AddDesc_o_5fs_5fuser_2eproto();
  friend void protobuf_AssignDesc_o_5fs_5fuser_2eproto();
  friend void protobuf_ShutdownFile_o_5fs_5fuser_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static user_send_to_user* default_instance_;
};
// -------------------------------------------------------------------

class user_send_to_user_result : public ::google::protobuf::Message {
 public:
  user_send_to_user_result();
  virtual ~user_send_to_user_result();
  
  user_send_to_user_result(const user_send_to_user_result& from);
  
  inline user_send_to_user_result& operator=(const user_send_to_user_result& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const user_send_to_user_result& default_instance();
  
  void Swap(user_send_to_user_result* other);
  
  // implements Message ----------------------------------------------
  
  user_send_to_user_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_send_to_user_result& from);
  void MergeFrom(const user_send_to_user_result& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 error = 1;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 1;
  inline ::google::protobuf::int32 error() const;
  inline void set_error(::google::protobuf::int32 value);
  
  // required string room_name = 3;
  inline bool has_room_name() const;
  inline void clear_room_name();
  static const int kRoomNameFieldNumber = 3;
  inline const ::std::string& room_name() const;
  inline void set_room_name(const ::std::string& value);
  inline void set_room_name(const char* value);
  inline void set_room_name(const char* value, size_t size);
  inline ::std::string* mutable_room_name();
  
  // @@protoc_insertion_point(class_scope:oo.proto.user_send_to_user_result)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 error_;
  ::std::string* room_name_;
  static const ::std::string _default_room_name_;
  friend void  protobuf_AddDesc_o_5fs_5fuser_2eproto();
  friend void protobuf_AssignDesc_o_5fs_5fuser_2eproto();
  friend void protobuf_ShutdownFile_o_5fs_5fuser_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static user_send_to_user_result* default_instance_;
};
// -------------------------------------------------------------------

class user_send_to_user_update : public ::google::protobuf::Message {
 public:
  user_send_to_user_update();
  virtual ~user_send_to_user_update();
  
  user_send_to_user_update(const user_send_to_user_update& from);
  
  inline user_send_to_user_update& operator=(const user_send_to_user_update& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const user_send_to_user_update& default_instance();
  
  void Swap(user_send_to_user_update* other);
  
  // implements Message ----------------------------------------------
  
  user_send_to_user_update* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_send_to_user_update& from);
  void MergeFrom(const user_send_to_user_update& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  
  // required string user_name = 2;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 2;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  
  // required .oo.proto.user_content content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::oo::proto::user_content& content() const;
  inline ::oo::proto::user_content* mutable_content();
  
  // @@protoc_insertion_point(class_scope:oo.proto.user_send_to_user_update)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* user_;
  static const ::std::string _default_user_;
  ::std::string* user_name_;
  static const ::std::string _default_user_name_;
  ::oo::proto::user_content* content_;
  friend void  protobuf_AddDesc_o_5fs_5fuser_2eproto();
  friend void protobuf_AssignDesc_o_5fs_5fuser_2eproto();
  friend void protobuf_ShutdownFile_o_5fs_5fuser_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static user_send_to_user_update* default_instance_;
};
// -------------------------------------------------------------------

class user_send_to_room : public ::google::protobuf::Message {
 public:
  user_send_to_room();
  virtual ~user_send_to_room();
  
  user_send_to_room(const user_send_to_room& from);
  
  inline user_send_to_room& operator=(const user_send_to_room& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const user_send_to_room& default_instance();
  
  void Swap(user_send_to_room* other);
  
  // implements Message ----------------------------------------------
  
  user_send_to_room* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_send_to_room& from);
  void MergeFrom(const user_send_to_room& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  
  // required string room_name = 2;
  inline bool has_room_name() const;
  inline void clear_room_name();
  static const int kRoomNameFieldNumber = 2;
  inline const ::std::string& room_name() const;
  inline void set_room_name(const ::std::string& value);
  inline void set_room_name(const char* value);
  inline void set_room_name(const char* value, size_t size);
  inline ::std::string* mutable_room_name();
  
  // required .oo.proto.user_content content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::oo::proto::user_content& content() const;
  inline ::oo::proto::user_content* mutable_content();
  
  // @@protoc_insertion_point(class_scope:oo.proto.user_send_to_room)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* user_;
  static const ::std::string _default_user_;
  ::std::string* room_name_;
  static const ::std::string _default_room_name_;
  ::oo::proto::user_content* content_;
  friend void  protobuf_AddDesc_o_5fs_5fuser_2eproto();
  friend void protobuf_AssignDesc_o_5fs_5fuser_2eproto();
  friend void protobuf_ShutdownFile_o_5fs_5fuser_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static user_send_to_room* default_instance_;
};
// -------------------------------------------------------------------

class user_send_to_room_result : public ::google::protobuf::Message {
 public:
  user_send_to_room_result();
  virtual ~user_send_to_room_result();
  
  user_send_to_room_result(const user_send_to_room_result& from);
  
  inline user_send_to_room_result& operator=(const user_send_to_room_result& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const user_send_to_room_result& default_instance();
  
  void Swap(user_send_to_room_result* other);
  
  // implements Message ----------------------------------------------
  
  user_send_to_room_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_send_to_room_result& from);
  void MergeFrom(const user_send_to_room_result& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 error = 1;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 1;
  inline ::google::protobuf::int32 error() const;
  inline void set_error(::google::protobuf::int32 value);
  
  // required string room_name = 3;
  inline bool has_room_name() const;
  inline void clear_room_name();
  static const int kRoomNameFieldNumber = 3;
  inline const ::std::string& room_name() const;
  inline void set_room_name(const ::std::string& value);
  inline void set_room_name(const char* value);
  inline void set_room_name(const char* value, size_t size);
  inline ::std::string* mutable_room_name();
  
  // @@protoc_insertion_point(class_scope:oo.proto.user_send_to_room_result)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 error_;
  ::std::string* room_name_;
  static const ::std::string _default_room_name_;
  friend void  protobuf_AddDesc_o_5fs_5fuser_2eproto();
  friend void protobuf_AssignDesc_o_5fs_5fuser_2eproto();
  friend void protobuf_ShutdownFile_o_5fs_5fuser_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static user_send_to_room_result* default_instance_;
};
// -------------------------------------------------------------------

class user_send_to_room_update : public ::google::protobuf::Message {
 public:
  user_send_to_room_update();
  virtual ~user_send_to_room_update();
  
  user_send_to_room_update(const user_send_to_room_update& from);
  
  inline user_send_to_room_update& operator=(const user_send_to_room_update& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const user_send_to_room_update& default_instance();
  
  void Swap(user_send_to_room_update* other);
  
  // implements Message ----------------------------------------------
  
  user_send_to_room_update* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_send_to_room_update& from);
  void MergeFrom(const user_send_to_room_update& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  
  // required string room_name = 2;
  inline bool has_room_name() const;
  inline void clear_room_name();
  static const int kRoomNameFieldNumber = 2;
  inline const ::std::string& room_name() const;
  inline void set_room_name(const ::std::string& value);
  inline void set_room_name(const char* value);
  inline void set_room_name(const char* value, size_t size);
  inline ::std::string* mutable_room_name();
  
  // required .oo.proto.user_content content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::oo::proto::user_content& content() const;
  inline ::oo::proto::user_content* mutable_content();
  
  // @@protoc_insertion_point(class_scope:oo.proto.user_send_to_room_update)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* user_;
  static const ::std::string _default_user_;
  ::std::string* room_name_;
  static const ::std::string _default_room_name_;
  ::oo::proto::user_content* content_;
  friend void  protobuf_AddDesc_o_5fs_5fuser_2eproto();
  friend void protobuf_AssignDesc_o_5fs_5fuser_2eproto();
  friend void protobuf_ShutdownFile_o_5fs_5fuser_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static user_send_to_room_update* default_instance_;
};
// -------------------------------------------------------------------

class room_create : public ::google::protobuf::Message {
 public:
  room_create();
  virtual ~room_create();
  
  room_create(const room_create& from);
  
  inline room_create& operator=(const room_create& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const room_create& default_instance();
  
  void Swap(room_create* other);
  
  // implements Message ----------------------------------------------
  
  room_create* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const room_create& from);
  void MergeFrom(const room_create& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string room_name = 1;
  inline bool has_room_name() const;
  inline void clear_room_name();
  static const int kRoomNameFieldNumber = 1;
  inline const ::std::string& room_name() const;
  inline void set_room_name(const ::std::string& value);
  inline void set_room_name(const char* value);
  inline void set_room_name(const char* value, size_t size);
  inline ::std::string* mutable_room_name();
  
  // @@protoc_insertion_point(class_scope:oo.proto.room_create)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* room_name_;
  static const ::std::string _default_room_name_;
  friend void  protobuf_AddDesc_o_5fs_5fuser_2eproto();
  friend void protobuf_AssignDesc_o_5fs_5fuser_2eproto();
  friend void protobuf_ShutdownFile_o_5fs_5fuser_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static room_create* default_instance_;
};
// -------------------------------------------------------------------

class room_create_result : public ::google::protobuf::Message {
 public:
  room_create_result();
  virtual ~room_create_result();
  
  room_create_result(const room_create_result& from);
  
  inline room_create_result& operator=(const room_create_result& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const room_create_result& default_instance();
  
  void Swap(room_create_result* other);
  
  // implements Message ----------------------------------------------
  
  room_create_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const room_create_result& from);
  void MergeFrom(const room_create_result& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 error = 1;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 1;
  inline ::google::protobuf::int32 error() const;
  inline void set_error(::google::protobuf::int32 value);
  
  // required string room_name = 2;
  inline bool has_room_name() const;
  inline void clear_room_name();
  static const int kRoomNameFieldNumber = 2;
  inline const ::std::string& room_name() const;
  inline void set_room_name(const ::std::string& value);
  inline void set_room_name(const char* value);
  inline void set_room_name(const char* value, size_t size);
  inline ::std::string* mutable_room_name();
  
  // @@protoc_insertion_point(class_scope:oo.proto.room_create_result)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 error_;
  ::std::string* room_name_;
  static const ::std::string _default_room_name_;
  friend void  protobuf_AddDesc_o_5fs_5fuser_2eproto();
  friend void protobuf_AssignDesc_o_5fs_5fuser_2eproto();
  friend void protobuf_ShutdownFile_o_5fs_5fuser_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static room_create_result* default_instance_;
};
// -------------------------------------------------------------------

class room_active : public ::google::protobuf::Message {
 public:
  room_active();
  virtual ~room_active();
  
  room_active(const room_active& from);
  
  inline room_active& operator=(const room_active& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const room_active& default_instance();
  
  void Swap(room_active* other);
  
  // implements Message ----------------------------------------------
  
  room_active* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const room_active& from);
  void MergeFrom(const room_active& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string room_name = 1;
  inline bool has_room_name() const;
  inline void clear_room_name();
  static const int kRoomNameFieldNumber = 1;
  inline const ::std::string& room_name() const;
  inline void set_room_name(const ::std::string& value);
  inline void set_room_name(const char* value);
  inline void set_room_name(const char* value, size_t size);
  inline ::std::string* mutable_room_name();
  
  // @@protoc_insertion_point(class_scope:oo.proto.room_active)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* room_name_;
  static const ::std::string _default_room_name_;
  friend void  protobuf_AddDesc_o_5fs_5fuser_2eproto();
  friend void protobuf_AssignDesc_o_5fs_5fuser_2eproto();
  friend void protobuf_ShutdownFile_o_5fs_5fuser_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static room_active* default_instance_;
};
// -------------------------------------------------------------------

class room_active_result : public ::google::protobuf::Message {
 public:
  room_active_result();
  virtual ~room_active_result();
  
  room_active_result(const room_active_result& from);
  
  inline room_active_result& operator=(const room_active_result& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const room_active_result& default_instance();
  
  void Swap(room_active_result* other);
  
  // implements Message ----------------------------------------------
  
  room_active_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const room_active_result& from);
  void MergeFrom(const room_active_result& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 error = 1;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 1;
  inline ::google::protobuf::int32 error() const;
  inline void set_error(::google::protobuf::int32 value);
  
  // required string room_name = 2;
  inline bool has_room_name() const;
  inline void clear_room_name();
  static const int kRoomNameFieldNumber = 2;
  inline const ::std::string& room_name() const;
  inline void set_room_name(const ::std::string& value);
  inline void set_room_name(const char* value);
  inline void set_room_name(const char* value, size_t size);
  inline ::std::string* mutable_room_name();
  
  // @@protoc_insertion_point(class_scope:oo.proto.room_active_result)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 error_;
  ::std::string* room_name_;
  static const ::std::string _default_room_name_;
  friend void  protobuf_AddDesc_o_5fs_5fuser_2eproto();
  friend void protobuf_AssignDesc_o_5fs_5fuser_2eproto();
  friend void protobuf_ShutdownFile_o_5fs_5fuser_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static room_active_result* default_instance_;
};
// -------------------------------------------------------------------

class room_destory : public ::google::protobuf::Message {
 public:
  room_destory();
  virtual ~room_destory();
  
  room_destory(const room_destory& from);
  
  inline room_destory& operator=(const room_destory& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const room_destory& default_instance();
  
  void Swap(room_destory* other);
  
  // implements Message ----------------------------------------------
  
  room_destory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const room_destory& from);
  void MergeFrom(const room_destory& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string room_name = 1;
  inline bool has_room_name() const;
  inline void clear_room_name();
  static const int kRoomNameFieldNumber = 1;
  inline const ::std::string& room_name() const;
  inline void set_room_name(const ::std::string& value);
  inline void set_room_name(const char* value);
  inline void set_room_name(const char* value, size_t size);
  inline ::std::string* mutable_room_name();
  
  // @@protoc_insertion_point(class_scope:oo.proto.room_destory)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* room_name_;
  static const ::std::string _default_room_name_;
  friend void  protobuf_AddDesc_o_5fs_5fuser_2eproto();
  friend void protobuf_AssignDesc_o_5fs_5fuser_2eproto();
  friend void protobuf_ShutdownFile_o_5fs_5fuser_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static room_destory* default_instance_;
};
// -------------------------------------------------------------------

class room_destory_result : public ::google::protobuf::Message {
 public:
  room_destory_result();
  virtual ~room_destory_result();
  
  room_destory_result(const room_destory_result& from);
  
  inline room_destory_result& operator=(const room_destory_result& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const room_destory_result& default_instance();
  
  void Swap(room_destory_result* other);
  
  // implements Message ----------------------------------------------
  
  room_destory_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const room_destory_result& from);
  void MergeFrom(const room_destory_result& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 error = 1;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 1;
  inline ::google::protobuf::int32 error() const;
  inline void set_error(::google::protobuf::int32 value);
  
  // required string room_name = 2;
  inline bool has_room_name() const;
  inline void clear_room_name();
  static const int kRoomNameFieldNumber = 2;
  inline const ::std::string& room_name() const;
  inline void set_room_name(const ::std::string& value);
  inline void set_room_name(const char* value);
  inline void set_room_name(const char* value, size_t size);
  inline ::std::string* mutable_room_name();
  
  // @@protoc_insertion_point(class_scope:oo.proto.room_destory_result)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 error_;
  ::std::string* room_name_;
  static const ::std::string _default_room_name_;
  friend void  protobuf_AddDesc_o_5fs_5fuser_2eproto();
  friend void protobuf_AssignDesc_o_5fs_5fuser_2eproto();
  friend void protobuf_ShutdownFile_o_5fs_5fuser_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static room_destory_result* default_instance_;
};
// -------------------------------------------------------------------

class room_close : public ::google::protobuf::Message {
 public:
  room_close();
  virtual ~room_close();
  
  room_close(const room_close& from);
  
  inline room_close& operator=(const room_close& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const room_close& default_instance();
  
  void Swap(room_close* other);
  
  // implements Message ----------------------------------------------
  
  room_close* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const room_close& from);
  void MergeFrom(const room_close& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string room_name = 1;
  inline bool has_room_name() const;
  inline void clear_room_name();
  static const int kRoomNameFieldNumber = 1;
  inline const ::std::string& room_name() const;
  inline void set_room_name(const ::std::string& value);
  inline void set_room_name(const char* value);
  inline void set_room_name(const char* value, size_t size);
  inline ::std::string* mutable_room_name();
  
  // @@protoc_insertion_point(class_scope:oo.proto.room_close)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* room_name_;
  static const ::std::string _default_room_name_;
  friend void  protobuf_AddDesc_o_5fs_5fuser_2eproto();
  friend void protobuf_AssignDesc_o_5fs_5fuser_2eproto();
  friend void protobuf_ShutdownFile_o_5fs_5fuser_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static room_close* default_instance_;
};
// -------------------------------------------------------------------

class room_close_result : public ::google::protobuf::Message {
 public:
  room_close_result();
  virtual ~room_close_result();
  
  room_close_result(const room_close_result& from);
  
  inline room_close_result& operator=(const room_close_result& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const room_close_result& default_instance();
  
  void Swap(room_close_result* other);
  
  // implements Message ----------------------------------------------
  
  room_close_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const room_close_result& from);
  void MergeFrom(const room_close_result& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 error = 1;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 1;
  inline ::google::protobuf::int32 error() const;
  inline void set_error(::google::protobuf::int32 value);
  
  // required string room_name = 2;
  inline bool has_room_name() const;
  inline void clear_room_name();
  static const int kRoomNameFieldNumber = 2;
  inline const ::std::string& room_name() const;
  inline void set_room_name(const ::std::string& value);
  inline void set_room_name(const char* value);
  inline void set_room_name(const char* value, size_t size);
  inline ::std::string* mutable_room_name();
  
  // @@protoc_insertion_point(class_scope:oo.proto.room_close_result)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 error_;
  ::std::string* room_name_;
  static const ::std::string _default_room_name_;
  friend void  protobuf_AddDesc_o_5fs_5fuser_2eproto();
  friend void protobuf_AssignDesc_o_5fs_5fuser_2eproto();
  friend void protobuf_ShutdownFile_o_5fs_5fuser_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static room_close_result* default_instance_;
};
// -------------------------------------------------------------------

class room_lst_user : public ::google::protobuf::Message {
 public:
  room_lst_user();
  virtual ~room_lst_user();
  
  room_lst_user(const room_lst_user& from);
  
  inline room_lst_user& operator=(const room_lst_user& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const room_lst_user& default_instance();
  
  void Swap(room_lst_user* other);
  
  // implements Message ----------------------------------------------
  
  room_lst_user* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const room_lst_user& from);
  void MergeFrom(const room_lst_user& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string room_name = 1;
  inline bool has_room_name() const;
  inline void clear_room_name();
  static const int kRoomNameFieldNumber = 1;
  inline const ::std::string& room_name() const;
  inline void set_room_name(const ::std::string& value);
  inline void set_room_name(const char* value);
  inline void set_room_name(const char* value, size_t size);
  inline ::std::string* mutable_room_name();
  
  // @@protoc_insertion_point(class_scope:oo.proto.room_lst_user)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* room_name_;
  static const ::std::string _default_room_name_;
  friend void  protobuf_AddDesc_o_5fs_5fuser_2eproto();
  friend void protobuf_AssignDesc_o_5fs_5fuser_2eproto();
  friend void protobuf_ShutdownFile_o_5fs_5fuser_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static room_lst_user* default_instance_;
};
// -------------------------------------------------------------------

class room_lst_user_result : public ::google::protobuf::Message {
 public:
  room_lst_user_result();
  virtual ~room_lst_user_result();
  
  room_lst_user_result(const room_lst_user_result& from);
  
  inline room_lst_user_result& operator=(const room_lst_user_result& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const room_lst_user_result& default_instance();
  
  void Swap(room_lst_user_result* other);
  
  // implements Message ----------------------------------------------
  
  room_lst_user_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const room_lst_user_result& from);
  void MergeFrom(const room_lst_user_result& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 error = 1;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 1;
  inline ::google::protobuf::int32 error() const;
  inline void set_error(::google::protobuf::int32 value);
  
  // required string room_name = 2;
  inline bool has_room_name() const;
  inline void clear_room_name();
  static const int kRoomNameFieldNumber = 2;
  inline const ::std::string& room_name() const;
  inline void set_room_name(const ::std::string& value);
  inline void set_room_name(const char* value);
  inline void set_room_name(const char* value, size_t size);
  inline ::std::string* mutable_room_name();
  
  // repeated string user = 3;
  inline int user_size() const;
  inline void clear_user();
  static const int kUserFieldNumber = 3;
  inline const ::std::string& user(int index) const;
  inline ::std::string* mutable_user(int index);
  inline void set_user(int index, const ::std::string& value);
  inline void set_user(int index, const char* value);
  inline void set_user(int index, const char* value, size_t size);
  inline ::std::string* add_user();
  inline void add_user(const ::std::string& value);
  inline void add_user(const char* value);
  inline void add_user(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& user() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_user();
  
  // repeated string nicks = 4;
  inline int nicks_size() const;
  inline void clear_nicks();
  static const int kNicksFieldNumber = 4;
  inline const ::std::string& nicks(int index) const;
  inline ::std::string* mutable_nicks(int index);
  inline void set_nicks(int index, const ::std::string& value);
  inline void set_nicks(int index, const char* value);
  inline void set_nicks(int index, const char* value, size_t size);
  inline ::std::string* add_nicks();
  inline void add_nicks(const ::std::string& value);
  inline void add_nicks(const char* value);
  inline void add_nicks(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& nicks() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_nicks();
  
  // @@protoc_insertion_point(class_scope:oo.proto.room_lst_user_result)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 error_;
  ::std::string* room_name_;
  static const ::std::string _default_room_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> user_;
  ::google::protobuf::RepeatedPtrField< ::std::string> nicks_;
  friend void  protobuf_AddDesc_o_5fs_5fuser_2eproto();
  friend void protobuf_AssignDesc_o_5fs_5fuser_2eproto();
  friend void protobuf_ShutdownFile_o_5fs_5fuser_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static room_lst_user_result* default_instance_;
};
// ===================================================================


// ===================================================================

// user_login

// required string name = 1;
inline bool user_login::has_name() const {
  return _has_bit(0);
}
inline void user_login::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& user_login::name() const {
  return *name_;
}
inline void user_login::set_name(const ::std::string& value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void user_login::set_name(const char* value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void user_login::set_name(const char* value, size_t size) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* user_login::mutable_name() {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// required string pwd = 2;
inline bool user_login::has_pwd() const {
  return _has_bit(1);
}
inline void user_login::clear_pwd() {
  if (pwd_ != &_default_pwd_) {
    pwd_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& user_login::pwd() const {
  return *pwd_;
}
inline void user_login::set_pwd(const ::std::string& value) {
  _set_bit(1);
  if (pwd_ == &_default_pwd_) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
}
inline void user_login::set_pwd(const char* value) {
  _set_bit(1);
  if (pwd_ == &_default_pwd_) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
}
inline void user_login::set_pwd(const char* value, size_t size) {
  _set_bit(1);
  if (pwd_ == &_default_pwd_) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* user_login::mutable_pwd() {
  _set_bit(1);
  if (pwd_ == &_default_pwd_) {
    pwd_ = new ::std::string;
  }
  return pwd_;
}

// -------------------------------------------------------------------

// user_login_result

// required int32 error = 1;
inline bool user_login_result::has_error() const {
  return _has_bit(0);
}
inline void user_login_result::clear_error() {
  error_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 user_login_result::error() const {
  return error_;
}
inline void user_login_result::set_error(::google::protobuf::int32 value) {
  _set_bit(0);
  error_ = value;
}

// optional string ser_addr = 2;
inline bool user_login_result::has_ser_addr() const {
  return _has_bit(1);
}
inline void user_login_result::clear_ser_addr() {
  if (ser_addr_ != &_default_ser_addr_) {
    ser_addr_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& user_login_result::ser_addr() const {
  return *ser_addr_;
}
inline void user_login_result::set_ser_addr(const ::std::string& value) {
  _set_bit(1);
  if (ser_addr_ == &_default_ser_addr_) {
    ser_addr_ = new ::std::string;
  }
  ser_addr_->assign(value);
}
inline void user_login_result::set_ser_addr(const char* value) {
  _set_bit(1);
  if (ser_addr_ == &_default_ser_addr_) {
    ser_addr_ = new ::std::string;
  }
  ser_addr_->assign(value);
}
inline void user_login_result::set_ser_addr(const char* value, size_t size) {
  _set_bit(1);
  if (ser_addr_ == &_default_ser_addr_) {
    ser_addr_ = new ::std::string;
  }
  ser_addr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* user_login_result::mutable_ser_addr() {
  _set_bit(1);
  if (ser_addr_ == &_default_ser_addr_) {
    ser_addr_ = new ::std::string;
  }
  return ser_addr_;
}

// optional string port = 3;
inline bool user_login_result::has_port() const {
  return _has_bit(2);
}
inline void user_login_result::clear_port() {
  if (port_ != &_default_port_) {
    port_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& user_login_result::port() const {
  return *port_;
}
inline void user_login_result::set_port(const ::std::string& value) {
  _set_bit(2);
  if (port_ == &_default_port_) {
    port_ = new ::std::string;
  }
  port_->assign(value);
}
inline void user_login_result::set_port(const char* value) {
  _set_bit(2);
  if (port_ == &_default_port_) {
    port_ = new ::std::string;
  }
  port_->assign(value);
}
inline void user_login_result::set_port(const char* value, size_t size) {
  _set_bit(2);
  if (port_ == &_default_port_) {
    port_ = new ::std::string;
  }
  port_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* user_login_result::mutable_port() {
  _set_bit(2);
  if (port_ == &_default_port_) {
    port_ = new ::std::string;
  }
  return port_;
}

// optional string session_code = 4;
inline bool user_login_result::has_session_code() const {
  return _has_bit(3);
}
inline void user_login_result::clear_session_code() {
  if (session_code_ != &_default_session_code_) {
    session_code_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& user_login_result::session_code() const {
  return *session_code_;
}
inline void user_login_result::set_session_code(const ::std::string& value) {
  _set_bit(3);
  if (session_code_ == &_default_session_code_) {
    session_code_ = new ::std::string;
  }
  session_code_->assign(value);
}
inline void user_login_result::set_session_code(const char* value) {
  _set_bit(3);
  if (session_code_ == &_default_session_code_) {
    session_code_ = new ::std::string;
  }
  session_code_->assign(value);
}
inline void user_login_result::set_session_code(const char* value, size_t size) {
  _set_bit(3);
  if (session_code_ == &_default_session_code_) {
    session_code_ = new ::std::string;
  }
  session_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* user_login_result::mutable_session_code() {
  _set_bit(3);
  if (session_code_ == &_default_session_code_) {
    session_code_ = new ::std::string;
  }
  return session_code_;
}

// -------------------------------------------------------------------

// user_enter_room

// required string room_name = 1;
inline bool user_enter_room::has_room_name() const {
  return _has_bit(0);
}
inline void user_enter_room::clear_room_name() {
  if (room_name_ != &_default_room_name_) {
    room_name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& user_enter_room::room_name() const {
  return *room_name_;
}
inline void user_enter_room::set_room_name(const ::std::string& value) {
  _set_bit(0);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void user_enter_room::set_room_name(const char* value) {
  _set_bit(0);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void user_enter_room::set_room_name(const char* value, size_t size) {
  _set_bit(0);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* user_enter_room::mutable_room_name() {
  _set_bit(0);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  return room_name_;
}

// -------------------------------------------------------------------

// user_enter_room_result

// required int32 error = 1;
inline bool user_enter_room_result::has_error() const {
  return _has_bit(0);
}
inline void user_enter_room_result::clear_error() {
  error_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 user_enter_room_result::error() const {
  return error_;
}
inline void user_enter_room_result::set_error(::google::protobuf::int32 value) {
  _set_bit(0);
  error_ = value;
}

// required string room_name = 2;
inline bool user_enter_room_result::has_room_name() const {
  return _has_bit(1);
}
inline void user_enter_room_result::clear_room_name() {
  if (room_name_ != &_default_room_name_) {
    room_name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& user_enter_room_result::room_name() const {
  return *room_name_;
}
inline void user_enter_room_result::set_room_name(const ::std::string& value) {
  _set_bit(1);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void user_enter_room_result::set_room_name(const char* value) {
  _set_bit(1);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void user_enter_room_result::set_room_name(const char* value, size_t size) {
  _set_bit(1);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* user_enter_room_result::mutable_room_name() {
  _set_bit(1);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  return room_name_;
}

// -------------------------------------------------------------------

// user_enter_room_update

// required string user = 1;
inline bool user_enter_room_update::has_user() const {
  return _has_bit(0);
}
inline void user_enter_room_update::clear_user() {
  if (user_ != &_default_user_) {
    user_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& user_enter_room_update::user() const {
  return *user_;
}
inline void user_enter_room_update::set_user(const ::std::string& value) {
  _set_bit(0);
  if (user_ == &_default_user_) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void user_enter_room_update::set_user(const char* value) {
  _set_bit(0);
  if (user_ == &_default_user_) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void user_enter_room_update::set_user(const char* value, size_t size) {
  _set_bit(0);
  if (user_ == &_default_user_) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* user_enter_room_update::mutable_user() {
  _set_bit(0);
  if (user_ == &_default_user_) {
    user_ = new ::std::string;
  }
  return user_;
}

// required string nick = 2;
inline bool user_enter_room_update::has_nick() const {
  return _has_bit(1);
}
inline void user_enter_room_update::clear_nick() {
  if (nick_ != &_default_nick_) {
    nick_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& user_enter_room_update::nick() const {
  return *nick_;
}
inline void user_enter_room_update::set_nick(const ::std::string& value) {
  _set_bit(1);
  if (nick_ == &_default_nick_) {
    nick_ = new ::std::string;
  }
  nick_->assign(value);
}
inline void user_enter_room_update::set_nick(const char* value) {
  _set_bit(1);
  if (nick_ == &_default_nick_) {
    nick_ = new ::std::string;
  }
  nick_->assign(value);
}
inline void user_enter_room_update::set_nick(const char* value, size_t size) {
  _set_bit(1);
  if (nick_ == &_default_nick_) {
    nick_ = new ::std::string;
  }
  nick_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* user_enter_room_update::mutable_nick() {
  _set_bit(1);
  if (nick_ == &_default_nick_) {
    nick_ = new ::std::string;
  }
  return nick_;
}

// -------------------------------------------------------------------

// user_leave_room

// required string room_name = 1;
inline bool user_leave_room::has_room_name() const {
  return _has_bit(0);
}
inline void user_leave_room::clear_room_name() {
  if (room_name_ != &_default_room_name_) {
    room_name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& user_leave_room::room_name() const {
  return *room_name_;
}
inline void user_leave_room::set_room_name(const ::std::string& value) {
  _set_bit(0);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void user_leave_room::set_room_name(const char* value) {
  _set_bit(0);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void user_leave_room::set_room_name(const char* value, size_t size) {
  _set_bit(0);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* user_leave_room::mutable_room_name() {
  _set_bit(0);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  return room_name_;
}

// -------------------------------------------------------------------

// user_leave_room_result

// required int32 error = 1;
inline bool user_leave_room_result::has_error() const {
  return _has_bit(0);
}
inline void user_leave_room_result::clear_error() {
  error_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 user_leave_room_result::error() const {
  return error_;
}
inline void user_leave_room_result::set_error(::google::protobuf::int32 value) {
  _set_bit(0);
  error_ = value;
}

// required string room_name = 2;
inline bool user_leave_room_result::has_room_name() const {
  return _has_bit(1);
}
inline void user_leave_room_result::clear_room_name() {
  if (room_name_ != &_default_room_name_) {
    room_name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& user_leave_room_result::room_name() const {
  return *room_name_;
}
inline void user_leave_room_result::set_room_name(const ::std::string& value) {
  _set_bit(1);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void user_leave_room_result::set_room_name(const char* value) {
  _set_bit(1);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void user_leave_room_result::set_room_name(const char* value, size_t size) {
  _set_bit(1);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* user_leave_room_result::mutable_room_name() {
  _set_bit(1);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  return room_name_;
}

// -------------------------------------------------------------------

// user_leave_room_update

// required string user = 1;
inline bool user_leave_room_update::has_user() const {
  return _has_bit(0);
}
inline void user_leave_room_update::clear_user() {
  if (user_ != &_default_user_) {
    user_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& user_leave_room_update::user() const {
  return *user_;
}
inline void user_leave_room_update::set_user(const ::std::string& value) {
  _set_bit(0);
  if (user_ == &_default_user_) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void user_leave_room_update::set_user(const char* value) {
  _set_bit(0);
  if (user_ == &_default_user_) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void user_leave_room_update::set_user(const char* value, size_t size) {
  _set_bit(0);
  if (user_ == &_default_user_) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* user_leave_room_update::mutable_user() {
  _set_bit(0);
  if (user_ == &_default_user_) {
    user_ = new ::std::string;
  }
  return user_;
}

// -------------------------------------------------------------------

// user_content

// required .oo.proto.user_content.UCon con_type = 1;
inline bool user_content::has_con_type() const {
  return _has_bit(0);
}
inline void user_content::clear_con_type() {
  con_type_ = 1;
  _clear_bit(0);
}
inline ::oo::proto::user_content_UCon user_content::con_type() const {
  return static_cast< ::oo::proto::user_content_UCon >(con_type_);
}
inline void user_content::set_con_type(::oo::proto::user_content_UCon value) {
  GOOGLE_DCHECK(::oo::proto::user_content_UCon_IsValid(value));
  _set_bit(0);
  con_type_ = value;
}

// required string content = 2;
inline bool user_content::has_content() const {
  return _has_bit(1);
}
inline void user_content::clear_content() {
  if (content_ != &_default_content_) {
    content_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& user_content::content() const {
  return *content_;
}
inline void user_content::set_content(const ::std::string& value) {
  _set_bit(1);
  if (content_ == &_default_content_) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void user_content::set_content(const char* value) {
  _set_bit(1);
  if (content_ == &_default_content_) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void user_content::set_content(const char* value, size_t size) {
  _set_bit(1);
  if (content_ == &_default_content_) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* user_content::mutable_content() {
  _set_bit(1);
  if (content_ == &_default_content_) {
    content_ = new ::std::string;
  }
  return content_;
}

// -------------------------------------------------------------------

// user_send_to_user

// required string user = 1;
inline bool user_send_to_user::has_user() const {
  return _has_bit(0);
}
inline void user_send_to_user::clear_user() {
  if (user_ != &_default_user_) {
    user_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& user_send_to_user::user() const {
  return *user_;
}
inline void user_send_to_user::set_user(const ::std::string& value) {
  _set_bit(0);
  if (user_ == &_default_user_) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void user_send_to_user::set_user(const char* value) {
  _set_bit(0);
  if (user_ == &_default_user_) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void user_send_to_user::set_user(const char* value, size_t size) {
  _set_bit(0);
  if (user_ == &_default_user_) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* user_send_to_user::mutable_user() {
  _set_bit(0);
  if (user_ == &_default_user_) {
    user_ = new ::std::string;
  }
  return user_;
}

// required string user_name = 2;
inline bool user_send_to_user::has_user_name() const {
  return _has_bit(1);
}
inline void user_send_to_user::clear_user_name() {
  if (user_name_ != &_default_user_name_) {
    user_name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& user_send_to_user::user_name() const {
  return *user_name_;
}
inline void user_send_to_user::set_user_name(const ::std::string& value) {
  _set_bit(1);
  if (user_name_ == &_default_user_name_) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void user_send_to_user::set_user_name(const char* value) {
  _set_bit(1);
  if (user_name_ == &_default_user_name_) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void user_send_to_user::set_user_name(const char* value, size_t size) {
  _set_bit(1);
  if (user_name_ == &_default_user_name_) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* user_send_to_user::mutable_user_name() {
  _set_bit(1);
  if (user_name_ == &_default_user_name_) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}

// required .oo.proto.user_content content = 3;
inline bool user_send_to_user::has_content() const {
  return _has_bit(2);
}
inline void user_send_to_user::clear_content() {
  if (content_ != NULL) content_->::oo::proto::user_content::Clear();
  _clear_bit(2);
}
inline const ::oo::proto::user_content& user_send_to_user::content() const {
  return content_ != NULL ? *content_ : *default_instance_->content_;
}
inline ::oo::proto::user_content* user_send_to_user::mutable_content() {
  _set_bit(2);
  if (content_ == NULL) content_ = new ::oo::proto::user_content;
  return content_;
}

// -------------------------------------------------------------------

// user_send_to_user_result

// required int32 error = 1;
inline bool user_send_to_user_result::has_error() const {
  return _has_bit(0);
}
inline void user_send_to_user_result::clear_error() {
  error_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 user_send_to_user_result::error() const {
  return error_;
}
inline void user_send_to_user_result::set_error(::google::protobuf::int32 value) {
  _set_bit(0);
  error_ = value;
}

// required string room_name = 3;
inline bool user_send_to_user_result::has_room_name() const {
  return _has_bit(1);
}
inline void user_send_to_user_result::clear_room_name() {
  if (room_name_ != &_default_room_name_) {
    room_name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& user_send_to_user_result::room_name() const {
  return *room_name_;
}
inline void user_send_to_user_result::set_room_name(const ::std::string& value) {
  _set_bit(1);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void user_send_to_user_result::set_room_name(const char* value) {
  _set_bit(1);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void user_send_to_user_result::set_room_name(const char* value, size_t size) {
  _set_bit(1);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* user_send_to_user_result::mutable_room_name() {
  _set_bit(1);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  return room_name_;
}

// -------------------------------------------------------------------

// user_send_to_user_update

// required string user = 1;
inline bool user_send_to_user_update::has_user() const {
  return _has_bit(0);
}
inline void user_send_to_user_update::clear_user() {
  if (user_ != &_default_user_) {
    user_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& user_send_to_user_update::user() const {
  return *user_;
}
inline void user_send_to_user_update::set_user(const ::std::string& value) {
  _set_bit(0);
  if (user_ == &_default_user_) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void user_send_to_user_update::set_user(const char* value) {
  _set_bit(0);
  if (user_ == &_default_user_) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void user_send_to_user_update::set_user(const char* value, size_t size) {
  _set_bit(0);
  if (user_ == &_default_user_) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* user_send_to_user_update::mutable_user() {
  _set_bit(0);
  if (user_ == &_default_user_) {
    user_ = new ::std::string;
  }
  return user_;
}

// required string user_name = 2;
inline bool user_send_to_user_update::has_user_name() const {
  return _has_bit(1);
}
inline void user_send_to_user_update::clear_user_name() {
  if (user_name_ != &_default_user_name_) {
    user_name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& user_send_to_user_update::user_name() const {
  return *user_name_;
}
inline void user_send_to_user_update::set_user_name(const ::std::string& value) {
  _set_bit(1);
  if (user_name_ == &_default_user_name_) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void user_send_to_user_update::set_user_name(const char* value) {
  _set_bit(1);
  if (user_name_ == &_default_user_name_) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void user_send_to_user_update::set_user_name(const char* value, size_t size) {
  _set_bit(1);
  if (user_name_ == &_default_user_name_) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* user_send_to_user_update::mutable_user_name() {
  _set_bit(1);
  if (user_name_ == &_default_user_name_) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}

// required .oo.proto.user_content content = 3;
inline bool user_send_to_user_update::has_content() const {
  return _has_bit(2);
}
inline void user_send_to_user_update::clear_content() {
  if (content_ != NULL) content_->::oo::proto::user_content::Clear();
  _clear_bit(2);
}
inline const ::oo::proto::user_content& user_send_to_user_update::content() const {
  return content_ != NULL ? *content_ : *default_instance_->content_;
}
inline ::oo::proto::user_content* user_send_to_user_update::mutable_content() {
  _set_bit(2);
  if (content_ == NULL) content_ = new ::oo::proto::user_content;
  return content_;
}

// -------------------------------------------------------------------

// user_send_to_room

// required string user = 1;
inline bool user_send_to_room::has_user() const {
  return _has_bit(0);
}
inline void user_send_to_room::clear_user() {
  if (user_ != &_default_user_) {
    user_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& user_send_to_room::user() const {
  return *user_;
}
inline void user_send_to_room::set_user(const ::std::string& value) {
  _set_bit(0);
  if (user_ == &_default_user_) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void user_send_to_room::set_user(const char* value) {
  _set_bit(0);
  if (user_ == &_default_user_) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void user_send_to_room::set_user(const char* value, size_t size) {
  _set_bit(0);
  if (user_ == &_default_user_) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* user_send_to_room::mutable_user() {
  _set_bit(0);
  if (user_ == &_default_user_) {
    user_ = new ::std::string;
  }
  return user_;
}

// required string room_name = 2;
inline bool user_send_to_room::has_room_name() const {
  return _has_bit(1);
}
inline void user_send_to_room::clear_room_name() {
  if (room_name_ != &_default_room_name_) {
    room_name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& user_send_to_room::room_name() const {
  return *room_name_;
}
inline void user_send_to_room::set_room_name(const ::std::string& value) {
  _set_bit(1);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void user_send_to_room::set_room_name(const char* value) {
  _set_bit(1);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void user_send_to_room::set_room_name(const char* value, size_t size) {
  _set_bit(1);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* user_send_to_room::mutable_room_name() {
  _set_bit(1);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  return room_name_;
}

// required .oo.proto.user_content content = 3;
inline bool user_send_to_room::has_content() const {
  return _has_bit(2);
}
inline void user_send_to_room::clear_content() {
  if (content_ != NULL) content_->::oo::proto::user_content::Clear();
  _clear_bit(2);
}
inline const ::oo::proto::user_content& user_send_to_room::content() const {
  return content_ != NULL ? *content_ : *default_instance_->content_;
}
inline ::oo::proto::user_content* user_send_to_room::mutable_content() {
  _set_bit(2);
  if (content_ == NULL) content_ = new ::oo::proto::user_content;
  return content_;
}

// -------------------------------------------------------------------

// user_send_to_room_result

// required int32 error = 1;
inline bool user_send_to_room_result::has_error() const {
  return _has_bit(0);
}
inline void user_send_to_room_result::clear_error() {
  error_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 user_send_to_room_result::error() const {
  return error_;
}
inline void user_send_to_room_result::set_error(::google::protobuf::int32 value) {
  _set_bit(0);
  error_ = value;
}

// required string room_name = 3;
inline bool user_send_to_room_result::has_room_name() const {
  return _has_bit(1);
}
inline void user_send_to_room_result::clear_room_name() {
  if (room_name_ != &_default_room_name_) {
    room_name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& user_send_to_room_result::room_name() const {
  return *room_name_;
}
inline void user_send_to_room_result::set_room_name(const ::std::string& value) {
  _set_bit(1);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void user_send_to_room_result::set_room_name(const char* value) {
  _set_bit(1);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void user_send_to_room_result::set_room_name(const char* value, size_t size) {
  _set_bit(1);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* user_send_to_room_result::mutable_room_name() {
  _set_bit(1);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  return room_name_;
}

// -------------------------------------------------------------------

// user_send_to_room_update

// required string user = 1;
inline bool user_send_to_room_update::has_user() const {
  return _has_bit(0);
}
inline void user_send_to_room_update::clear_user() {
  if (user_ != &_default_user_) {
    user_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& user_send_to_room_update::user() const {
  return *user_;
}
inline void user_send_to_room_update::set_user(const ::std::string& value) {
  _set_bit(0);
  if (user_ == &_default_user_) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void user_send_to_room_update::set_user(const char* value) {
  _set_bit(0);
  if (user_ == &_default_user_) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void user_send_to_room_update::set_user(const char* value, size_t size) {
  _set_bit(0);
  if (user_ == &_default_user_) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* user_send_to_room_update::mutable_user() {
  _set_bit(0);
  if (user_ == &_default_user_) {
    user_ = new ::std::string;
  }
  return user_;
}

// required string room_name = 2;
inline bool user_send_to_room_update::has_room_name() const {
  return _has_bit(1);
}
inline void user_send_to_room_update::clear_room_name() {
  if (room_name_ != &_default_room_name_) {
    room_name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& user_send_to_room_update::room_name() const {
  return *room_name_;
}
inline void user_send_to_room_update::set_room_name(const ::std::string& value) {
  _set_bit(1);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void user_send_to_room_update::set_room_name(const char* value) {
  _set_bit(1);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void user_send_to_room_update::set_room_name(const char* value, size_t size) {
  _set_bit(1);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* user_send_to_room_update::mutable_room_name() {
  _set_bit(1);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  return room_name_;
}

// required .oo.proto.user_content content = 3;
inline bool user_send_to_room_update::has_content() const {
  return _has_bit(2);
}
inline void user_send_to_room_update::clear_content() {
  if (content_ != NULL) content_->::oo::proto::user_content::Clear();
  _clear_bit(2);
}
inline const ::oo::proto::user_content& user_send_to_room_update::content() const {
  return content_ != NULL ? *content_ : *default_instance_->content_;
}
inline ::oo::proto::user_content* user_send_to_room_update::mutable_content() {
  _set_bit(2);
  if (content_ == NULL) content_ = new ::oo::proto::user_content;
  return content_;
}

// -------------------------------------------------------------------

// room_create

// required string room_name = 1;
inline bool room_create::has_room_name() const {
  return _has_bit(0);
}
inline void room_create::clear_room_name() {
  if (room_name_ != &_default_room_name_) {
    room_name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& room_create::room_name() const {
  return *room_name_;
}
inline void room_create::set_room_name(const ::std::string& value) {
  _set_bit(0);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void room_create::set_room_name(const char* value) {
  _set_bit(0);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void room_create::set_room_name(const char* value, size_t size) {
  _set_bit(0);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* room_create::mutable_room_name() {
  _set_bit(0);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  return room_name_;
}

// -------------------------------------------------------------------

// room_create_result

// required int32 error = 1;
inline bool room_create_result::has_error() const {
  return _has_bit(0);
}
inline void room_create_result::clear_error() {
  error_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 room_create_result::error() const {
  return error_;
}
inline void room_create_result::set_error(::google::protobuf::int32 value) {
  _set_bit(0);
  error_ = value;
}

// required string room_name = 2;
inline bool room_create_result::has_room_name() const {
  return _has_bit(1);
}
inline void room_create_result::clear_room_name() {
  if (room_name_ != &_default_room_name_) {
    room_name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& room_create_result::room_name() const {
  return *room_name_;
}
inline void room_create_result::set_room_name(const ::std::string& value) {
  _set_bit(1);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void room_create_result::set_room_name(const char* value) {
  _set_bit(1);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void room_create_result::set_room_name(const char* value, size_t size) {
  _set_bit(1);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* room_create_result::mutable_room_name() {
  _set_bit(1);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  return room_name_;
}

// -------------------------------------------------------------------

// room_active

// required string room_name = 1;
inline bool room_active::has_room_name() const {
  return _has_bit(0);
}
inline void room_active::clear_room_name() {
  if (room_name_ != &_default_room_name_) {
    room_name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& room_active::room_name() const {
  return *room_name_;
}
inline void room_active::set_room_name(const ::std::string& value) {
  _set_bit(0);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void room_active::set_room_name(const char* value) {
  _set_bit(0);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void room_active::set_room_name(const char* value, size_t size) {
  _set_bit(0);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* room_active::mutable_room_name() {
  _set_bit(0);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  return room_name_;
}

// -------------------------------------------------------------------

// room_active_result

// required int32 error = 1;
inline bool room_active_result::has_error() const {
  return _has_bit(0);
}
inline void room_active_result::clear_error() {
  error_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 room_active_result::error() const {
  return error_;
}
inline void room_active_result::set_error(::google::protobuf::int32 value) {
  _set_bit(0);
  error_ = value;
}

// required string room_name = 2;
inline bool room_active_result::has_room_name() const {
  return _has_bit(1);
}
inline void room_active_result::clear_room_name() {
  if (room_name_ != &_default_room_name_) {
    room_name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& room_active_result::room_name() const {
  return *room_name_;
}
inline void room_active_result::set_room_name(const ::std::string& value) {
  _set_bit(1);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void room_active_result::set_room_name(const char* value) {
  _set_bit(1);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void room_active_result::set_room_name(const char* value, size_t size) {
  _set_bit(1);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* room_active_result::mutable_room_name() {
  _set_bit(1);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  return room_name_;
}

// -------------------------------------------------------------------

// room_destory

// required string room_name = 1;
inline bool room_destory::has_room_name() const {
  return _has_bit(0);
}
inline void room_destory::clear_room_name() {
  if (room_name_ != &_default_room_name_) {
    room_name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& room_destory::room_name() const {
  return *room_name_;
}
inline void room_destory::set_room_name(const ::std::string& value) {
  _set_bit(0);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void room_destory::set_room_name(const char* value) {
  _set_bit(0);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void room_destory::set_room_name(const char* value, size_t size) {
  _set_bit(0);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* room_destory::mutable_room_name() {
  _set_bit(0);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  return room_name_;
}

// -------------------------------------------------------------------

// room_destory_result

// required int32 error = 1;
inline bool room_destory_result::has_error() const {
  return _has_bit(0);
}
inline void room_destory_result::clear_error() {
  error_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 room_destory_result::error() const {
  return error_;
}
inline void room_destory_result::set_error(::google::protobuf::int32 value) {
  _set_bit(0);
  error_ = value;
}

// required string room_name = 2;
inline bool room_destory_result::has_room_name() const {
  return _has_bit(1);
}
inline void room_destory_result::clear_room_name() {
  if (room_name_ != &_default_room_name_) {
    room_name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& room_destory_result::room_name() const {
  return *room_name_;
}
inline void room_destory_result::set_room_name(const ::std::string& value) {
  _set_bit(1);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void room_destory_result::set_room_name(const char* value) {
  _set_bit(1);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void room_destory_result::set_room_name(const char* value, size_t size) {
  _set_bit(1);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* room_destory_result::mutable_room_name() {
  _set_bit(1);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  return room_name_;
}

// -------------------------------------------------------------------

// room_close

// required string room_name = 1;
inline bool room_close::has_room_name() const {
  return _has_bit(0);
}
inline void room_close::clear_room_name() {
  if (room_name_ != &_default_room_name_) {
    room_name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& room_close::room_name() const {
  return *room_name_;
}
inline void room_close::set_room_name(const ::std::string& value) {
  _set_bit(0);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void room_close::set_room_name(const char* value) {
  _set_bit(0);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void room_close::set_room_name(const char* value, size_t size) {
  _set_bit(0);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* room_close::mutable_room_name() {
  _set_bit(0);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  return room_name_;
}

// -------------------------------------------------------------------

// room_close_result

// required int32 error = 1;
inline bool room_close_result::has_error() const {
  return _has_bit(0);
}
inline void room_close_result::clear_error() {
  error_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 room_close_result::error() const {
  return error_;
}
inline void room_close_result::set_error(::google::protobuf::int32 value) {
  _set_bit(0);
  error_ = value;
}

// required string room_name = 2;
inline bool room_close_result::has_room_name() const {
  return _has_bit(1);
}
inline void room_close_result::clear_room_name() {
  if (room_name_ != &_default_room_name_) {
    room_name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& room_close_result::room_name() const {
  return *room_name_;
}
inline void room_close_result::set_room_name(const ::std::string& value) {
  _set_bit(1);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void room_close_result::set_room_name(const char* value) {
  _set_bit(1);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void room_close_result::set_room_name(const char* value, size_t size) {
  _set_bit(1);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* room_close_result::mutable_room_name() {
  _set_bit(1);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  return room_name_;
}

// -------------------------------------------------------------------

// room_lst_user

// required string room_name = 1;
inline bool room_lst_user::has_room_name() const {
  return _has_bit(0);
}
inline void room_lst_user::clear_room_name() {
  if (room_name_ != &_default_room_name_) {
    room_name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& room_lst_user::room_name() const {
  return *room_name_;
}
inline void room_lst_user::set_room_name(const ::std::string& value) {
  _set_bit(0);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void room_lst_user::set_room_name(const char* value) {
  _set_bit(0);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void room_lst_user::set_room_name(const char* value, size_t size) {
  _set_bit(0);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* room_lst_user::mutable_room_name() {
  _set_bit(0);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  return room_name_;
}

// -------------------------------------------------------------------

// room_lst_user_result

// required int32 error = 1;
inline bool room_lst_user_result::has_error() const {
  return _has_bit(0);
}
inline void room_lst_user_result::clear_error() {
  error_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 room_lst_user_result::error() const {
  return error_;
}
inline void room_lst_user_result::set_error(::google::protobuf::int32 value) {
  _set_bit(0);
  error_ = value;
}

// required string room_name = 2;
inline bool room_lst_user_result::has_room_name() const {
  return _has_bit(1);
}
inline void room_lst_user_result::clear_room_name() {
  if (room_name_ != &_default_room_name_) {
    room_name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& room_lst_user_result::room_name() const {
  return *room_name_;
}
inline void room_lst_user_result::set_room_name(const ::std::string& value) {
  _set_bit(1);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void room_lst_user_result::set_room_name(const char* value) {
  _set_bit(1);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void room_lst_user_result::set_room_name(const char* value, size_t size) {
  _set_bit(1);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* room_lst_user_result::mutable_room_name() {
  _set_bit(1);
  if (room_name_ == &_default_room_name_) {
    room_name_ = new ::std::string;
  }
  return room_name_;
}

// repeated string user = 3;
inline int room_lst_user_result::user_size() const {
  return user_.size();
}
inline void room_lst_user_result::clear_user() {
  user_.Clear();
}
inline const ::std::string& room_lst_user_result::user(int index) const {
  return user_.Get(index);
}
inline ::std::string* room_lst_user_result::mutable_user(int index) {
  return user_.Mutable(index);
}
inline void room_lst_user_result::set_user(int index, const ::std::string& value) {
  user_.Mutable(index)->assign(value);
}
inline void room_lst_user_result::set_user(int index, const char* value) {
  user_.Mutable(index)->assign(value);
}
inline void room_lst_user_result::set_user(int index, const char* value, size_t size) {
  user_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* room_lst_user_result::add_user() {
  return user_.Add();
}
inline void room_lst_user_result::add_user(const ::std::string& value) {
  user_.Add()->assign(value);
}
inline void room_lst_user_result::add_user(const char* value) {
  user_.Add()->assign(value);
}
inline void room_lst_user_result::add_user(const char* value, size_t size) {
  user_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
room_lst_user_result::user() const {
  return user_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
room_lst_user_result::mutable_user() {
  return &user_;
}

// repeated string nicks = 4;
inline int room_lst_user_result::nicks_size() const {
  return nicks_.size();
}
inline void room_lst_user_result::clear_nicks() {
  nicks_.Clear();
}
inline const ::std::string& room_lst_user_result::nicks(int index) const {
  return nicks_.Get(index);
}
inline ::std::string* room_lst_user_result::mutable_nicks(int index) {
  return nicks_.Mutable(index);
}
inline void room_lst_user_result::set_nicks(int index, const ::std::string& value) {
  nicks_.Mutable(index)->assign(value);
}
inline void room_lst_user_result::set_nicks(int index, const char* value) {
  nicks_.Mutable(index)->assign(value);
}
inline void room_lst_user_result::set_nicks(int index, const char* value, size_t size) {
  nicks_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* room_lst_user_result::add_nicks() {
  return nicks_.Add();
}
inline void room_lst_user_result::add_nicks(const ::std::string& value) {
  nicks_.Add()->assign(value);
}
inline void room_lst_user_result::add_nicks(const char* value) {
  nicks_.Add()->assign(value);
}
inline void room_lst_user_result::add_nicks(const char* value, size_t size) {
  nicks_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
room_lst_user_result::nicks() const {
  return nicks_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
room_lst_user_result::mutable_nicks() {
  return &nicks_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace oo

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::oo::proto::user_content_UCon>() {
  return ::oo::proto::user_content_UCon_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_o_5fs_5fuser_2eproto__INCLUDED
