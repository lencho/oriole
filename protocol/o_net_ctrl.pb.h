// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: o_net_ctrl.proto

#ifndef PROTOBUF_o_5fnet_5fctrl_2eproto__INCLUDED
#define PROTOBUF_o_5fnet_5fctrl_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace oo {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_o_5fnet_5fctrl_2eproto();
void protobuf_AssignDesc_o_5fnet_5fctrl_2eproto();
void protobuf_ShutdownFile_o_5fnet_5fctrl_2eproto();

class node_info;
class node_active;
class node_kad_update;
class store_key;
class store_key_result;
class find_node;
class find_node_result;
class find_value;
class find_value_result;
class proxy_pkg;
class net_ctrl_msg;

enum node_info_InetProto {
  node_info_InetProto_TCP = 0,
  node_info_InetProto_UDP = 1
};
bool node_info_InetProto_IsValid(int value);
const node_info_InetProto node_info_InetProto_InetProto_MIN = node_info_InetProto_TCP;
const node_info_InetProto node_info_InetProto_InetProto_MAX = node_info_InetProto_UDP;
const int node_info_InetProto_InetProto_ARRAYSIZE = node_info_InetProto_InetProto_MAX + 1;

const ::google::protobuf::EnumDescriptor* node_info_InetProto_descriptor();
inline const ::std::string& node_info_InetProto_Name(node_info_InetProto value) {
  return ::google::protobuf::internal::NameOfEnum(
    node_info_InetProto_descriptor(), value);
}
inline bool node_info_InetProto_Parse(
    const ::std::string& name, node_info_InetProto* value) {
  return ::google::protobuf::internal::ParseNamedEnum<node_info_InetProto>(
    node_info_InetProto_descriptor(), name, value);
}
// ===================================================================

class node_info : public ::google::protobuf::Message {
 public:
  node_info();
  virtual ~node_info();
  
  node_info(const node_info& from);
  
  inline node_info& operator=(const node_info& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const node_info& default_instance();
  
  void Swap(node_info* other);
  
  // implements Message ----------------------------------------------
  
  node_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const node_info& from);
  void MergeFrom(const node_info& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef node_info_InetProto InetProto;
  static const InetProto TCP = node_info_InetProto_TCP;
  static const InetProto UDP = node_info_InetProto_UDP;
  static inline bool InetProto_IsValid(int value) {
    return node_info_InetProto_IsValid(value);
  }
  static const InetProto InetProto_MIN =
    node_info_InetProto_InetProto_MIN;
  static const InetProto InetProto_MAX =
    node_info_InetProto_InetProto_MAX;
  static const int InetProto_ARRAYSIZE =
    node_info_InetProto_InetProto_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  InetProto_descriptor() {
    return node_info_InetProto_descriptor();
  }
  static inline const ::std::string& InetProto_Name(InetProto value) {
    return node_info_InetProto_Name(value);
  }
  static inline bool InetProto_Parse(const ::std::string& name,
      InetProto* value) {
    return node_info_InetProto_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  
  // required string addr = 2;
  inline bool has_addr() const;
  inline void clear_addr();
  static const int kAddrFieldNumber = 2;
  inline const ::std::string& addr() const;
  inline void set_addr(const ::std::string& value);
  inline void set_addr(const char* value);
  inline void set_addr(const char* value, size_t size);
  inline ::std::string* mutable_addr();
  
  // required uint64 ping_time = 3;
  inline bool has_ping_time() const;
  inline void clear_ping_time();
  static const int kPingTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 ping_time() const;
  inline void set_ping_time(::google::protobuf::uint64 value);
  
  // required .oo.proto.node_info.InetProto proto = 4;
  inline bool has_proto() const;
  inline void clear_proto();
  static const int kProtoFieldNumber = 4;
  inline ::oo::proto::node_info_InetProto proto() const;
  inline void set_proto(::oo::proto::node_info_InetProto value);
  
  // required int32 port = 5;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 5;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:oo.proto.node_info)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* id_;
  static const ::std::string _default_id_;
  ::std::string* addr_;
  static const ::std::string _default_addr_;
  ::google::protobuf::uint64 ping_time_;
  int proto_;
  ::google::protobuf::int32 port_;
  friend void  protobuf_AddDesc_o_5fnet_5fctrl_2eproto();
  friend void protobuf_AssignDesc_o_5fnet_5fctrl_2eproto();
  friend void protobuf_ShutdownFile_o_5fnet_5fctrl_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static node_info* default_instance_;
};
// -------------------------------------------------------------------

class node_active : public ::google::protobuf::Message {
 public:
  node_active();
  virtual ~node_active();
  
  node_active(const node_active& from);
  
  inline node_active& operator=(const node_active& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const node_active& default_instance();
  
  void Swap(node_active* other);
  
  // implements Message ----------------------------------------------
  
  node_active* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const node_active& from);
  void MergeFrom(const node_active& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .oo.proto.node_info node = 1;
  inline bool has_node() const;
  inline void clear_node();
  static const int kNodeFieldNumber = 1;
  inline const ::oo::proto::node_info& node() const;
  inline ::oo::proto::node_info* mutable_node();
  
  // @@protoc_insertion_point(class_scope:oo.proto.node_active)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::oo::proto::node_info* node_;
  friend void  protobuf_AddDesc_o_5fnet_5fctrl_2eproto();
  friend void protobuf_AssignDesc_o_5fnet_5fctrl_2eproto();
  friend void protobuf_ShutdownFile_o_5fnet_5fctrl_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static node_active* default_instance_;
};
// -------------------------------------------------------------------

class node_kad_update : public ::google::protobuf::Message {
 public:
  node_kad_update();
  virtual ~node_kad_update();
  
  node_kad_update(const node_kad_update& from);
  
  inline node_kad_update& operator=(const node_kad_update& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const node_kad_update& default_instance();
  
  void Swap(node_kad_update* other);
  
  // implements Message ----------------------------------------------
  
  node_kad_update* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const node_kad_update& from);
  void MergeFrom(const node_kad_update& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .oo.proto.node_info nodes = 1;
  inline int nodes_size() const;
  inline void clear_nodes();
  static const int kNodesFieldNumber = 1;
  inline const ::oo::proto::node_info& nodes(int index) const;
  inline ::oo::proto::node_info* mutable_nodes(int index);
  inline ::oo::proto::node_info* add_nodes();
  inline const ::google::protobuf::RepeatedPtrField< ::oo::proto::node_info >&
      nodes() const;
  inline ::google::protobuf::RepeatedPtrField< ::oo::proto::node_info >*
      mutable_nodes();
  
  // @@protoc_insertion_point(class_scope:oo.proto.node_kad_update)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::oo::proto::node_info > nodes_;
  friend void  protobuf_AddDesc_o_5fnet_5fctrl_2eproto();
  friend void protobuf_AssignDesc_o_5fnet_5fctrl_2eproto();
  friend void protobuf_ShutdownFile_o_5fnet_5fctrl_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static node_kad_update* default_instance_;
};
// -------------------------------------------------------------------

class store_key : public ::google::protobuf::Message {
 public:
  store_key();
  virtual ~store_key();
  
  store_key(const store_key& from);
  
  inline store_key& operator=(const store_key& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const store_key& default_instance();
  
  void Swap(store_key* other);
  
  // implements Message ----------------------------------------------
  
  store_key* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const store_key& from);
  void MergeFrom(const store_key& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  
  // required string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  
  // @@protoc_insertion_point(class_scope:oo.proto.store_key)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* key_;
  static const ::std::string _default_key_;
  ::std::string* value_;
  static const ::std::string _default_value_;
  friend void  protobuf_AddDesc_o_5fnet_5fctrl_2eproto();
  friend void protobuf_AssignDesc_o_5fnet_5fctrl_2eproto();
  friend void protobuf_ShutdownFile_o_5fnet_5fctrl_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static store_key* default_instance_;
};
// -------------------------------------------------------------------

class store_key_result : public ::google::protobuf::Message {
 public:
  store_key_result();
  virtual ~store_key_result();
  
  store_key_result(const store_key_result& from);
  
  inline store_key_result& operator=(const store_key_result& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const store_key_result& default_instance();
  
  void Swap(store_key_result* other);
  
  // implements Message ----------------------------------------------
  
  store_key_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const store_key_result& from);
  void MergeFrom(const store_key_result& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  
  // required bool is_suc = 2;
  inline bool has_is_suc() const;
  inline void clear_is_suc();
  static const int kIsSucFieldNumber = 2;
  inline bool is_suc() const;
  inline void set_is_suc(bool value);
  
  // @@protoc_insertion_point(class_scope:oo.proto.store_key_result)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* key_;
  static const ::std::string _default_key_;
  bool is_suc_;
  friend void  protobuf_AddDesc_o_5fnet_5fctrl_2eproto();
  friend void protobuf_AssignDesc_o_5fnet_5fctrl_2eproto();
  friend void protobuf_ShutdownFile_o_5fnet_5fctrl_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static store_key_result* default_instance_;
};
// -------------------------------------------------------------------

class find_node : public ::google::protobuf::Message {
 public:
  find_node();
  virtual ~find_node();
  
  find_node(const find_node& from);
  
  inline find_node& operator=(const find_node& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const find_node& default_instance();
  
  void Swap(find_node* other);
  
  // implements Message ----------------------------------------------
  
  find_node* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const find_node& from);
  void MergeFrom(const find_node& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string f_id = 1;
  inline bool has_f_id() const;
  inline void clear_f_id();
  static const int kFIdFieldNumber = 1;
  inline const ::std::string& f_id() const;
  inline void set_f_id(const ::std::string& value);
  inline void set_f_id(const char* value);
  inline void set_f_id(const char* value, size_t size);
  inline ::std::string* mutable_f_id();
  
  // @@protoc_insertion_point(class_scope:oo.proto.find_node)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* f_id_;
  static const ::std::string _default_f_id_;
  friend void  protobuf_AddDesc_o_5fnet_5fctrl_2eproto();
  friend void protobuf_AssignDesc_o_5fnet_5fctrl_2eproto();
  friend void protobuf_ShutdownFile_o_5fnet_5fctrl_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static find_node* default_instance_;
};
// -------------------------------------------------------------------

class find_node_result : public ::google::protobuf::Message {
 public:
  find_node_result();
  virtual ~find_node_result();
  
  find_node_result(const find_node_result& from);
  
  inline find_node_result& operator=(const find_node_result& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const find_node_result& default_instance();
  
  void Swap(find_node_result* other);
  
  // implements Message ----------------------------------------------
  
  find_node_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const find_node_result& from);
  void MergeFrom(const find_node_result& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .oo.proto.node_info result = 1;
  inline int result_size() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::oo::proto::node_info& result(int index) const;
  inline ::oo::proto::node_info* mutable_result(int index);
  inline ::oo::proto::node_info* add_result();
  inline const ::google::protobuf::RepeatedPtrField< ::oo::proto::node_info >&
      result() const;
  inline ::google::protobuf::RepeatedPtrField< ::oo::proto::node_info >*
      mutable_result();
  
  // @@protoc_insertion_point(class_scope:oo.proto.find_node_result)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::oo::proto::node_info > result_;
  friend void  protobuf_AddDesc_o_5fnet_5fctrl_2eproto();
  friend void protobuf_AssignDesc_o_5fnet_5fctrl_2eproto();
  friend void protobuf_ShutdownFile_o_5fnet_5fctrl_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static find_node_result* default_instance_;
};
// -------------------------------------------------------------------

class find_value : public ::google::protobuf::Message {
 public:
  find_value();
  virtual ~find_value();
  
  find_value(const find_value& from);
  
  inline find_value& operator=(const find_value& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const find_value& default_instance();
  
  void Swap(find_value* other);
  
  // implements Message ----------------------------------------------
  
  find_value* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const find_value& from);
  void MergeFrom(const find_value& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string f_id = 1;
  inline bool has_f_id() const;
  inline void clear_f_id();
  static const int kFIdFieldNumber = 1;
  inline const ::std::string& f_id() const;
  inline void set_f_id(const ::std::string& value);
  inline void set_f_id(const char* value);
  inline void set_f_id(const char* value, size_t size);
  inline ::std::string* mutable_f_id();
  
  // @@protoc_insertion_point(class_scope:oo.proto.find_value)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* f_id_;
  static const ::std::string _default_f_id_;
  friend void  protobuf_AddDesc_o_5fnet_5fctrl_2eproto();
  friend void protobuf_AssignDesc_o_5fnet_5fctrl_2eproto();
  friend void protobuf_ShutdownFile_o_5fnet_5fctrl_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static find_value* default_instance_;
};
// -------------------------------------------------------------------

class find_value_result : public ::google::protobuf::Message {
 public:
  find_value_result();
  virtual ~find_value_result();
  
  find_value_result(const find_value_result& from);
  
  inline find_value_result& operator=(const find_value_result& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const find_value_result& default_instance();
  
  void Swap(find_value_result* other);
  
  // implements Message ----------------------------------------------
  
  find_value_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const find_value_result& from);
  void MergeFrom(const find_value_result& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .oo.proto.node_info r1 = 1;
  inline bool has_r1() const;
  inline void clear_r1();
  static const int kR1FieldNumber = 1;
  inline const ::oo::proto::node_info& r1() const;
  inline ::oo::proto::node_info* mutable_r1();
  
  // optional string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  
  // @@protoc_insertion_point(class_scope:oo.proto.find_value_result)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::oo::proto::node_info* r1_;
  ::std::string* value_;
  static const ::std::string _default_value_;
  friend void  protobuf_AddDesc_o_5fnet_5fctrl_2eproto();
  friend void protobuf_AssignDesc_o_5fnet_5fctrl_2eproto();
  friend void protobuf_ShutdownFile_o_5fnet_5fctrl_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static find_value_result* default_instance_;
};
// -------------------------------------------------------------------

class proxy_pkg : public ::google::protobuf::Message {
 public:
  proxy_pkg();
  virtual ~proxy_pkg();
  
  proxy_pkg(const proxy_pkg& from);
  
  inline proxy_pkg& operator=(const proxy_pkg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const proxy_pkg& default_instance();
  
  void Swap(proxy_pkg* other);
  
  // implements Message ----------------------------------------------
  
  proxy_pkg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const proxy_pkg& from);
  void MergeFrom(const proxy_pkg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string from = 1;
  inline bool has_from() const;
  inline void clear_from();
  static const int kFromFieldNumber = 1;
  inline const ::std::string& from() const;
  inline void set_from(const ::std::string& value);
  inline void set_from(const char* value);
  inline void set_from(const char* value, size_t size);
  inline ::std::string* mutable_from();
  
  // required string to = 2;
  inline bool has_to() const;
  inline void clear_to();
  static const int kToFieldNumber = 2;
  inline const ::std::string& to() const;
  inline void set_to(const ::std::string& value);
  inline void set_to(const char* value);
  inline void set_to(const char* value, size_t size);
  inline ::std::string* mutable_to();
  
  // required string pkg = 3;
  inline bool has_pkg() const;
  inline void clear_pkg();
  static const int kPkgFieldNumber = 3;
  inline const ::std::string& pkg() const;
  inline void set_pkg(const ::std::string& value);
  inline void set_pkg(const char* value);
  inline void set_pkg(const char* value, size_t size);
  inline ::std::string* mutable_pkg();
  
  // @@protoc_insertion_point(class_scope:oo.proto.proxy_pkg)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* from_;
  static const ::std::string _default_from_;
  ::std::string* to_;
  static const ::std::string _default_to_;
  ::std::string* pkg_;
  static const ::std::string _default_pkg_;
  friend void  protobuf_AddDesc_o_5fnet_5fctrl_2eproto();
  friend void protobuf_AssignDesc_o_5fnet_5fctrl_2eproto();
  friend void protobuf_ShutdownFile_o_5fnet_5fctrl_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static proxy_pkg* default_instance_;
};
// -------------------------------------------------------------------

class net_ctrl_msg : public ::google::protobuf::Message {
 public:
  net_ctrl_msg();
  virtual ~net_ctrl_msg();
  
  net_ctrl_msg(const net_ctrl_msg& from);
  
  inline net_ctrl_msg& operator=(const net_ctrl_msg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const net_ctrl_msg& default_instance();
  
  void Swap(net_ctrl_msg* other);
  
  // implements Message ----------------------------------------------
  
  net_ctrl_msg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const net_ctrl_msg& from);
  void MergeFrom(const net_ctrl_msg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string trans_local_id = 1;
  inline bool has_trans_local_id() const;
  inline void clear_trans_local_id();
  static const int kTransLocalIdFieldNumber = 1;
  inline const ::std::string& trans_local_id() const;
  inline void set_trans_local_id(const ::std::string& value);
  inline void set_trans_local_id(const char* value);
  inline void set_trans_local_id(const char* value, size_t size);
  inline ::std::string* mutable_trans_local_id();
  
  // optional .oo.proto.node_active node_active_ = 2;
  inline bool has_node_active_() const;
  inline void clear_node_active_();
  static const int kNodeActiveFieldNumber = 2;
  inline const ::oo::proto::node_active& node_active_() const;
  inline ::oo::proto::node_active* mutable_node_active_();
  
  // optional .oo.proto.node_kad_update node_kad_update_ = 3;
  inline bool has_node_kad_update_() const;
  inline void clear_node_kad_update_();
  static const int kNodeKadUpdateFieldNumber = 3;
  inline const ::oo::proto::node_kad_update& node_kad_update_() const;
  inline ::oo::proto::node_kad_update* mutable_node_kad_update_();
  
  // optional .oo.proto.store_key store_key_ = 4;
  inline bool has_store_key_() const;
  inline void clear_store_key_();
  static const int kStoreKeyFieldNumber = 4;
  inline const ::oo::proto::store_key& store_key_() const;
  inline ::oo::proto::store_key* mutable_store_key_();
  
  // optional .oo.proto.store_key_result store_key_result_ = 5;
  inline bool has_store_key_result_() const;
  inline void clear_store_key_result_();
  static const int kStoreKeyResultFieldNumber = 5;
  inline const ::oo::proto::store_key_result& store_key_result_() const;
  inline ::oo::proto::store_key_result* mutable_store_key_result_();
  
  // optional .oo.proto.find_node find_node_ = 6;
  inline bool has_find_node_() const;
  inline void clear_find_node_();
  static const int kFindNodeFieldNumber = 6;
  inline const ::oo::proto::find_node& find_node_() const;
  inline ::oo::proto::find_node* mutable_find_node_();
  
  // optional .oo.proto.find_node_result find_node_result_ = 7;
  inline bool has_find_node_result_() const;
  inline void clear_find_node_result_();
  static const int kFindNodeResultFieldNumber = 7;
  inline const ::oo::proto::find_node_result& find_node_result_() const;
  inline ::oo::proto::find_node_result* mutable_find_node_result_();
  
  // optional .oo.proto.find_value find_value_ = 8;
  inline bool has_find_value_() const;
  inline void clear_find_value_();
  static const int kFindValueFieldNumber = 8;
  inline const ::oo::proto::find_value& find_value_() const;
  inline ::oo::proto::find_value* mutable_find_value_();
  
  // optional .oo.proto.find_value_result find_value_result_ = 9;
  inline bool has_find_value_result_() const;
  inline void clear_find_value_result_();
  static const int kFindValueResultFieldNumber = 9;
  inline const ::oo::proto::find_value_result& find_value_result_() const;
  inline ::oo::proto::find_value_result* mutable_find_value_result_();
  
  // optional .oo.proto.proxy_pkg proxy_pkg_ = 10;
  inline bool has_proxy_pkg_() const;
  inline void clear_proxy_pkg_();
  static const int kProxyPkgFieldNumber = 10;
  inline const ::oo::proto::proxy_pkg& proxy_pkg_() const;
  inline ::oo::proto::proxy_pkg* mutable_proxy_pkg_();
  
  // @@protoc_insertion_point(class_scope:oo.proto.net_ctrl_msg)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* trans_local_id_;
  static const ::std::string _default_trans_local_id_;
  ::oo::proto::node_active* node_active__;
  ::oo::proto::node_kad_update* node_kad_update__;
  ::oo::proto::store_key* store_key__;
  ::oo::proto::store_key_result* store_key_result__;
  ::oo::proto::find_node* find_node__;
  ::oo::proto::find_node_result* find_node_result__;
  ::oo::proto::find_value* find_value__;
  ::oo::proto::find_value_result* find_value_result__;
  ::oo::proto::proxy_pkg* proxy_pkg__;
  friend void  protobuf_AddDesc_o_5fnet_5fctrl_2eproto();
  friend void protobuf_AssignDesc_o_5fnet_5fctrl_2eproto();
  friend void protobuf_ShutdownFile_o_5fnet_5fctrl_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static net_ctrl_msg* default_instance_;
};
// ===================================================================


// ===================================================================

// node_info

// required string id = 1;
inline bool node_info::has_id() const {
  return _has_bit(0);
}
inline void node_info::clear_id() {
  if (id_ != &_default_id_) {
    id_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& node_info::id() const {
  return *id_;
}
inline void node_info::set_id(const ::std::string& value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void node_info::set_id(const char* value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void node_info::set_id(const char* value, size_t size) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* node_info::mutable_id() {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  return id_;
}

// required string addr = 2;
inline bool node_info::has_addr() const {
  return _has_bit(1);
}
inline void node_info::clear_addr() {
  if (addr_ != &_default_addr_) {
    addr_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& node_info::addr() const {
  return *addr_;
}
inline void node_info::set_addr(const ::std::string& value) {
  _set_bit(1);
  if (addr_ == &_default_addr_) {
    addr_ = new ::std::string;
  }
  addr_->assign(value);
}
inline void node_info::set_addr(const char* value) {
  _set_bit(1);
  if (addr_ == &_default_addr_) {
    addr_ = new ::std::string;
  }
  addr_->assign(value);
}
inline void node_info::set_addr(const char* value, size_t size) {
  _set_bit(1);
  if (addr_ == &_default_addr_) {
    addr_ = new ::std::string;
  }
  addr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* node_info::mutable_addr() {
  _set_bit(1);
  if (addr_ == &_default_addr_) {
    addr_ = new ::std::string;
  }
  return addr_;
}

// required uint64 ping_time = 3;
inline bool node_info::has_ping_time() const {
  return _has_bit(2);
}
inline void node_info::clear_ping_time() {
  ping_time_ = GOOGLE_ULONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::uint64 node_info::ping_time() const {
  return ping_time_;
}
inline void node_info::set_ping_time(::google::protobuf::uint64 value) {
  _set_bit(2);
  ping_time_ = value;
}

// required .oo.proto.node_info.InetProto proto = 4;
inline bool node_info::has_proto() const {
  return _has_bit(3);
}
inline void node_info::clear_proto() {
  proto_ = 0;
  _clear_bit(3);
}
inline ::oo::proto::node_info_InetProto node_info::proto() const {
  return static_cast< ::oo::proto::node_info_InetProto >(proto_);
}
inline void node_info::set_proto(::oo::proto::node_info_InetProto value) {
  GOOGLE_DCHECK(::oo::proto::node_info_InetProto_IsValid(value));
  _set_bit(3);
  proto_ = value;
}

// required int32 port = 5;
inline bool node_info::has_port() const {
  return _has_bit(4);
}
inline void node_info::clear_port() {
  port_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 node_info::port() const {
  return port_;
}
inline void node_info::set_port(::google::protobuf::int32 value) {
  _set_bit(4);
  port_ = value;
}

// -------------------------------------------------------------------

// node_active

// required .oo.proto.node_info node = 1;
inline bool node_active::has_node() const {
  return _has_bit(0);
}
inline void node_active::clear_node() {
  if (node_ != NULL) node_->::oo::proto::node_info::Clear();
  _clear_bit(0);
}
inline const ::oo::proto::node_info& node_active::node() const {
  return node_ != NULL ? *node_ : *default_instance_->node_;
}
inline ::oo::proto::node_info* node_active::mutable_node() {
  _set_bit(0);
  if (node_ == NULL) node_ = new ::oo::proto::node_info;
  return node_;
}

// -------------------------------------------------------------------

// node_kad_update

// repeated .oo.proto.node_info nodes = 1;
inline int node_kad_update::nodes_size() const {
  return nodes_.size();
}
inline void node_kad_update::clear_nodes() {
  nodes_.Clear();
}
inline const ::oo::proto::node_info& node_kad_update::nodes(int index) const {
  return nodes_.Get(index);
}
inline ::oo::proto::node_info* node_kad_update::mutable_nodes(int index) {
  return nodes_.Mutable(index);
}
inline ::oo::proto::node_info* node_kad_update::add_nodes() {
  return nodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::oo::proto::node_info >&
node_kad_update::nodes() const {
  return nodes_;
}
inline ::google::protobuf::RepeatedPtrField< ::oo::proto::node_info >*
node_kad_update::mutable_nodes() {
  return &nodes_;
}

// -------------------------------------------------------------------

// store_key

// required string key = 1;
inline bool store_key::has_key() const {
  return _has_bit(0);
}
inline void store_key::clear_key() {
  if (key_ != &_default_key_) {
    key_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& store_key::key() const {
  return *key_;
}
inline void store_key::set_key(const ::std::string& value) {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void store_key::set_key(const char* value) {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void store_key::set_key(const char* value, size_t size) {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* store_key::mutable_key() {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  return key_;
}

// required string value = 2;
inline bool store_key::has_value() const {
  return _has_bit(1);
}
inline void store_key::clear_value() {
  if (value_ != &_default_value_) {
    value_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& store_key::value() const {
  return *value_;
}
inline void store_key::set_value(const ::std::string& value) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void store_key::set_value(const char* value) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void store_key::set_value(const char* value, size_t size) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* store_key::mutable_value() {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  return value_;
}

// -------------------------------------------------------------------

// store_key_result

// required string key = 1;
inline bool store_key_result::has_key() const {
  return _has_bit(0);
}
inline void store_key_result::clear_key() {
  if (key_ != &_default_key_) {
    key_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& store_key_result::key() const {
  return *key_;
}
inline void store_key_result::set_key(const ::std::string& value) {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void store_key_result::set_key(const char* value) {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void store_key_result::set_key(const char* value, size_t size) {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* store_key_result::mutable_key() {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  return key_;
}

// required bool is_suc = 2;
inline bool store_key_result::has_is_suc() const {
  return _has_bit(1);
}
inline void store_key_result::clear_is_suc() {
  is_suc_ = false;
  _clear_bit(1);
}
inline bool store_key_result::is_suc() const {
  return is_suc_;
}
inline void store_key_result::set_is_suc(bool value) {
  _set_bit(1);
  is_suc_ = value;
}

// -------------------------------------------------------------------

// find_node

// required string f_id = 1;
inline bool find_node::has_f_id() const {
  return _has_bit(0);
}
inline void find_node::clear_f_id() {
  if (f_id_ != &_default_f_id_) {
    f_id_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& find_node::f_id() const {
  return *f_id_;
}
inline void find_node::set_f_id(const ::std::string& value) {
  _set_bit(0);
  if (f_id_ == &_default_f_id_) {
    f_id_ = new ::std::string;
  }
  f_id_->assign(value);
}
inline void find_node::set_f_id(const char* value) {
  _set_bit(0);
  if (f_id_ == &_default_f_id_) {
    f_id_ = new ::std::string;
  }
  f_id_->assign(value);
}
inline void find_node::set_f_id(const char* value, size_t size) {
  _set_bit(0);
  if (f_id_ == &_default_f_id_) {
    f_id_ = new ::std::string;
  }
  f_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* find_node::mutable_f_id() {
  _set_bit(0);
  if (f_id_ == &_default_f_id_) {
    f_id_ = new ::std::string;
  }
  return f_id_;
}

// -------------------------------------------------------------------

// find_node_result

// repeated .oo.proto.node_info result = 1;
inline int find_node_result::result_size() const {
  return result_.size();
}
inline void find_node_result::clear_result() {
  result_.Clear();
}
inline const ::oo::proto::node_info& find_node_result::result(int index) const {
  return result_.Get(index);
}
inline ::oo::proto::node_info* find_node_result::mutable_result(int index) {
  return result_.Mutable(index);
}
inline ::oo::proto::node_info* find_node_result::add_result() {
  return result_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::oo::proto::node_info >&
find_node_result::result() const {
  return result_;
}
inline ::google::protobuf::RepeatedPtrField< ::oo::proto::node_info >*
find_node_result::mutable_result() {
  return &result_;
}

// -------------------------------------------------------------------

// find_value

// required string f_id = 1;
inline bool find_value::has_f_id() const {
  return _has_bit(0);
}
inline void find_value::clear_f_id() {
  if (f_id_ != &_default_f_id_) {
    f_id_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& find_value::f_id() const {
  return *f_id_;
}
inline void find_value::set_f_id(const ::std::string& value) {
  _set_bit(0);
  if (f_id_ == &_default_f_id_) {
    f_id_ = new ::std::string;
  }
  f_id_->assign(value);
}
inline void find_value::set_f_id(const char* value) {
  _set_bit(0);
  if (f_id_ == &_default_f_id_) {
    f_id_ = new ::std::string;
  }
  f_id_->assign(value);
}
inline void find_value::set_f_id(const char* value, size_t size) {
  _set_bit(0);
  if (f_id_ == &_default_f_id_) {
    f_id_ = new ::std::string;
  }
  f_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* find_value::mutable_f_id() {
  _set_bit(0);
  if (f_id_ == &_default_f_id_) {
    f_id_ = new ::std::string;
  }
  return f_id_;
}

// -------------------------------------------------------------------

// find_value_result

// required .oo.proto.node_info r1 = 1;
inline bool find_value_result::has_r1() const {
  return _has_bit(0);
}
inline void find_value_result::clear_r1() {
  if (r1_ != NULL) r1_->::oo::proto::node_info::Clear();
  _clear_bit(0);
}
inline const ::oo::proto::node_info& find_value_result::r1() const {
  return r1_ != NULL ? *r1_ : *default_instance_->r1_;
}
inline ::oo::proto::node_info* find_value_result::mutable_r1() {
  _set_bit(0);
  if (r1_ == NULL) r1_ = new ::oo::proto::node_info;
  return r1_;
}

// optional string value = 2;
inline bool find_value_result::has_value() const {
  return _has_bit(1);
}
inline void find_value_result::clear_value() {
  if (value_ != &_default_value_) {
    value_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& find_value_result::value() const {
  return *value_;
}
inline void find_value_result::set_value(const ::std::string& value) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void find_value_result::set_value(const char* value) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void find_value_result::set_value(const char* value, size_t size) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* find_value_result::mutable_value() {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  return value_;
}

// -------------------------------------------------------------------

// proxy_pkg

// required string from = 1;
inline bool proxy_pkg::has_from() const {
  return _has_bit(0);
}
inline void proxy_pkg::clear_from() {
  if (from_ != &_default_from_) {
    from_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& proxy_pkg::from() const {
  return *from_;
}
inline void proxy_pkg::set_from(const ::std::string& value) {
  _set_bit(0);
  if (from_ == &_default_from_) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void proxy_pkg::set_from(const char* value) {
  _set_bit(0);
  if (from_ == &_default_from_) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void proxy_pkg::set_from(const char* value, size_t size) {
  _set_bit(0);
  if (from_ == &_default_from_) {
    from_ = new ::std::string;
  }
  from_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* proxy_pkg::mutable_from() {
  _set_bit(0);
  if (from_ == &_default_from_) {
    from_ = new ::std::string;
  }
  return from_;
}

// required string to = 2;
inline bool proxy_pkg::has_to() const {
  return _has_bit(1);
}
inline void proxy_pkg::clear_to() {
  if (to_ != &_default_to_) {
    to_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& proxy_pkg::to() const {
  return *to_;
}
inline void proxy_pkg::set_to(const ::std::string& value) {
  _set_bit(1);
  if (to_ == &_default_to_) {
    to_ = new ::std::string;
  }
  to_->assign(value);
}
inline void proxy_pkg::set_to(const char* value) {
  _set_bit(1);
  if (to_ == &_default_to_) {
    to_ = new ::std::string;
  }
  to_->assign(value);
}
inline void proxy_pkg::set_to(const char* value, size_t size) {
  _set_bit(1);
  if (to_ == &_default_to_) {
    to_ = new ::std::string;
  }
  to_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* proxy_pkg::mutable_to() {
  _set_bit(1);
  if (to_ == &_default_to_) {
    to_ = new ::std::string;
  }
  return to_;
}

// required string pkg = 3;
inline bool proxy_pkg::has_pkg() const {
  return _has_bit(2);
}
inline void proxy_pkg::clear_pkg() {
  if (pkg_ != &_default_pkg_) {
    pkg_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& proxy_pkg::pkg() const {
  return *pkg_;
}
inline void proxy_pkg::set_pkg(const ::std::string& value) {
  _set_bit(2);
  if (pkg_ == &_default_pkg_) {
    pkg_ = new ::std::string;
  }
  pkg_->assign(value);
}
inline void proxy_pkg::set_pkg(const char* value) {
  _set_bit(2);
  if (pkg_ == &_default_pkg_) {
    pkg_ = new ::std::string;
  }
  pkg_->assign(value);
}
inline void proxy_pkg::set_pkg(const char* value, size_t size) {
  _set_bit(2);
  if (pkg_ == &_default_pkg_) {
    pkg_ = new ::std::string;
  }
  pkg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* proxy_pkg::mutable_pkg() {
  _set_bit(2);
  if (pkg_ == &_default_pkg_) {
    pkg_ = new ::std::string;
  }
  return pkg_;
}

// -------------------------------------------------------------------

// net_ctrl_msg

// optional string trans_local_id = 1;
inline bool net_ctrl_msg::has_trans_local_id() const {
  return _has_bit(0);
}
inline void net_ctrl_msg::clear_trans_local_id() {
  if (trans_local_id_ != &_default_trans_local_id_) {
    trans_local_id_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& net_ctrl_msg::trans_local_id() const {
  return *trans_local_id_;
}
inline void net_ctrl_msg::set_trans_local_id(const ::std::string& value) {
  _set_bit(0);
  if (trans_local_id_ == &_default_trans_local_id_) {
    trans_local_id_ = new ::std::string;
  }
  trans_local_id_->assign(value);
}
inline void net_ctrl_msg::set_trans_local_id(const char* value) {
  _set_bit(0);
  if (trans_local_id_ == &_default_trans_local_id_) {
    trans_local_id_ = new ::std::string;
  }
  trans_local_id_->assign(value);
}
inline void net_ctrl_msg::set_trans_local_id(const char* value, size_t size) {
  _set_bit(0);
  if (trans_local_id_ == &_default_trans_local_id_) {
    trans_local_id_ = new ::std::string;
  }
  trans_local_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* net_ctrl_msg::mutable_trans_local_id() {
  _set_bit(0);
  if (trans_local_id_ == &_default_trans_local_id_) {
    trans_local_id_ = new ::std::string;
  }
  return trans_local_id_;
}

// optional .oo.proto.node_active node_active_ = 2;
inline bool net_ctrl_msg::has_node_active_() const {
  return _has_bit(1);
}
inline void net_ctrl_msg::clear_node_active_() {
  if (node_active__ != NULL) node_active__->::oo::proto::node_active::Clear();
  _clear_bit(1);
}
inline const ::oo::proto::node_active& net_ctrl_msg::node_active_() const {
  return node_active__ != NULL ? *node_active__ : *default_instance_->node_active__;
}
inline ::oo::proto::node_active* net_ctrl_msg::mutable_node_active_() {
  _set_bit(1);
  if (node_active__ == NULL) node_active__ = new ::oo::proto::node_active;
  return node_active__;
}

// optional .oo.proto.node_kad_update node_kad_update_ = 3;
inline bool net_ctrl_msg::has_node_kad_update_() const {
  return _has_bit(2);
}
inline void net_ctrl_msg::clear_node_kad_update_() {
  if (node_kad_update__ != NULL) node_kad_update__->::oo::proto::node_kad_update::Clear();
  _clear_bit(2);
}
inline const ::oo::proto::node_kad_update& net_ctrl_msg::node_kad_update_() const {
  return node_kad_update__ != NULL ? *node_kad_update__ : *default_instance_->node_kad_update__;
}
inline ::oo::proto::node_kad_update* net_ctrl_msg::mutable_node_kad_update_() {
  _set_bit(2);
  if (node_kad_update__ == NULL) node_kad_update__ = new ::oo::proto::node_kad_update;
  return node_kad_update__;
}

// optional .oo.proto.store_key store_key_ = 4;
inline bool net_ctrl_msg::has_store_key_() const {
  return _has_bit(3);
}
inline void net_ctrl_msg::clear_store_key_() {
  if (store_key__ != NULL) store_key__->::oo::proto::store_key::Clear();
  _clear_bit(3);
}
inline const ::oo::proto::store_key& net_ctrl_msg::store_key_() const {
  return store_key__ != NULL ? *store_key__ : *default_instance_->store_key__;
}
inline ::oo::proto::store_key* net_ctrl_msg::mutable_store_key_() {
  _set_bit(3);
  if (store_key__ == NULL) store_key__ = new ::oo::proto::store_key;
  return store_key__;
}

// optional .oo.proto.store_key_result store_key_result_ = 5;
inline bool net_ctrl_msg::has_store_key_result_() const {
  return _has_bit(4);
}
inline void net_ctrl_msg::clear_store_key_result_() {
  if (store_key_result__ != NULL) store_key_result__->::oo::proto::store_key_result::Clear();
  _clear_bit(4);
}
inline const ::oo::proto::store_key_result& net_ctrl_msg::store_key_result_() const {
  return store_key_result__ != NULL ? *store_key_result__ : *default_instance_->store_key_result__;
}
inline ::oo::proto::store_key_result* net_ctrl_msg::mutable_store_key_result_() {
  _set_bit(4);
  if (store_key_result__ == NULL) store_key_result__ = new ::oo::proto::store_key_result;
  return store_key_result__;
}

// optional .oo.proto.find_node find_node_ = 6;
inline bool net_ctrl_msg::has_find_node_() const {
  return _has_bit(5);
}
inline void net_ctrl_msg::clear_find_node_() {
  if (find_node__ != NULL) find_node__->::oo::proto::find_node::Clear();
  _clear_bit(5);
}
inline const ::oo::proto::find_node& net_ctrl_msg::find_node_() const {
  return find_node__ != NULL ? *find_node__ : *default_instance_->find_node__;
}
inline ::oo::proto::find_node* net_ctrl_msg::mutable_find_node_() {
  _set_bit(5);
  if (find_node__ == NULL) find_node__ = new ::oo::proto::find_node;
  return find_node__;
}

// optional .oo.proto.find_node_result find_node_result_ = 7;
inline bool net_ctrl_msg::has_find_node_result_() const {
  return _has_bit(6);
}
inline void net_ctrl_msg::clear_find_node_result_() {
  if (find_node_result__ != NULL) find_node_result__->::oo::proto::find_node_result::Clear();
  _clear_bit(6);
}
inline const ::oo::proto::find_node_result& net_ctrl_msg::find_node_result_() const {
  return find_node_result__ != NULL ? *find_node_result__ : *default_instance_->find_node_result__;
}
inline ::oo::proto::find_node_result* net_ctrl_msg::mutable_find_node_result_() {
  _set_bit(6);
  if (find_node_result__ == NULL) find_node_result__ = new ::oo::proto::find_node_result;
  return find_node_result__;
}

// optional .oo.proto.find_value find_value_ = 8;
inline bool net_ctrl_msg::has_find_value_() const {
  return _has_bit(7);
}
inline void net_ctrl_msg::clear_find_value_() {
  if (find_value__ != NULL) find_value__->::oo::proto::find_value::Clear();
  _clear_bit(7);
}
inline const ::oo::proto::find_value& net_ctrl_msg::find_value_() const {
  return find_value__ != NULL ? *find_value__ : *default_instance_->find_value__;
}
inline ::oo::proto::find_value* net_ctrl_msg::mutable_find_value_() {
  _set_bit(7);
  if (find_value__ == NULL) find_value__ = new ::oo::proto::find_value;
  return find_value__;
}

// optional .oo.proto.find_value_result find_value_result_ = 9;
inline bool net_ctrl_msg::has_find_value_result_() const {
  return _has_bit(8);
}
inline void net_ctrl_msg::clear_find_value_result_() {
  if (find_value_result__ != NULL) find_value_result__->::oo::proto::find_value_result::Clear();
  _clear_bit(8);
}
inline const ::oo::proto::find_value_result& net_ctrl_msg::find_value_result_() const {
  return find_value_result__ != NULL ? *find_value_result__ : *default_instance_->find_value_result__;
}
inline ::oo::proto::find_value_result* net_ctrl_msg::mutable_find_value_result_() {
  _set_bit(8);
  if (find_value_result__ == NULL) find_value_result__ = new ::oo::proto::find_value_result;
  return find_value_result__;
}

// optional .oo.proto.proxy_pkg proxy_pkg_ = 10;
inline bool net_ctrl_msg::has_proxy_pkg_() const {
  return _has_bit(9);
}
inline void net_ctrl_msg::clear_proxy_pkg_() {
  if (proxy_pkg__ != NULL) proxy_pkg__->::oo::proto::proxy_pkg::Clear();
  _clear_bit(9);
}
inline const ::oo::proto::proxy_pkg& net_ctrl_msg::proxy_pkg_() const {
  return proxy_pkg__ != NULL ? *proxy_pkg__ : *default_instance_->proxy_pkg__;
}
inline ::oo::proto::proxy_pkg* net_ctrl_msg::mutable_proxy_pkg_() {
  _set_bit(9);
  if (proxy_pkg__ == NULL) proxy_pkg__ = new ::oo::proto::proxy_pkg;
  return proxy_pkg__;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace oo

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::oo::proto::node_info_InetProto>() {
  return ::oo::proto::node_info_InetProto_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_o_5fnet_5fctrl_2eproto__INCLUDED
